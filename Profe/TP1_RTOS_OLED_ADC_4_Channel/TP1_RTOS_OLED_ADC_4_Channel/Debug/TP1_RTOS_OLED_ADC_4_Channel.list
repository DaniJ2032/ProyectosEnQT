
TP1_RTOS_OLED_ADC_4_Channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008600  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800963c  0800963c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800963c  0800963c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800963c  0800963c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b6c  2000008c  080096d0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf8  080096d0  00021bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e14  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e3c  00000000  00000000  00039ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003dd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003f290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000406e  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170ba  00000000  00000000  000446ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093fbc  00000000  00000000  0005b768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dfc  00000000  00000000  000ef774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	080086f8 	.word	0x080086f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	080086f8 	.word	0x080086f8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_fmul>:
 800098c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000990:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000994:	bf1e      	ittt	ne
 8000996:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800099a:	ea92 0f0c 	teqne	r2, ip
 800099e:	ea93 0f0c 	teqne	r3, ip
 80009a2:	d06f      	beq.n	8000a84 <__aeabi_fmul+0xf8>
 80009a4:	441a      	add	r2, r3
 80009a6:	ea80 0c01 	eor.w	ip, r0, r1
 80009aa:	0240      	lsls	r0, r0, #9
 80009ac:	bf18      	it	ne
 80009ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009b2:	d01e      	beq.n	80009f2 <__aeabi_fmul+0x66>
 80009b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009c0:	fba0 3101 	umull	r3, r1, r0, r1
 80009c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009cc:	bf3e      	ittt	cc
 80009ce:	0049      	lslcc	r1, r1, #1
 80009d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d4:	005b      	lslcc	r3, r3, #1
 80009d6:	ea40 0001 	orr.w	r0, r0, r1
 80009da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009de:	2afd      	cmp	r2, #253	; 0xfd
 80009e0:	d81d      	bhi.n	8000a1e <__aeabi_fmul+0x92>
 80009e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ea:	bf08      	it	eq
 80009ec:	f020 0001 	biceq.w	r0, r0, #1
 80009f0:	4770      	bx	lr
 80009f2:	f090 0f00 	teq	r0, #0
 80009f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009fa:	bf08      	it	eq
 80009fc:	0249      	lsleq	r1, r1, #9
 80009fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a02:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a06:	3a7f      	subs	r2, #127	; 0x7f
 8000a08:	bfc2      	ittt	gt
 8000a0a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a0e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a12:	4770      	bxgt	lr
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	dc5d      	bgt.n	8000adc <__aeabi_fmul+0x150>
 8000a20:	f112 0f19 	cmn.w	r2, #25
 8000a24:	bfdc      	itt	le
 8000a26:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a2a:	4770      	bxle	lr
 8000a2c:	f1c2 0200 	rsb	r2, r2, #0
 8000a30:	0041      	lsls	r1, r0, #1
 8000a32:	fa21 f102 	lsr.w	r1, r1, r2
 8000a36:	f1c2 0220 	rsb	r2, r2, #32
 8000a3a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a42:	f140 0000 	adc.w	r0, r0, #0
 8000a46:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a4a:	bf08      	it	eq
 8000a4c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a50:	4770      	bx	lr
 8000a52:	f092 0f00 	teq	r2, #0
 8000a56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a5a:	bf02      	ittt	eq
 8000a5c:	0040      	lsleq	r0, r0, #1
 8000a5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a62:	3a01      	subeq	r2, #1
 8000a64:	d0f9      	beq.n	8000a5a <__aeabi_fmul+0xce>
 8000a66:	ea40 000c 	orr.w	r0, r0, ip
 8000a6a:	f093 0f00 	teq	r3, #0
 8000a6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a72:	bf02      	ittt	eq
 8000a74:	0049      	lsleq	r1, r1, #1
 8000a76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a7a:	3b01      	subeq	r3, #1
 8000a7c:	d0f9      	beq.n	8000a72 <__aeabi_fmul+0xe6>
 8000a7e:	ea41 010c 	orr.w	r1, r1, ip
 8000a82:	e78f      	b.n	80009a4 <__aeabi_fmul+0x18>
 8000a84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a88:	ea92 0f0c 	teq	r2, ip
 8000a8c:	bf18      	it	ne
 8000a8e:	ea93 0f0c 	teqne	r3, ip
 8000a92:	d00a      	beq.n	8000aaa <__aeabi_fmul+0x11e>
 8000a94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a98:	bf18      	it	ne
 8000a9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a9e:	d1d8      	bne.n	8000a52 <__aeabi_fmul+0xc6>
 8000aa0:	ea80 0001 	eor.w	r0, r0, r1
 8000aa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aa8:	4770      	bx	lr
 8000aaa:	f090 0f00 	teq	r0, #0
 8000aae:	bf17      	itett	ne
 8000ab0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ab4:	4608      	moveq	r0, r1
 8000ab6:	f091 0f00 	teqne	r1, #0
 8000aba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000abe:	d014      	beq.n	8000aea <__aeabi_fmul+0x15e>
 8000ac0:	ea92 0f0c 	teq	r2, ip
 8000ac4:	d101      	bne.n	8000aca <__aeabi_fmul+0x13e>
 8000ac6:	0242      	lsls	r2, r0, #9
 8000ac8:	d10f      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000aca:	ea93 0f0c 	teq	r3, ip
 8000ace:	d103      	bne.n	8000ad8 <__aeabi_fmul+0x14c>
 8000ad0:	024b      	lsls	r3, r1, #9
 8000ad2:	bf18      	it	ne
 8000ad4:	4608      	movne	r0, r1
 8000ad6:	d108      	bne.n	8000aea <__aeabi_fmul+0x15e>
 8000ad8:	ea80 0001 	eor.w	r0, r0, r1
 8000adc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_fdiv>:
 8000af4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000af8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000afc:	bf1e      	ittt	ne
 8000afe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b02:	ea92 0f0c 	teqne	r2, ip
 8000b06:	ea93 0f0c 	teqne	r3, ip
 8000b0a:	d069      	beq.n	8000be0 <__aeabi_fdiv+0xec>
 8000b0c:	eba2 0203 	sub.w	r2, r2, r3
 8000b10:	ea80 0c01 	eor.w	ip, r0, r1
 8000b14:	0249      	lsls	r1, r1, #9
 8000b16:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b1a:	d037      	beq.n	8000b8c <__aeabi_fdiv+0x98>
 8000b1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b20:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b24:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b28:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	bf38      	it	cc
 8000b30:	005b      	lslcc	r3, r3, #1
 8000b32:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b36:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	bf24      	itt	cs
 8000b3e:	1a5b      	subcs	r3, r3, r1
 8000b40:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b44:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b48:	bf24      	itt	cs
 8000b4a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b52:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b56:	bf24      	itt	cs
 8000b58:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b60:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b64:	bf24      	itt	cs
 8000b66:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b6a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	bf18      	it	ne
 8000b72:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b76:	d1e0      	bne.n	8000b3a <__aeabi_fdiv+0x46>
 8000b78:	2afd      	cmp	r2, #253	; 0xfd
 8000b7a:	f63f af50 	bhi.w	8000a1e <__aeabi_fmul+0x92>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b90:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b94:	327f      	adds	r2, #127	; 0x7f
 8000b96:	bfc2      	ittt	gt
 8000b98:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b9c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ba0:	4770      	bxgt	lr
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	3a01      	subs	r2, #1
 8000bac:	e737      	b.n	8000a1e <__aeabi_fmul+0x92>
 8000bae:	f092 0f00 	teq	r2, #0
 8000bb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bb6:	bf02      	ittt	eq
 8000bb8:	0040      	lsleq	r0, r0, #1
 8000bba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bbe:	3a01      	subeq	r2, #1
 8000bc0:	d0f9      	beq.n	8000bb6 <__aeabi_fdiv+0xc2>
 8000bc2:	ea40 000c 	orr.w	r0, r0, ip
 8000bc6:	f093 0f00 	teq	r3, #0
 8000bca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bce:	bf02      	ittt	eq
 8000bd0:	0049      	lsleq	r1, r1, #1
 8000bd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bd6:	3b01      	subeq	r3, #1
 8000bd8:	d0f9      	beq.n	8000bce <__aeabi_fdiv+0xda>
 8000bda:	ea41 010c 	orr.w	r1, r1, ip
 8000bde:	e795      	b.n	8000b0c <__aeabi_fdiv+0x18>
 8000be0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be4:	ea92 0f0c 	teq	r2, ip
 8000be8:	d108      	bne.n	8000bfc <__aeabi_fdiv+0x108>
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	f47f af7d 	bne.w	8000aea <__aeabi_fmul+0x15e>
 8000bf0:	ea93 0f0c 	teq	r3, ip
 8000bf4:	f47f af70 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	e776      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	d104      	bne.n	8000c0c <__aeabi_fdiv+0x118>
 8000c02:	024b      	lsls	r3, r1, #9
 8000c04:	f43f af4c 	beq.w	8000aa0 <__aeabi_fmul+0x114>
 8000c08:	4608      	mov	r0, r1
 8000c0a:	e76e      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c10:	bf18      	it	ne
 8000c12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c16:	d1ca      	bne.n	8000bae <__aeabi_fdiv+0xba>
 8000c18:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c1c:	f47f af5c 	bne.w	8000ad8 <__aeabi_fmul+0x14c>
 8000c20:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c24:	f47f af3c 	bne.w	8000aa0 <__aeabi_fmul+0x114>
 8000c28:	e75f      	b.n	8000aea <__aeabi_fmul+0x15e>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_f2uiz>:
 8000c2c:	0042      	lsls	r2, r0, #1
 8000c2e:	d20e      	bcs.n	8000c4e <__aeabi_f2uiz+0x22>
 8000c30:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c34:	d30b      	bcc.n	8000c4e <__aeabi_f2uiz+0x22>
 8000c36:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c3e:	d409      	bmi.n	8000c54 <__aeabi_f2uiz+0x28>
 8000c40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c48:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4c:	4770      	bx	lr
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	4770      	bx	lr
 8000c54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c58:	d101      	bne.n	8000c5e <__aeabi_f2uiz+0x32>
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	d102      	bne.n	8000c64 <__aeabi_f2uiz+0x38>
 8000c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c62:	4770      	bx	lr
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <ADC_Select_CH0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH0(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig={0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000c84:	2306      	movs	r3, #6
 8000c86:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK )
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <ADC_Select_CH0+0x38>)
 8000c8e:	f001 f8a9 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <ADC_Select_CH0+0x30>
	{
		Error_Handler();
 8000c98:	f000 fb50 	bl	800133c <Error_Handler>
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000a8 	.word	0x200000a8

08000ca8 <ADC_Select_CH1>:

void ADC_Select_CH1(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig={0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK )
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <ADC_Select_CH1+0x38>)
 8000cca:	f001 f88b 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <ADC_Select_CH1+0x30>
	{
		Error_Handler();
 8000cd4:	f000 fb32 	bl	800133c <Error_Handler>
	}
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000a8 	.word	0x200000a8

08000ce4 <ADC_Select_CH9>:

void ADC_Select_CH9(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig={0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 8000cf4:	2309      	movs	r3, #9
 8000cf6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK )
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <ADC_Select_CH9+0x38>)
 8000d06:	f001 f86d 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <ADC_Select_CH9+0x30>
	{
		Error_Handler();
 8000d10:	f000 fb14 	bl	800133c <Error_Handler>
	}
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000a8 	.word	0x200000a8

08000d20 <ADC_Select_CHTemp>:

void ADC_Select_CHTemp(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig={0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d30:	2310      	movs	r3, #16
 8000d32:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK )
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <ADC_Select_CHTemp+0x38>)
 8000d42:	f001 f84f 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <ADC_Select_CHTemp+0x30>
	{
		Error_Handler();
 8000d4c:	f000 faf6 	bl	800133c <Error_Handler>
	}
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200000a8 	.word	0x200000a8

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f000 fcf6 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f842 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f000 f8f2 	bl	8000f50 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d6c:	f000 f89a 	bl	8000ea4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d70:	f000 f8c0 	bl	8000ef4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d74:	f004 f80c 	bl	8004d90 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QmsgScreen */
  QmsgScreenHandle = osMessageQueueNew (4, sizeof(uint16_t), &QmsgScreen_attributes);
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <main+0x64>)
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f004 f945 	bl	800500c <osMessageQueueNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <main+0x68>)
 8000d86:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d88:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <main+0x6c>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <main+0x70>)
 8000d8e:	f004 f865 	bl	8004e5c <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <main+0x74>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(ADC_Read, NULL, &myTask02_attributes);
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <main+0x78>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <main+0x7c>)
 8000d9e:	f004 f85d 	bl	8004e5c <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <main+0x80>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(OLED_Update, NULL, &myTask03_attributes);
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <main+0x84>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <main+0x88>)
 8000dae:	f004 f855 	bl	8004e5c <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <main+0x8c>)
 8000db6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000db8:	f004 f81c 	bl	8004df4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <main+0x60>
 8000dbe:	bf00      	nop
 8000dc0:	08008814 	.word	0x08008814
 8000dc4:	20000138 	.word	0x20000138
 8000dc8:	080087a8 	.word	0x080087a8
 8000dcc:	08000fad 	.word	0x08000fad
 8000dd0:	2000012c 	.word	0x2000012c
 8000dd4:	080087cc 	.word	0x080087cc
 8000dd8:	08000fbd 	.word	0x08000fbd
 8000ddc:	20000130 	.word	0x20000130
 8000de0:	080087f0 	.word	0x080087f0
 8000de4:	080010e1 	.word	0x080010e1
 8000de8:	20000134 	.word	0x20000134

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	2228      	movs	r2, #40	; 0x28
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f006 ffa0 	bl	8007d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 f824 	bl	8002e90 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4e:	f000 fa75 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fa90 	bl	8003394 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e7a:	f000 fa5f 	bl	800133c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e86:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fc1a 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e96:	f000 fa51 	bl	800133c <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	; 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_ADC1_Init+0x48>)
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <MX_ADC1_Init+0x4c>)
 8000eac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_ADC1_Init+0x48>)
 8000eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_ADC1_Init+0x48>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_ADC1_Init+0x48>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_ADC1_Init+0x48>)
 8000ec4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ec8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_ADC1_Init+0x48>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_ADC1_Init+0x48>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_ADC1_Init+0x48>)
 8000ed8:	f000 fcc0 	bl	800185c <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8000ee2:	f000 fa2b 	bl	800133c <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000a8 	.word	0x200000a8
 8000ef0:	40012400 	.word	0x40012400

08000ef4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <MX_I2C1_Init+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_I2C1_Init+0x58>)
 8000f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_I2C1_Init+0x50>)
 8000f32:	f001 fb53 	bl	80025dc <HAL_I2C_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f3c:	f000 f9fe 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000d8 	.word	0x200000d8
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	00061a80 	.word	0x00061a80

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 0320 	and.w	r3, r3, #32
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <MX_GPIO_Init+0x58>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000

08000fac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f003 fffb 	bl	8004fb0 <osDelay>
 8000fba:	e7fb      	b.n	8000fb4 <StartDefaultTask+0x8>

08000fbc <ADC_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADC_Read */
void ADC_Read(void *argument)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_Read */
  /* Infinite loop */
  for(;;)
  {
	  ADC_Select_CH0();
 8000fc4:	f7ff fe52 	bl	8000c6c <ADC_Select_CH0>
	  HAL_ADC_Start(&hadc1);
 8000fc8:	483f      	ldr	r0, [pc, #252]	; (80010c8 <ADC_Read+0x10c>)
 8000fca:	f000 fd1f 	bl	8001a0c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd2:	483d      	ldr	r0, [pc, #244]	; (80010c8 <ADC_Read+0x10c>)
 8000fd4:	f000 fdf4 	bl	8001bc0 <HAL_ADC_PollForConversion>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 8000fd8:	483b      	ldr	r0, [pc, #236]	; (80010c8 <ADC_Read+0x10c>)
 8000fda:	f000 fef7 	bl	8001dcc <HAL_ADC_GetValue>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <ADC_Read+0x110>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000fe6:	4838      	ldr	r0, [pc, #224]	; (80010c8 <ADC_Read+0x10c>)
 8000fe8:	f000 fdbe 	bl	8001b68 <HAL_ADC_Stop>
	  osDelay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f003 ffdf 	bl	8004fb0 <osDelay>
	  ADC_Select_CH1();
 8000ff2:	f7ff fe59 	bl	8000ca8 <ADC_Select_CH1>
	  HAL_ADC_Start(&hadc1);
 8000ff6:	4834      	ldr	r0, [pc, #208]	; (80010c8 <ADC_Read+0x10c>)
 8000ff8:	f000 fd08 	bl	8001a0c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001000:	4831      	ldr	r0, [pc, #196]	; (80010c8 <ADC_Read+0x10c>)
 8001002:	f000 fddd 	bl	8001bc0 <HAL_ADC_PollForConversion>
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 8001006:	4830      	ldr	r0, [pc, #192]	; (80010c8 <ADC_Read+0x10c>)
 8001008:	f000 fee0 	bl	8001dcc <HAL_ADC_GetValue>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <ADC_Read+0x110>)
 8001012:	805a      	strh	r2, [r3, #2]
	  HAL_ADC_Stop(&hadc1);
 8001014:	482c      	ldr	r0, [pc, #176]	; (80010c8 <ADC_Read+0x10c>)
 8001016:	f000 fda7 	bl	8001b68 <HAL_ADC_Stop>
	  osDelay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f003 ffc8 	bl	8004fb0 <osDelay>
	  ADC_Select_CH9();
 8001020:	f7ff fe60 	bl	8000ce4 <ADC_Select_CH9>
	  HAL_ADC_Start(&hadc1);
 8001024:	4828      	ldr	r0, [pc, #160]	; (80010c8 <ADC_Read+0x10c>)
 8001026:	f000 fcf1 	bl	8001a0c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800102a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800102e:	4826      	ldr	r0, [pc, #152]	; (80010c8 <ADC_Read+0x10c>)
 8001030:	f000 fdc6 	bl	8001bc0 <HAL_ADC_PollForConversion>
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8001034:	4824      	ldr	r0, [pc, #144]	; (80010c8 <ADC_Read+0x10c>)
 8001036:	f000 fec9 	bl	8001dcc <HAL_ADC_GetValue>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <ADC_Read+0x110>)
 8001040:	809a      	strh	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc1);
 8001042:	4821      	ldr	r0, [pc, #132]	; (80010c8 <ADC_Read+0x10c>)
 8001044:	f000 fd90 	bl	8001b68 <HAL_ADC_Stop>
	  osDelay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f003 ffb1 	bl	8004fb0 <osDelay>
	  ADC_Select_CHTemp();
 800104e:	f7ff fe67 	bl	8000d20 <ADC_Select_CHTemp>
	  HAL_ADC_Start(&hadc1);
 8001052:	481d      	ldr	r0, [pc, #116]	; (80010c8 <ADC_Read+0x10c>)
 8001054:	f000 fcda 	bl	8001a0c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001058:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800105c:	481a      	ldr	r0, [pc, #104]	; (80010c8 <ADC_Read+0x10c>)
 800105e:	f000 fdaf 	bl	8001bc0 <HAL_ADC_PollForConversion>
	  ADC_VAL[3] = HAL_ADC_GetValue(&hadc1);
 8001062:	4819      	ldr	r0, [pc, #100]	; (80010c8 <ADC_Read+0x10c>)
 8001064:	f000 feb2 	bl	8001dcc <HAL_ADC_GetValue>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <ADC_Read+0x110>)
 800106e:	80da      	strh	r2, [r3, #6]
	  HAL_ADC_Stop(&hadc1);
 8001070:	4815      	ldr	r0, [pc, #84]	; (80010c8 <ADC_Read+0x10c>)
 8001072:	f000 fd79 	bl	8001b68 <HAL_ADC_Stop>
	  osDelay(10);
 8001076:	200a      	movs	r0, #10
 8001078:	f003 ff9a 	bl	8004fb0 <osDelay>

	  // Envio de datos a la Cola
	  if(osMessageQueueGetCount(QmsgScreenHandle) == 0)
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <ADC_Read+0x114>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f004 f92f 	bl	80052e4 <osMessageQueueGetCount>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d19b      	bne.n	8000fc4 <ADC_Read+0x8>
	  {
		  osMessageQueuePut(QmsgScreenHandle, (void *)&ADC_VAL[0], 0, 10);
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <ADC_Read+0x114>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	230a      	movs	r3, #10
 8001092:	2200      	movs	r2, #0
 8001094:	490d      	ldr	r1, [pc, #52]	; (80010cc <ADC_Read+0x110>)
 8001096:	f004 f83f 	bl	8005118 <osMessageQueuePut>
		  osMessageQueuePut(QmsgScreenHandle, (void *)&ADC_VAL[1], 0, 10);
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <ADC_Read+0x114>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	230a      	movs	r3, #10
 80010a0:	2200      	movs	r2, #0
 80010a2:	490c      	ldr	r1, [pc, #48]	; (80010d4 <ADC_Read+0x118>)
 80010a4:	f004 f838 	bl	8005118 <osMessageQueuePut>
		  osMessageQueuePut(QmsgScreenHandle, (void *)&ADC_VAL[2], 0, 10);
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <ADC_Read+0x114>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	230a      	movs	r3, #10
 80010ae:	2200      	movs	r2, #0
 80010b0:	4909      	ldr	r1, [pc, #36]	; (80010d8 <ADC_Read+0x11c>)
 80010b2:	f004 f831 	bl	8005118 <osMessageQueuePut>
		  osMessageQueuePut(QmsgScreenHandle, (void *)&ADC_VAL[3], 0, 10);
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <ADC_Read+0x114>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	230a      	movs	r3, #10
 80010bc:	2200      	movs	r2, #0
 80010be:	4907      	ldr	r1, [pc, #28]	; (80010dc <ADC_Read+0x120>)
 80010c0:	f004 f82a 	bl	8005118 <osMessageQueuePut>
	  ADC_Select_CH0();
 80010c4:	e77e      	b.n	8000fc4 <ADC_Read+0x8>
 80010c6:	bf00      	nop
 80010c8:	200000a8 	.word	0x200000a8
 80010cc:	2000013c 	.word	0x2000013c
 80010d0:	20000138 	.word	0x20000138
 80010d4:	2000013e 	.word	0x2000013e
 80010d8:	20000140 	.word	0x20000140
 80010dc:	20000142 	.word	0x20000142

080010e0 <OLED_Update>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OLED_Update */
void OLED_Update(void *argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0b0      	sub	sp, #192	; 0xc0
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OLED_Update */
	uint16_t val_ch[4];
	uint16_t temperatura;
	char str_buff_0[27]={};
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80010ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	f8c3 2013 	str.w	r2, [r3, #19]
	char str_buff_1[27]={};
 8001102:	2300      	movs	r3, #0
 8001104:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001106:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
 8001116:	f8c3 2013 	str.w	r2, [r3, #19]
	char str_buff_2[27]={};
 800111a:	2300      	movs	r3, #0
 800111c:	663b      	str	r3, [r7, #96]	; 0x60
 800111e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	f8c3 2013 	str.w	r2, [r3, #19]
	char str_buff_3[27]={};
 8001132:	2300      	movs	r3, #0
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
 8001136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
 8001146:	f8c3 2013 	str.w	r2, [r3, #19]
	u8g_t u8g;

	u8g_InitComFn(&u8g, &u8g_dev_ssd1306_128x64_i2c, u8g_com_arm_stm32_ssd_i2c_fn);
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4a70      	ldr	r2, [pc, #448]	; (8001310 <OLED_Update+0x230>)
 8001150:	4970      	ldr	r1, [pc, #448]	; (8001314 <OLED_Update+0x234>)
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fb21 	bl	800479a <u8g_InitComFn>
			u8g_DrawStr(&u8g, 0, 22,  " 45 Hola !!!!!!   ");
			u8g_DrawStr(&u8g, 0, 36,  "    Dimas Aquí !!!");
		} while (u8g_NextPage(&u8g)); */

		//osDelay(1000);
	  if(osMessageQueueGetCount(QmsgScreenHandle) == 4)
 8001158:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <OLED_Update+0x238>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f004 f8c1 	bl	80052e4 <osMessageQueueGetCount>
 8001162:	4603      	mov	r3, r0
 8001164:	2b04      	cmp	r3, #4
 8001166:	f040 808a 	bne.w	800127e <OLED_Update+0x19e>
	  {
	    osMessageQueueGet(QmsgScreenHandle, (void *)&val_ch[0], 0, 0);
 800116a:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <OLED_Update+0x238>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001172:	2300      	movs	r3, #0
 8001174:	2200      	movs	r2, #0
 8001176:	f004 f843 	bl	8005200 <osMessageQueueGet>
	    sprintf(str_buff_0, "Canal 0: %d", val_ch[0]);
 800117a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800117e:	461a      	mov	r2, r3
 8001180:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001184:	4965      	ldr	r1, [pc, #404]	; (800131c <OLED_Update+0x23c>)
 8001186:	4618      	mov	r0, r3
 8001188:	f006 fef0 	bl	8007f6c <siprintf>
	    osMessageQueueGet(QmsgScreenHandle, (void *)&val_ch[1], 0, 0);
 800118c:	4b62      	ldr	r3, [pc, #392]	; (8001318 <OLED_Update+0x238>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001194:	1c99      	adds	r1, r3, #2
 8001196:	2300      	movs	r3, #0
 8001198:	2200      	movs	r2, #0
 800119a:	f004 f831 	bl	8005200 <osMessageQueueGet>
	    sprintf(str_buff_1, "Canal 1: %d", val_ch[1]);
 800119e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80011a2:	461a      	mov	r2, r3
 80011a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a8:	495d      	ldr	r1, [pc, #372]	; (8001320 <OLED_Update+0x240>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f006 fede 	bl	8007f6c <siprintf>
	    osMessageQueueGet(QmsgScreenHandle, (void *)&val_ch[2], 0, 0);
 80011b0:	4b59      	ldr	r3, [pc, #356]	; (8001318 <OLED_Update+0x238>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011b8:	1d19      	adds	r1, r3, #4
 80011ba:	2300      	movs	r3, #0
 80011bc:	2200      	movs	r2, #0
 80011be:	f004 f81f 	bl	8005200 <osMessageQueueGet>
	    sprintf(str_buff_2, "Canal 9: %d", val_ch[2]);
 80011c2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80011c6:	461a      	mov	r2, r3
 80011c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011cc:	4955      	ldr	r1, [pc, #340]	; (8001324 <OLED_Update+0x244>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 fecc 	bl	8007f6c <siprintf>
	    osMessageQueueGet(QmsgScreenHandle, (void *)&val_ch[3], 0, 0);
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <OLED_Update+0x238>)
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011dc:	1d99      	adds	r1, r3, #6
 80011de:	2300      	movs	r3, #0
 80011e0:	2200      	movs	r2, #0
 80011e2:	f004 f80d 	bl	8005200 <osMessageQueueGet>
	    Temp = ((3.3*val_ch[3]/4095-V25)/Avg_Slope)+25;
 80011e6:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f902 	bl	80003f4 <__aeabi_i2d>
 80011f0:	a33f      	add	r3, pc, #252	; (adr r3, 80012f0 <OLED_Update+0x210>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f967 	bl	80004c8 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	a33d      	add	r3, pc, #244	; (adr r3, 80012f8 <OLED_Update+0x218>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fa88 	bl	800071c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	a33a      	add	r3, pc, #232	; (adr r3, 8001300 <OLED_Update+0x220>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7fe ff9d 	bl	8000158 <__aeabi_dsub>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	a338      	add	r3, pc, #224	; (adr r3, 8001308 <OLED_Update+0x228>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff fa76 	bl	800071c <__aeabi_ddiv>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <OLED_Update+0x248>)
 800123e:	f7fe ff8d 	bl	800015c <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fb4f 	bl	80008ec <__aeabi_d2f>
 800124e:	4603      	mov	r3, r0
 8001250:	4a36      	ldr	r2, [pc, #216]	; (800132c <OLED_Update+0x24c>)
 8001252:	6013      	str	r3, [r2, #0]
	    temperatura = Temp/10;
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <OLED_Update+0x24c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4935      	ldr	r1, [pc, #212]	; (8001330 <OLED_Update+0x250>)
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fc4a 	bl	8000af4 <__aeabi_fdiv>
 8001260:	4603      	mov	r3, r0
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fce2 	bl	8000c2c <__aeabi_f2uiz>
 8001268:	4603      	mov	r3, r0
 800126a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	    sprintf(str_buff_3, "Temp   : %d", temperatura);
 800126e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001272:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001276:	492f      	ldr	r1, [pc, #188]	; (8001334 <OLED_Update+0x254>)
 8001278:	4618      	mov	r0, r3
 800127a:	f006 fe77 	bl	8007f6c <siprintf>
	  }


		u8g_FirstPage(&u8g);
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4618      	mov	r0, r3
 8001284:	f003 faa1 	bl	80047ca <u8g_FirstPage>
		do {
			u8g_SetFont(&u8g, u8g_font_courB10);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	492a      	ldr	r1, [pc, #168]	; (8001338 <OLED_Update+0x258>)
 800128e:	4618      	mov	r0, r3
 8001290:	f003 f918 	bl	80044c4 <u8g_SetFont>
			u8g_DrawStr(&u8g, 0, 10, str_buff_0);
 8001294:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001298:	f107 0008 	add.w	r0, r7, #8
 800129c:	220a      	movs	r2, #10
 800129e:	2100      	movs	r1, #0
 80012a0:	f003 f84e 	bl	8004340 <u8g_DrawStr>
			u8g_DrawStr(&u8g, 0, 25, str_buff_1);
 80012a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012a8:	f107 0008 	add.w	r0, r7, #8
 80012ac:	2219      	movs	r2, #25
 80012ae:	2100      	movs	r1, #0
 80012b0:	f003 f846 	bl	8004340 <u8g_DrawStr>
			u8g_DrawStr(&u8g, 0, 40, str_buff_2);
 80012b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012b8:	f107 0008 	add.w	r0, r7, #8
 80012bc:	2228      	movs	r2, #40	; 0x28
 80012be:	2100      	movs	r1, #0
 80012c0:	f003 f83e 	bl	8004340 <u8g_DrawStr>
			u8g_DrawStr(&u8g, 0, 55, str_buff_3);
 80012c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012c8:	f107 0008 	add.w	r0, r7, #8
 80012cc:	2237      	movs	r2, #55	; 0x37
 80012ce:	2100      	movs	r1, #0
 80012d0:	f003 f836 	bl	8004340 <u8g_DrawStr>
		} while (u8g_NextPage(&u8g));
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fa84 	bl	80047e6 <u8g_NextPage>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1d1      	bne.n	8001288 <OLED_Update+0x1a8>

		osDelay(300);
 80012e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012e8:	f003 fe62 	bl	8004fb0 <osDelay>
	  if(osMessageQueueGetCount(QmsgScreenHandle) == 4)
 80012ec:	e734      	b.n	8001158 <OLED_Update+0x78>
 80012ee:	bf00      	nop
 80012f0:	66666666 	.word	0x66666666
 80012f4:	400a6666 	.word	0x400a6666
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40affe00 	.word	0x40affe00
 8001300:	851eb852 	.word	0x851eb852
 8001304:	3fe851eb 	.word	0x3fe851eb
 8001308:	47ae147b 	.word	0x47ae147b
 800130c:	3f647ae1 	.word	0x3f647ae1
 8001310:	0800164d 	.word	0x0800164d
 8001314:	20000018 	.word	0x20000018
 8001318:	20000138 	.word	0x20000138
 800131c:	08008740 	.word	0x08008740
 8001320:	0800874c 	.word	0x0800874c
 8001324:	08008758 	.word	0x08008758
 8001328:	40390000 	.word	0x40390000
 800132c:	20000144 	.word	0x20000144
 8001330:	41200000 	.word	0x41200000
 8001334:	08008764 	.word	0x08008764
 8001338:	08008844 	.word	0x08008844

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_MspInit+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_MspInit+0x68>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_MspInit+0x68>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_MspInit+0x68>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <HAL_MspInit+0x68>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	61d3      	str	r3, [r2, #28]
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_MspInit+0x68>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	210f      	movs	r1, #15
 8001382:	f06f 0001 	mvn.w	r0, #1
 8001386:	f000 ff7c 	bl	8002282 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_MspInit+0x6c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_MspInit+0x6c>)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000

080013b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_ADC_MspInit+0x98>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d137      	bne.n	8001448 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_ADC_MspInit+0x9c>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001420:	2303      	movs	r3, #3
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001424:	2303      	movs	r3, #3
 8001426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4619      	mov	r1, r3
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <HAL_ADC_MspInit+0xa0>)
 8001430:	f000 ff50 	bl	80022d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <HAL_ADC_MspInit+0xa4>)
 8001444:	f000 ff46 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40012400 	.word	0x40012400
 8001454:	40021000 	.word	0x40021000
 8001458:	40010800 	.word	0x40010800
 800145c:	40010c00 	.word	0x40010c00

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_I2C_MspInit+0x70>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d123      	bne.n	80014c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001498:	23c0      	movs	r3, #192	; 0xc0
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <HAL_I2C_MspInit+0x78>)
 80014ac:	f000 ff12 	bl	80022d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	61d3      	str	r3, [r2, #28]
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010c00 	.word	0x40010c00

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150a:	f000 f967 	bl	80017dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800150e:	f005 fc1f 	bl	8006d50 <xTaskGetSchedulerState>
 8001512:	4603      	mov	r3, r0
 8001514:	2b01      	cmp	r3, #1
 8001516:	d001      	beq.n	800151c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001518:	f006 f97e 	bl	8007818 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <_sbrk+0x5c>)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_sbrk+0x60>)
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x64>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <_sbrk+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001550:	f006 fbbc 	bl	8007ccc <__errno>
 8001554:	4603      	mov	r3, r0
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e009      	b.n	8001574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_sbrk+0x64>)
 8001570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20005000 	.word	0x20005000
 8001580:	00000400 	.word	0x00000400
 8001584:	20000148 	.word	0x20000148
 8001588:	20001bf8 	.word	0x20001bf8

0800158c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <u8g_Delay>:

#define	STM32_HAL_I2C_HANDLER	hi2c1
#define	STM32_HAL_I2C_TIMEOUT	2000

uint8_t control = 0;
void u8g_Delay(uint16_t val) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(val);
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f935 	bl	8001814 <HAL_Delay>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <u8g_xMicroDelay>:
void u8g_xMicroDelay(uint16_t val) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
	static uint32_t i, j;
	static uint32_t freq;
	freq = HAL_RCC_GetSysClockFreq() / 1000000;
 80015be:	f001 ffd3 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <u8g_xMicroDelay+0x6c>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	4a15      	ldr	r2, [pc, #84]	; (8001624 <u8g_xMicroDelay+0x70>)
 80015ce:	6013      	str	r3, [r2, #0]

	for (i = 0; i < val;) {
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <u8g_xMicroDelay+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e018      	b.n	800160a <u8g_xMicroDelay+0x56>
		for (j = 0; j < freq; ++j) {
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <u8g_xMicroDelay+0x78>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e009      	b.n	80015f4 <u8g_xMicroDelay+0x40>
			++j;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <u8g_xMicroDelay+0x78>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <u8g_xMicroDelay+0x78>)
 80015e8:	6013      	str	r3, [r2, #0]
		for (j = 0; j < freq; ++j) {
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <u8g_xMicroDelay+0x78>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <u8g_xMicroDelay+0x78>)
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <u8g_xMicroDelay+0x78>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <u8g_xMicroDelay+0x70>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d3ef      	bcc.n	80015e0 <u8g_xMicroDelay+0x2c>
		}
		++i;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <u8g_xMicroDelay+0x74>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <u8g_xMicroDelay+0x74>)
 8001608:	6013      	str	r3, [r2, #0]
	for (i = 0; i < val;) {
 800160a:	88fa      	ldrh	r2, [r7, #6]
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <u8g_xMicroDelay+0x74>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8e1      	bhi.n	80015d8 <u8g_xMicroDelay+0x24>
	}
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	431bde83 	.word	0x431bde83
 8001624:	20000150 	.word	0x20000150
 8001628:	20000154 	.word	0x20000154
 800162c:	20000158 	.word	0x20000158

08001630 <u8g_MicroDelay>:
void u8g_MicroDelay(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	u8g_xMicroDelay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff ffbd 	bl	80015b4 <u8g_xMicroDelay>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}

0800163e <u8g_10MicroDelay>:
void u8g_10MicroDelay(void) {
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
	u8g_xMicroDelay(10);
 8001642:	200a      	movs	r0, #10
 8001644:	f7ff ffb6 	bl	80015b4 <u8g_xMicroDelay>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <u8g_com_arm_stm32_ssd_i2c_fn>:

uint8_t u8g_com_arm_stm32_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val,
		void *arg_ptr) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af04      	add	r7, sp, #16
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	72fb      	strb	r3, [r7, #11]
 800165a:	4613      	mov	r3, r2
 800165c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d845      	bhi.n	80016f0 <u8g_com_arm_stm32_ssd_i2c_fn+0xa4>
 8001664:	a201      	add	r2, pc, #4	; (adr r2, 800166c <u8g_com_arm_stm32_ssd_i2c_fn+0x20>)
 8001666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166a:	bf00      	nop
 800166c:	080016f1 	.word	0x080016f1
 8001670:	0800168d 	.word	0x0800168d
 8001674:	08001693 	.word	0x08001693
 8001678:	080016f1 	.word	0x080016f1
 800167c:	080016f1 	.word	0x080016f1
 8001680:	080016ad 	.word	0x080016ad
 8001684:	080016cf 	.word	0x080016cf
 8001688:	080016cf 	.word	0x080016cf
	case U8G_COM_MSG_STOP:
		break;

	case U8G_COM_MSG_INIT:
		u8g_MicroDelay();
 800168c:	f7ff ffd0 	bl	8001630 <u8g_MicroDelay>
		break;
 8001690:	e02e      	b.n	80016f0 <u8g_com_arm_stm32_ssd_i2c_fn+0xa4>

	case U8G_COM_MSG_ADDRESS:
		if (arg_val == 0) {
 8001692:	7abb      	ldrb	r3, [r7, #10]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <u8g_com_arm_stm32_ssd_i2c_fn+0x54>
			control = 0;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <u8g_com_arm_stm32_ssd_i2c_fn+0xb0>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e002      	b.n	80016a6 <u8g_com_arm_stm32_ssd_i2c_fn+0x5a>
		} else {
			control = 0x40;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <u8g_com_arm_stm32_ssd_i2c_fn+0xb0>)
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	701a      	strb	r2, [r3, #0]
		}
		u8g_10MicroDelay();
 80016a6:	f7ff ffca 	bl	800163e <u8g_10MicroDelay>
		break;
 80016aa:	e021      	b.n	80016f0 <u8g_com_arm_stm32_ssd_i2c_fn+0xa4>

	case U8G_COM_MSG_WRITE_BYTE: {
		HAL_I2C_Mem_Write(&STM32_HAL_I2C_HANDLER, SSD1306_I2C_ADDRESS, control,
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <u8g_com_arm_stm32_ssd_i2c_fn+0xb0>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f107 030a 	add.w	r3, r7, #10
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	2178      	movs	r1, #120	; 0x78
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <u8g_com_arm_stm32_ssd_i2c_fn+0xb4>)
 80016c8:	f001 f8cc 	bl	8002864 <HAL_I2C_Mem_Write>
				1, &arg_val, 1, STM32_HAL_I2C_TIMEOUT);
	}
		break;
 80016cc:	e010      	b.n	80016f0 <u8g_com_arm_stm32_ssd_i2c_fn+0xa4>

	case U8G_COM_MSG_WRITE_SEQ:
	case U8G_COM_MSG_WRITE_SEQ_P: {
		HAL_I2C_Mem_Write(&STM32_HAL_I2C_HANDLER, SSD1306_I2C_ADDRESS, control,
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <u8g_com_arm_stm32_ssd_i2c_fn+0xb0>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	7abb      	ldrb	r3, [r7, #10]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80016dc:	9102      	str	r1, [sp, #8]
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2301      	movs	r3, #1
 80016e6:	2178      	movs	r1, #120	; 0x78
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <u8g_com_arm_stm32_ssd_i2c_fn+0xb4>)
 80016ea:	f001 f8bb 	bl	8002864 <HAL_I2C_Mem_Write>
				1, arg_ptr, arg_val, STM32_HAL_I2C_TIMEOUT);
	}

		break;
 80016ee:	bf00      	nop
	}
	return 1;
 80016f0:	2301      	movs	r3, #1
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000014c 	.word	0x2000014c
 8001700:	200000d8 	.word	0x200000d8

08001704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800172a:	f7ff ff2f 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f006 fad3 	bl	8007cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001732:	f7ff fb13 	bl	8000d5c <main>
  bx lr
 8001736:	4770      	bx	lr
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001740:	08009644 	.word	0x08009644
  ldr r2, =_sbss
 8001744:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001748:	20001bf8 	.word	0x20001bf8

0800174c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC1_2_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x28>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x28>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 fd83 	bl	800226c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	200f      	movs	r0, #15
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fdec 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40022000 	.word	0x40022000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fd8d 	bl	80022ba <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 fd63 	bl	8002282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_IncTick+0x1c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x20>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_IncTick+0x20>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000008 	.word	0x20000008
 80017fc:	2000015c 	.word	0x2000015c

08001800 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <HAL_GetTick+0x10>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	2000015c 	.word	0x2000015c

08001814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800181c:	f7ff fff0 	bl	8001800 <HAL_GetTick>
 8001820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d005      	beq.n	800183a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_Delay+0x44>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183a:	bf00      	nop
 800183c:	f7ff ffe0 	bl	8001800 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	429a      	cmp	r2, r3
 800184a:	d8f7      	bhi.n	800183c <HAL_Delay+0x28>
  {
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0be      	b.n	80019fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fd8c 	bl	80013b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fbf1 	bl	8002088 <ADC_ConversionStop_Disable>
 80018a6:	4603      	mov	r3, r0
 80018a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 8099 	bne.w	80019ea <HAL_ADC_Init+0x18e>
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 8095 	bne.w	80019ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018c8:	f023 0302 	bic.w	r3, r3, #2
 80018cc:	f043 0202 	orr.w	r2, r3, #2
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7b1b      	ldrb	r3, [r3, #12]
 80018e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f4:	d003      	beq.n	80018fe <HAL_ADC_Init+0xa2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d102      	bne.n	8001904 <HAL_ADC_Init+0xa8>
 80018fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001902:	e000      	b.n	8001906 <HAL_ADC_Init+0xaa>
 8001904:	2300      	movs	r3, #0
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7d1b      	ldrb	r3, [r3, #20]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d119      	bne.n	8001948 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7b1b      	ldrb	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	3b01      	subs	r3, #1
 8001922:	035a      	lsls	r2, r3, #13
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	e00b      	b.n	8001948 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	f043 0220 	orr.w	r2, r3, #32
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <HAL_ADC_Init+0x1a8>)
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	430b      	orrs	r3, r1
 800196e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001978:	d003      	beq.n	8001982 <HAL_ADC_Init+0x126>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d104      	bne.n	800198c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	3b01      	subs	r3, #1
 8001988:	051b      	lsls	r3, r3, #20
 800198a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	430a      	orrs	r2, r1
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_ADC_Init+0x1ac>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10b      	bne.n	80019c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	f043 0201 	orr.w	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019c6:	e018      	b.n	80019fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	f023 0312 	bic.w	r3, r3, #18
 80019d0:	f043 0210 	orr.w	r2, r3, #16
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019e8:	e007      	b.n	80019fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f043 0210 	orr.w	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	ffe1f7fd 	.word	0xffe1f7fd
 8001a08:	ff1f0efe 	.word	0xff1f0efe

08001a0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Start+0x1a>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e098      	b.n	8001b58 <HAL_ADC_Start+0x14c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fad0 	bl	8001fd4 <ADC_Enable>
 8001a34:	4603      	mov	r3, r0
 8001a36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f040 8087 	bne.w	8001b4e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a41      	ldr	r2, [pc, #260]	; (8001b60 <HAL_ADC_Start+0x154>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d105      	bne.n	8001a6a <HAL_ADC_Start+0x5e>
 8001a5e:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_ADC_Start+0x158>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d115      	bne.n	8001a96 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d026      	beq.n	8001ad2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a94:	e01d      	b.n	8001ad2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <HAL_ADC_Start+0x158>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d004      	beq.n	8001ab6 <HAL_ADC_Start+0xaa>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2b      	ldr	r2, [pc, #172]	; (8001b60 <HAL_ADC_Start+0x154>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_ADC_Start+0xc6>
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_ADC_Start+0x158>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f023 0206 	bic.w	r2, r3, #6
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0202 	mvn.w	r2, #2
 8001b02:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b12:	d113      	bne.n	8001b3c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b18:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_ADC_Start+0x154>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d105      	bne.n	8001b2a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_ADC_Start+0x158>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	e00c      	b.n	8001b56 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	e003      	b.n	8001b56 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40012800 	.word	0x40012800
 8001b64:	40012400 	.word	0x40012400

08001b68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Stop+0x1a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e01a      	b.n	8001bb8 <HAL_ADC_Stop+0x50>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fa7c 	bl	8002088 <ADC_ConversionStop_Disable>
 8001b90:	4603      	mov	r3, r0
 8001b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bd6:	f7ff fe13 	bl	8001800 <HAL_GetTick>
 8001bda:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0d3      	b.n	8001daa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d131      	bne.n	8001c74 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d12a      	bne.n	8001c74 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c1e:	e021      	b.n	8001c64 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c26:	d01d      	beq.n	8001c64 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x7e>
 8001c2e:	f7ff fde7 	bl	8001800 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d212      	bcs.n	8001c64 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10b      	bne.n	8001c64 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0a2      	b.n	8001daa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0d6      	beq.n	8001c20 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c72:	e070      	b.n	8001d56 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c74:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_ADC_PollForConversion+0x1f4>)
 8001c76:	681c      	ldr	r4, [r3, #0]
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f001 fdd9 	bl	8003830 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6919      	ldr	r1, [r3, #16]
 8001c8a:	4b4b      	ldr	r3, [pc, #300]	; (8001db8 <HAL_ADC_PollForConversion+0x1f8>)
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x104>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <HAL_ADC_PollForConversion+0x1fc>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d111      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x104>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_ADC_PollForConversion+0x200>)
 8001ca8:	400b      	ands	r3, r1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d108      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x100>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68d9      	ldr	r1, [r3, #12]
 8001cb4:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_ADC_PollForConversion+0x204>)
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0x100>
 8001cbc:	2314      	movs	r3, #20
 8001cbe:	e020      	b.n	8001d02 <HAL_ADC_PollForConversion+0x142>
 8001cc0:	2329      	movs	r3, #41	; 0x29
 8001cc2:	e01e      	b.n	8001d02 <HAL_ADC_PollForConversion+0x142>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6919      	ldr	r1, [r3, #16]
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_ADC_PollForConversion+0x200>)
 8001ccc:	400b      	ands	r3, r1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_ADC_PollForConversion+0x120>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <HAL_ADC_PollForConversion+0x204>)
 8001cda:	400b      	ands	r3, r1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <HAL_ADC_PollForConversion+0x13c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6919      	ldr	r1, [r3, #16]
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_ADC_PollForConversion+0x208>)
 8001ce8:	400b      	ands	r3, r1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_ADC_PollForConversion+0x140>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68d9      	ldr	r1, [r3, #12]
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_ADC_PollForConversion+0x208>)
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_PollForConversion+0x140>
 8001cfc:	2354      	movs	r3, #84	; 0x54
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_PollForConversion+0x142>
 8001d00:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d08:	e021      	b.n	8001d4e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d01a      	beq.n	8001d48 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_ADC_PollForConversion+0x168>
 8001d18:	f7ff fd72 	bl	8001800 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d20f      	bcs.n	8001d48 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d90b      	bls.n	8001d48 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e030      	b.n	8001daa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d8d9      	bhi.n	8001d0a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f06f 0212 	mvn.w	r2, #18
 8001d5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d7a:	d115      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d111      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000
 8001db8:	24924924 	.word	0x24924924
 8001dbc:	00924924 	.word	0x00924924
 8001dc0:	12492492 	.word	0x12492492
 8001dc4:	00492492 	.word	0x00492492
 8001dc8:	00249249 	.word	0x00249249

08001dcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x20>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e0dc      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x1da>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d81c      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b05      	subs	r3, #5
 8001e26:	221f      	movs	r2, #31
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4019      	ands	r1, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3b05      	subs	r3, #5
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4c:	e03c      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d81c      	bhi.n	8001e90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	; 0x23
 8001e68:	221f      	movs	r2, #31
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	4019      	ands	r1, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b23      	subs	r3, #35	; 0x23
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8e:	e01b      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3b41      	subs	r3, #65	; 0x41
 8001ea2:	221f      	movs	r2, #31
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4019      	ands	r1, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	; 0x41
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d91c      	bls.n	8001f0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b1e      	subs	r3, #30
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4019      	ands	r1, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6898      	ldr	r0, [r3, #8]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b1e      	subs	r3, #30
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	e019      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6919      	ldr	r1, [r3, #16]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6898      	ldr	r0, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	fa00 f203 	lsl.w	r2, r0, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d003      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f4a:	2b11      	cmp	r3, #17
 8001f4c:	d132      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d125      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d126      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_ADC_ConfigChannel+0x1e8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x1b2>
 8001fa2:	e007      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40012400 	.word	0x40012400
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d040      	beq.n	8002074 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <ADC_Enable+0xac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <ADC_Enable+0xb0>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	0c9b      	lsrs	r3, r3, #18
 800200e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002010:	e002      	b.n	8002018 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800201e:	f7ff fbef 	bl	8001800 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002024:	e01f      	b.n	8002066 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002026:	f7ff fbeb 	bl	8001800 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d918      	bls.n	8002066 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d011      	beq.n	8002066 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e007      	b.n	8002076 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d1d8      	bne.n	8002026 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000
 8002084:	431bde83 	.word	0x431bde83

08002088 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d12e      	bne.n	8002100 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020b2:	f7ff fba5 	bl	8001800 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020b8:	e01b      	b.n	80020f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020ba:	f7ff fba1 	bl	8001800 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d914      	bls.n	80020f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10d      	bne.n	80020f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e007      	b.n	8002102 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d0dc      	beq.n	80020ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002238:	d301      	bcc.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e00f      	b.n	800225e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <SysTick_Config+0x40>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	210f      	movs	r1, #15
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f7ff ff90 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SysTick_Config+0x40>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <SysTick_Config+0x40>)
 8002258:	2207      	movs	r2, #7
 800225a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff49 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff5e 	bl	8002154 <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff90 	bl	80021c4 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5f 	bl	8002170 <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ffb0 	bl	8002228 <SysTick_Config>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b08b      	sub	sp, #44	; 0x2c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e169      	b.n	80025bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022e8:	2201      	movs	r2, #1
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	429a      	cmp	r2, r3
 8002302:	f040 8158 	bne.w	80025b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4a9a      	ldr	r2, [pc, #616]	; (8002574 <HAL_GPIO_Init+0x2a0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d05e      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 8002310:	4a98      	ldr	r2, [pc, #608]	; (8002574 <HAL_GPIO_Init+0x2a0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d875      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 8002316:	4a98      	ldr	r2, [pc, #608]	; (8002578 <HAL_GPIO_Init+0x2a4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d058      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 800231c:	4a96      	ldr	r2, [pc, #600]	; (8002578 <HAL_GPIO_Init+0x2a4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d86f      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 8002322:	4a96      	ldr	r2, [pc, #600]	; (800257c <HAL_GPIO_Init+0x2a8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d052      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 8002328:	4a94      	ldr	r2, [pc, #592]	; (800257c <HAL_GPIO_Init+0x2a8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d869      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 800232e:	4a94      	ldr	r2, [pc, #592]	; (8002580 <HAL_GPIO_Init+0x2ac>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d04c      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 8002334:	4a92      	ldr	r2, [pc, #584]	; (8002580 <HAL_GPIO_Init+0x2ac>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d863      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 800233a:	4a92      	ldr	r2, [pc, #584]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d046      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
 8002340:	4a90      	ldr	r2, [pc, #576]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d85d      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 8002346:	2b12      	cmp	r3, #18
 8002348:	d82a      	bhi.n	80023a0 <HAL_GPIO_Init+0xcc>
 800234a:	2b12      	cmp	r3, #18
 800234c:	d859      	bhi.n	8002402 <HAL_GPIO_Init+0x12e>
 800234e:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <HAL_GPIO_Init+0x80>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	080023cf 	.word	0x080023cf
 8002358:	080023a9 	.word	0x080023a9
 800235c:	080023bb 	.word	0x080023bb
 8002360:	080023fd 	.word	0x080023fd
 8002364:	08002403 	.word	0x08002403
 8002368:	08002403 	.word	0x08002403
 800236c:	08002403 	.word	0x08002403
 8002370:	08002403 	.word	0x08002403
 8002374:	08002403 	.word	0x08002403
 8002378:	08002403 	.word	0x08002403
 800237c:	08002403 	.word	0x08002403
 8002380:	08002403 	.word	0x08002403
 8002384:	08002403 	.word	0x08002403
 8002388:	08002403 	.word	0x08002403
 800238c:	08002403 	.word	0x08002403
 8002390:	08002403 	.word	0x08002403
 8002394:	08002403 	.word	0x08002403
 8002398:	080023b1 	.word	0x080023b1
 800239c:	080023c5 	.word	0x080023c5
 80023a0:	4a79      	ldr	r2, [pc, #484]	; (8002588 <HAL_GPIO_Init+0x2b4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023a6:	e02c      	b.n	8002402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e029      	b.n	8002404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	3304      	adds	r3, #4
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e024      	b.n	8002404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	3308      	adds	r3, #8
 80023c0:	623b      	str	r3, [r7, #32]
          break;
 80023c2:	e01f      	b.n	8002404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	330c      	adds	r3, #12
 80023ca:	623b      	str	r3, [r7, #32]
          break;
 80023cc:	e01a      	b.n	8002404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023d6:	2304      	movs	r3, #4
 80023d8:	623b      	str	r3, [r7, #32]
          break;
 80023da:	e013      	b.n	8002404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e4:	2308      	movs	r3, #8
 80023e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	611a      	str	r2, [r3, #16]
          break;
 80023ee:	e009      	b.n	8002404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f0:	2308      	movs	r3, #8
 80023f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	615a      	str	r2, [r3, #20]
          break;
 80023fa:	e003      	b.n	8002404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
          break;
 8002400:	e000      	b.n	8002404 <HAL_GPIO_Init+0x130>
          break;
 8002402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2bff      	cmp	r3, #255	; 0xff
 8002408:	d801      	bhi.n	800240e <HAL_GPIO_Init+0x13a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	e001      	b.n	8002412 <HAL_GPIO_Init+0x13e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d802      	bhi.n	8002420 <HAL_GPIO_Init+0x14c>
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	e002      	b.n	8002426 <HAL_GPIO_Init+0x152>
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3b08      	subs	r3, #8
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	210f      	movs	r1, #15
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	401a      	ands	r2, r3
 8002438:	6a39      	ldr	r1, [r7, #32]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	431a      	orrs	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80b1 	beq.w	80025b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002454:	4b4d      	ldr	r3, [pc, #308]	; (800258c <HAL_GPIO_Init+0x2b8>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a4c      	ldr	r2, [pc, #304]	; (800258c <HAL_GPIO_Init+0x2b8>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b4a      	ldr	r3, [pc, #296]	; (800258c <HAL_GPIO_Init+0x2b8>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800246c:	4a48      	ldr	r2, [pc, #288]	; (8002590 <HAL_GPIO_Init+0x2bc>)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	220f      	movs	r2, #15
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a40      	ldr	r2, [pc, #256]	; (8002594 <HAL_GPIO_Init+0x2c0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d013      	beq.n	80024c0 <HAL_GPIO_Init+0x1ec>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_GPIO_Init+0x2c4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00d      	beq.n	80024bc <HAL_GPIO_Init+0x1e8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a3e      	ldr	r2, [pc, #248]	; (800259c <HAL_GPIO_Init+0x2c8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x1e4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3d      	ldr	r2, [pc, #244]	; (80025a0 <HAL_GPIO_Init+0x2cc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_GPIO_Init+0x1e0>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e006      	b.n	80024c2 <HAL_GPIO_Init+0x1ee>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e004      	b.n	80024c2 <HAL_GPIO_Init+0x1ee>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e002      	b.n	80024c2 <HAL_GPIO_Init+0x1ee>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <HAL_GPIO_Init+0x1ee>
 80024c0:	2300      	movs	r3, #0
 80024c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c4:	f002 0203 	and.w	r2, r2, #3
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	4093      	lsls	r3, r2
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024d2:	492f      	ldr	r1, [pc, #188]	; (8002590 <HAL_GPIO_Init+0x2bc>)
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024ec:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	492c      	ldr	r1, [pc, #176]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	4928      	ldr	r1, [pc, #160]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002504:	4013      	ands	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4922      	ldr	r1, [pc, #136]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	43db      	mvns	r3, r3
 800252a:	491e      	ldr	r1, [pc, #120]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 800252c:	4013      	ands	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	4918      	ldr	r1, [pc, #96]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	43db      	mvns	r3, r3
 8002552:	4914      	ldr	r1, [pc, #80]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002554:	4013      	ands	r3, r2
 8002556:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d021      	beq.n	80025a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	490e      	ldr	r1, [pc, #56]	; (80025a4 <HAL_GPIO_Init+0x2d0>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	60cb      	str	r3, [r1, #12]
 8002570:	e021      	b.n	80025b6 <HAL_GPIO_Init+0x2e2>
 8002572:	bf00      	nop
 8002574:	10320000 	.word	0x10320000
 8002578:	10310000 	.word	0x10310000
 800257c:	10220000 	.word	0x10220000
 8002580:	10210000 	.word	0x10210000
 8002584:	10120000 	.word	0x10120000
 8002588:	10110000 	.word	0x10110000
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	40010800 	.word	0x40010800
 8002598:	40010c00 	.word	0x40010c00
 800259c:	40011000 	.word	0x40011000
 80025a0:	40011400 	.word	0x40011400
 80025a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_GPIO_Init+0x304>)
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4909      	ldr	r1, [pc, #36]	; (80025d8 <HAL_GPIO_Init+0x304>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	3301      	adds	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f47f ae8e 	bne.w	80022e8 <HAL_GPIO_Init+0x14>
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	372c      	adds	r7, #44	; 0x2c
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40010400 	.word	0x40010400

080025dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e12b      	b.n	8002846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe ff2c 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800262e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800263e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002640:	f000 fffa 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8002644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a81      	ldr	r2, [pc, #516]	; (8002850 <HAL_I2C_Init+0x274>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d807      	bhi.n	8002660 <HAL_I2C_Init+0x84>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a80      	ldr	r2, [pc, #512]	; (8002854 <HAL_I2C_Init+0x278>)
 8002654:	4293      	cmp	r3, r2
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e006      	b.n	800266e <HAL_I2C_Init+0x92>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a7d      	ldr	r2, [pc, #500]	; (8002858 <HAL_I2C_Init+0x27c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	bf94      	ite	ls
 8002668:	2301      	movls	r3, #1
 800266a:	2300      	movhi	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0e7      	b.n	8002846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a78      	ldr	r2, [pc, #480]	; (800285c <HAL_I2C_Init+0x280>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0c9b      	lsrs	r3, r3, #18
 8002680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a6a      	ldr	r2, [pc, #424]	; (8002850 <HAL_I2C_Init+0x274>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d802      	bhi.n	80026b0 <HAL_I2C_Init+0xd4>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3301      	adds	r3, #1
 80026ae:	e009      	b.n	80026c4 <HAL_I2C_Init+0xe8>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	4a69      	ldr	r2, [pc, #420]	; (8002860 <HAL_I2C_Init+0x284>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	3301      	adds	r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	495c      	ldr	r1, [pc, #368]	; (8002850 <HAL_I2C_Init+0x274>)
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d819      	bhi.n	8002718 <HAL_I2C_Init+0x13c>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1e59      	subs	r1, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f2:	1c59      	adds	r1, r3, #1
 80026f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026f8:	400b      	ands	r3, r1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_I2C_Init+0x138>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e59      	subs	r1, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fbb1 f3f3 	udiv	r3, r1, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002712:	e051      	b.n	80027b8 <HAL_I2C_Init+0x1dc>
 8002714:	2304      	movs	r3, #4
 8002716:	e04f      	b.n	80027b8 <HAL_I2C_Init+0x1dc>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d111      	bne.n	8002744 <HAL_I2C_Init+0x168>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e012      	b.n	800276a <HAL_I2C_Init+0x18e>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	0099      	lsls	r1, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	fbb0 f3f3 	udiv	r3, r0, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Init+0x196>
 800276e:	2301      	movs	r3, #1
 8002770:	e022      	b.n	80027b8 <HAL_I2C_Init+0x1dc>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10e      	bne.n	8002798 <HAL_I2C_Init+0x1bc>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1e58      	subs	r0, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	440b      	add	r3, r1
 8002788:	fbb0 f3f3 	udiv	r3, r0, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002796:	e00f      	b.n	80027b8 <HAL_I2C_Init+0x1dc>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	0099      	lsls	r1, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	6809      	ldr	r1, [r1, #0]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69da      	ldr	r2, [r3, #28]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6911      	ldr	r1, [r2, #16]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68d2      	ldr	r2, [r2, #12]
 80027f2:	4311      	orrs	r1, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	000186a0 	.word	0x000186a0
 8002854:	001e847f 	.word	0x001e847f
 8002858:	003d08ff 	.word	0x003d08ff
 800285c:	431bde83 	.word	0x431bde83
 8002860:	10624dd3 	.word	0x10624dd3

08002864 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	4608      	mov	r0, r1
 800286e:	4611      	mov	r1, r2
 8002870:	461a      	mov	r2, r3
 8002872:	4603      	mov	r3, r0
 8002874:	817b      	strh	r3, [r7, #10]
 8002876:	460b      	mov	r3, r1
 8002878:	813b      	strh	r3, [r7, #8]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800287e:	f7fe ffbf 	bl	8001800 <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	f040 80d9 	bne.w	8002a44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2319      	movs	r3, #25
 8002898:	2201      	movs	r2, #1
 800289a:	496d      	ldr	r1, [pc, #436]	; (8002a50 <HAL_I2C_Mem_Write+0x1ec>)
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f971 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
 80028aa:	e0cc      	b.n	8002a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_I2C_Mem_Write+0x56>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e0c5      	b.n	8002a46 <HAL_I2C_Mem_Write+0x1e2>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d007      	beq.n	80028e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2221      	movs	r2, #33	; 0x21
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a4d      	ldr	r2, [pc, #308]	; (8002a54 <HAL_I2C_Mem_Write+0x1f0>)
 8002920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002922:	88f8      	ldrh	r0, [r7, #6]
 8002924:	893a      	ldrh	r2, [r7, #8]
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4603      	mov	r3, r0
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f890 	bl	8002a58 <I2C_RequestMemoryWrite>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d052      	beq.n	80029e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e081      	b.n	8002a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f9f2 	bl	8002d30 <I2C_WaitOnTXEFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b04      	cmp	r3, #4
 8002958:	d107      	bne.n	800296a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06b      	b.n	8002a46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d11b      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x180>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d017      	beq.n	80029e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1aa      	bne.n	8002942 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f9de 	bl	8002db2 <I2C_WaitOnBTFFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d107      	bne.n	8002a14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e016      	b.n	8002a46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	00100002 	.word	0x00100002
 8002a54:	ffff0000 	.word	0xffff0000

08002a58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	813b      	strh	r3, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f878 	bl	8002b84 <I2C_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa8:	d103      	bne.n	8002ab2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e05f      	b.n	8002b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ac4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	492d      	ldr	r1, [pc, #180]	; (8002b80 <I2C_RequestMemoryWrite+0x128>)
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f8b0 	bl	8002c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e04c      	b.n	8002b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	6a39      	ldr	r1, [r7, #32]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f91a 	bl	8002d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d107      	bne.n	8002b1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e02b      	b.n	8002b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b24:	893b      	ldrh	r3, [r7, #8]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	e021      	b.n	8002b74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b30:	893b      	ldrh	r3, [r7, #8]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	6a39      	ldr	r1, [r7, #32]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f8f4 	bl	8002d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d107      	bne.n	8002b66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e005      	b.n	8002b76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6a:	893b      	ldrh	r3, [r7, #8]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	00010002 	.word	0x00010002

08002b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b94:	e025      	b.n	8002be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d021      	beq.n	8002be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7fe fe2f 	bl	8001800 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d116      	bne.n	8002be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e023      	b.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10d      	bne.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf0c      	ite	eq
 8002bfe:	2301      	moveq	r3, #1
 8002c00:	2300      	movne	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	e00c      	b.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d0b6      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c40:	e051      	b.n	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d123      	bne.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e046      	b.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d021      	beq.n	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7fe fdad 	bl	8001800 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d116      	bne.n	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f043 0220 	orr.w	r2, r3, #32
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e020      	b.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10c      	bne.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e00b      	b.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	43da      	mvns	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4013      	ands	r3, r2
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d18d      	bne.n	8002c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d3c:	e02d      	b.n	8002d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f878 	bl	8002e34 <I2C_IsAcknowledgeFailed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e02d      	b.n	8002daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d021      	beq.n	8002d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe fd53 	bl	8001800 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d116      	bne.n	8002d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f043 0220 	orr.w	r2, r3, #32
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e007      	b.n	8002daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d1ca      	bne.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbe:	e02d      	b.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f837 	bl	8002e34 <I2C_IsAcknowledgeFailed>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e02d      	b.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d021      	beq.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd8:	f7fe fd12 	bl	8001800 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d302      	bcc.n	8002dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d116      	bne.n	8002e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e007      	b.n	8002e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d1ca      	bne.n	8002dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4a:	d11b      	bne.n	8002e84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e272      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8087 	beq.w	8002fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb0:	4b92      	ldr	r3, [pc, #584]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d00c      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ebc:	4b8f      	ldr	r3, [pc, #572]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d112      	bne.n	8002eee <HAL_RCC_OscConfig+0x5e>
 8002ec8:	4b8c      	ldr	r3, [pc, #560]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d10b      	bne.n	8002eee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed6:	4b89      	ldr	r3, [pc, #548]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d06c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x12c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d168      	bne.n	8002fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e24c      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x76>
 8002ef8:	4b80      	ldr	r3, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a7f      	ldr	r2, [pc, #508]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	e02e      	b.n	8002f64 <HAL_RCC_OscConfig+0xd4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x98>
 8002f0e:	4b7b      	ldr	r3, [pc, #492]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7a      	ldr	r2, [pc, #488]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b78      	ldr	r3, [pc, #480]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a77      	ldr	r2, [pc, #476]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e01d      	b.n	8002f64 <HAL_RCC_OscConfig+0xd4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0xbc>
 8002f32:	4b72      	ldr	r3, [pc, #456]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a71      	ldr	r2, [pc, #452]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b6f      	ldr	r3, [pc, #444]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6e      	ldr	r2, [pc, #440]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xd4>
 8002f4c:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b68      	ldr	r3, [pc, #416]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a67      	ldr	r2, [pc, #412]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fc48 	bl	8001800 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fc44 	bl	8001800 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e200      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xe4>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fc34 	bl	8001800 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fc30 	bl	8001800 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1ec      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x10c>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fd6:	4b49      	ldr	r3, [pc, #292]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x18c>
 8002fe2:	4b46      	ldr	r3, [pc, #280]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x176>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1c0      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4939      	ldr	r1, [pc, #228]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e03a      	b.n	8003092 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b36      	ldr	r3, [pc, #216]	; (8003100 <HAL_RCC_OscConfig+0x270>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe fbe9 	bl	8001800 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe fbe5 	bl	8001800 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1a1      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4927      	ldr	r1, [pc, #156]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HAL_RCC_OscConfig+0x270>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe fbc8 	bl	8001800 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe fbc4 	bl	8001800 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e180      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d03a      	beq.n	8003114 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d019      	beq.n	80030da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_RCC_OscConfig+0x274>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ac:	f7fe fba8 	bl	8001800 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b4:	f7fe fba4 	bl	8001800 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e160      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <HAL_RCC_OscConfig+0x26c>)
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f000 fad8 	bl	8003688 <RCC_Delay>
 80030d8:	e01c      	b.n	8003114 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_OscConfig+0x274>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e0:	f7fe fb8e 	bl	8001800 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e6:	e00f      	b.n	8003108 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e8:	f7fe fb8a 	bl	8001800 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d908      	bls.n	8003108 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e146      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	42420000 	.word	0x42420000
 8003104:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	4b92      	ldr	r3, [pc, #584]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e9      	bne.n	80030e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80a6 	beq.w	800326e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003126:	4b8b      	ldr	r3, [pc, #556]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4a87      	ldr	r2, [pc, #540]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	61d3      	str	r3, [r2, #28]
 800313e:	4b85      	ldr	r3, [pc, #532]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b82      	ldr	r3, [pc, #520]	; (8003358 <HAL_RCC_OscConfig+0x4c8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d118      	bne.n	800318c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <HAL_RCC_OscConfig+0x4c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7e      	ldr	r2, [pc, #504]	; (8003358 <HAL_RCC_OscConfig+0x4c8>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7fe fb4b 	bl	8001800 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7fe fb47 	bl	8001800 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b64      	cmp	r3, #100	; 0x64
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e103      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	4b75      	ldr	r3, [pc, #468]	; (8003358 <HAL_RCC_OscConfig+0x4c8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x312>
 8003194:	4b6f      	ldr	r3, [pc, #444]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a6e      	ldr	r2, [pc, #440]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6213      	str	r3, [r2, #32]
 80031a0:	e02d      	b.n	80031fe <HAL_RCC_OscConfig+0x36e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x334>
 80031aa:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	6213      	str	r3, [r2, #32]
 80031b6:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a66      	ldr	r2, [pc, #408]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 0304 	bic.w	r3, r3, #4
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	e01c      	b.n	80031fe <HAL_RCC_OscConfig+0x36e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d10c      	bne.n	80031e6 <HAL_RCC_OscConfig+0x356>
 80031cc:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	4a60      	ldr	r2, [pc, #384]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	f043 0304 	orr.w	r3, r3, #4
 80031d6:	6213      	str	r3, [r2, #32]
 80031d8:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	e00b      	b.n	80031fe <HAL_RCC_OscConfig+0x36e>
 80031e6:	4b5b      	ldr	r3, [pc, #364]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	4a5a      	ldr	r2, [pc, #360]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	6213      	str	r3, [r2, #32]
 80031f2:	4b58      	ldr	r3, [pc, #352]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a57      	ldr	r2, [pc, #348]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d015      	beq.n	8003232 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fe fafb 	bl	8001800 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe faf7 	bl	8001800 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0b1      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ee      	beq.n	800320e <HAL_RCC_OscConfig+0x37e>
 8003230:	e014      	b.n	800325c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fe fae5 	bl	8001800 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fe fae1 	bl	8001800 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e09b      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1ee      	bne.n	800323a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d105      	bne.n	800326e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003262:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	4a3b      	ldr	r2, [pc, #236]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8087 	beq.w	8003386 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d061      	beq.n	8003348 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d146      	bne.n	800331a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328c:	4b33      	ldr	r3, [pc, #204]	; (800335c <HAL_RCC_OscConfig+0x4cc>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fab5 	bl	8001800 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329a:	f7fe fab1 	bl	8001800 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e06d      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d108      	bne.n	80032d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	4921      	ldr	r1, [pc, #132]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d4:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a19      	ldr	r1, [r3, #32]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	430b      	orrs	r3, r1
 80032e6:	491b      	ldr	r1, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x4cc>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fa85 	bl	8001800 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe fa81 	bl	8001800 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e03d      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x46a>
 8003318:	e035      	b.n	8003386 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_RCC_OscConfig+0x4cc>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe fa6e 	bl	8001800 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe fa6a 	bl	8001800 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e026      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x498>
 8003346:	e01e      	b.n	8003386 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d107      	bne.n	8003360 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e019      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
 800335c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_OscConfig+0x500>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	429a      	cmp	r2, r3
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000

08003394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0d0      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d910      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b67      	ldr	r3, [pc, #412]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 0207 	bic.w	r2, r3, #7
 80033be:	4965      	ldr	r1, [pc, #404]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b8      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003412:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003414:	4b50      	ldr	r3, [pc, #320]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	494d      	ldr	r1, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d040      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d115      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07f      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e073      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003462:	4b3d      	ldr	r3, [pc, #244]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06b      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003472:	4b39      	ldr	r3, [pc, #228]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f023 0203 	bic.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4936      	ldr	r1, [pc, #216]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003484:	f7fe f9bc 	bl	8001800 <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348c:	f7fe f9b8 	bl	8001800 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e053      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 020c 	and.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1eb      	bne.n	800348c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d210      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0207 	bic.w	r2, r3, #7
 80034ca:	4922      	ldr	r1, [pc, #136]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e032      	b.n	800354a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4916      	ldr	r1, [pc, #88]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003522:	f000 f821 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490a      	ldr	r1, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1cc>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1d0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe f91a 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40022000 	.word	0x40022000
 8003558:	40021000 	.word	0x40021000
 800355c:	0800882c 	.word	0x0800882c
 8003560:	20000000 	.word	0x20000000
 8003564:	20000004 	.word	0x20000004

08003568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	b490      	push	{r4, r7}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCC_GetSysClockFreq+0xac>)
 8003570:	1d3c      	adds	r4, r7, #4
 8003572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003578:	f240 2301 	movw	r3, #513	; 0x201
 800357c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003592:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x40>
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x46>
 80035a6:	e02b      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a8:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035aa:	623b      	str	r3, [r7, #32]
      break;
 80035ac:	e02b      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	0c9b      	lsrs	r3, r3, #18
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	3328      	adds	r3, #40	; 0x28
 80035b8:	443b      	add	r3, r7
 80035ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d012      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	0c5b      	lsrs	r3, r3, #17
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	3328      	adds	r3, #40	; 0x28
 80035d6:	443b      	add	r3, r7
 80035d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	4a0e      	ldr	r2, [pc, #56]	; (800361c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e2:	fb03 f202 	mul.w	r2, r3, r2
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	e004      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	623b      	str	r3, [r7, #32]
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003602:	623b      	str	r3, [r7, #32]
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	6a3b      	ldr	r3, [r7, #32]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc90      	pop	{r4, r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	08008770 	.word	0x08008770
 8003618:	40021000 	.word	0x40021000
 800361c:	007a1200 	.word	0x007a1200
 8003620:	003d0900 	.word	0x003d0900

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b02      	ldr	r3, [pc, #8]	; (8003634 <HAL_RCC_GetHCLKFreq+0x10>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	20000000 	.word	0x20000000

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800363c:	f7ff fff2 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	0800883c 	.word	0x0800883c

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003664:	f7ff ffde 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	0adb      	lsrs	r3, r3, #11
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	0800883c 	.word	0x0800883c

08003688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <RCC_Delay+0x34>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <RCC_Delay+0x38>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0a5b      	lsrs	r3, r3, #9
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036a4:	bf00      	nop
  }
  while (Delay --);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1e5a      	subs	r2, r3, #1
 80036aa:	60fa      	str	r2, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f9      	bne.n	80036a4 <RCC_Delay+0x1c>
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	20000000 	.word	0x20000000
 80036c0:	10624dd3 	.word	0x10624dd3

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d07d      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036e0:	2300      	movs	r3, #0
 80036e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e4:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	4a4b      	ldr	r2, [pc, #300]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fa:	61d3      	str	r3, [r2, #28]
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003708:	2301      	movs	r3, #1
 800370a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370c:	4b46      	ldr	r3, [pc, #280]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003714:	2b00      	cmp	r3, #0
 8003716:	d118      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003718:	4b43      	ldr	r3, [pc, #268]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a42      	ldr	r2, [pc, #264]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003724:	f7fe f86c 	bl	8001800 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372a:	e008      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372c:	f7fe f868 	bl	8001800 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e06d      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373e:	4b3a      	ldr	r3, [pc, #232]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800374a:	4b36      	ldr	r3, [pc, #216]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02e      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d027      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003768:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003772:	4b2e      	ldr	r3, [pc, #184]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800377e:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d014      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7fe f837 	bl	8001800 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	e00a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fe f833 	bl	8001800 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e036      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ee      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4917      	ldr	r1, [pc, #92]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	490b      	ldr	r1, [pc, #44]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4904      	ldr	r1, [pc, #16]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	42420440 	.word	0x42420440

08003830 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b08d      	sub	sp, #52	; 0x34
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003838:	4b58      	ldr	r3, [pc, #352]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800383a:	f107 040c 	add.w	r4, r7, #12
 800383e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003844:	f240 2301 	movw	r3, #513	; 0x201
 8003848:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	2300      	movs	r3, #0
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	2300      	movs	r3, #0
 8003854:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	2300      	movs	r3, #0
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b10      	cmp	r3, #16
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b10      	cmp	r3, #16
 8003868:	f200 808e 	bhi.w	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d049      	beq.n	8003906 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d079      	beq.n	800396c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003878:	e086      	b.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003880:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d07f      	beq.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	3330      	adds	r3, #48	; 0x30
 8003896:	443b      	add	r3, r7
 8003898:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800389c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038a8:	4b3d      	ldr	r3, [pc, #244]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0c5b      	lsrs	r3, r3, #17
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	3330      	adds	r3, #48	; 0x30
 80038b4:	443b      	add	r3, r7
 80038b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00d      	beq.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80038c6:	4a37      	ldr	r2, [pc, #220]	; (80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	fb02 f303 	mul.w	r3, r2, r3
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d6:	e004      	b.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038e2:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ee:	d102      	bne.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038f4:	e04a      	b.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003904:	e042      	b.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003916:	d108      	bne.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
 8003928:	e01f      	b.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003934:	d109      	bne.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003942:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
 8003948:	e00f      	b.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003954:	d11c      	bne.n	8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003962:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003968:	e012      	b.n	8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800396a:	e011      	b.n	8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800396c:	f7ff fe78 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	0b9b      	lsrs	r3, r3, #14
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	3301      	adds	r3, #1
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003988:	bf00      	nop
 800398a:	e002      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003990:	bf00      	nop
    }
  }
  return (frequency);
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003994:	4618      	mov	r0, r3
 8003996:	3734      	adds	r7, #52	; 0x34
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}
 800399c:	08008780 	.word	0x08008780
 80039a0:	40021000 	.word	0x40021000
 80039a4:	007a1200 	.word	0x007a1200
 80039a8:	003d0900 	.word	0x003d0900
 80039ac:	aaaaaaab 	.word	0xaaaaaaab

080039b0 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 80039b0:	b490      	push	{r4, r7}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	70fb      	strb	r3, [r7, #3]
 80039c2:	460b      	mov	r3, r1
 80039c4:	70bb      	strb	r3, [r7, #2]
 80039c6:	4613      	mov	r3, r2
 80039c8:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 80039ca:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 80039cc:	7e3b      	ldrb	r3, [r7, #24]
 80039ce:	4423      	add	r3, r4
 80039d0:	b2dc      	uxtb	r4, r3
  tmp--;
 80039d2:	4623      	mov	r3, r4
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80039e4:	73fa      	strb	r2, [r7, #15]
 80039e6:	73bb      	strb	r3, [r7, #14]
 80039e8:	78bb      	ldrb	r3, [r7, #2]
 80039ea:	737b      	strb	r3, [r7, #13]
 80039ec:	4623      	mov	r3, r4
 80039ee:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 80039f0:	7bba      	ldrb	r2, [r7, #14]
 80039f2:	7b7b      	ldrb	r3, [r7, #13]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d30d      	bcc.n	8003a14 <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	7b3b      	ldrb	r3, [r7, #12]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d801      	bhi.n	8003a04 <u8g_IsBBXIntersection+0x54>
      return 1;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e014      	b.n	8003a2e <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 8003a04:	7b7a      	ldrb	r2, [r7, #13]
 8003a06:	7b3b      	ldrb	r3, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d901      	bls.n	8003a10 <u8g_IsBBXIntersection+0x60>
	return 1;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e00e      	b.n	8003a2e <u8g_IsBBXIntersection+0x7e>
	return 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e00c      	b.n	8003a2e <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	7b3b      	ldrb	r3, [r7, #12]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d807      	bhi.n	8003a2c <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 8003a1c:	7b7a      	ldrb	r2, [r7, #13]
 8003a1e:	7b3b      	ldrb	r3, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d901      	bls.n	8003a28 <u8g_IsBBXIntersection+0x78>
	return 1;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e002      	b.n	8003a2e <u8g_IsBBXIntersection+0x7e>
	return 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <u8g_IsBBXIntersection+0x7e>
      return 0;
 8003a2c:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <u8g_IsBBXIntersection+0x86>
    return 0; 
 8003a32:	2300      	movs	r3, #0
 8003a34:	e032      	b.n	8003a9c <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 8003a36:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 8003a38:	787b      	ldrb	r3, [r7, #1]
 8003a3a:	4423      	add	r3, r4
 8003a3c:	b2dc      	uxtb	r4, r3
  tmp--;
 8003a3e:	4623      	mov	r3, r4
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a50:	72fa      	strb	r2, [r7, #11]
 8003a52:	72bb      	strb	r3, [r7, #10]
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	727b      	strb	r3, [r7, #9]
 8003a58:	4623      	mov	r3, r4
 8003a5a:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 8003a5c:	7aba      	ldrb	r2, [r7, #10]
 8003a5e:	7a7b      	ldrb	r3, [r7, #9]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d30d      	bcc.n	8003a80 <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 8003a64:	7afa      	ldrb	r2, [r7, #11]
 8003a66:	7a3b      	ldrb	r3, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d801      	bhi.n	8003a70 <u8g_IsBBXIntersection+0xc0>
      return 1;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e014      	b.n	8003a9a <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 8003a70:	7a7a      	ldrb	r2, [r7, #9]
 8003a72:	7a3b      	ldrb	r3, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d901      	bls.n	8003a7c <u8g_IsBBXIntersection+0xcc>
	return 1;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e00e      	b.n	8003a9a <u8g_IsBBXIntersection+0xea>
	return 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e00c      	b.n	8003a9a <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 8003a80:	7afa      	ldrb	r2, [r7, #11]
 8003a82:	7a3b      	ldrb	r3, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d807      	bhi.n	8003a98 <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 8003a88:	7a7a      	ldrb	r2, [r7, #9]
 8003a8a:	7a3b      	ldrb	r3, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d901      	bls.n	8003a94 <u8g_IsBBXIntersection+0xe4>
	return 1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e002      	b.n	8003a9a <u8g_IsBBXIntersection+0xea>
	return 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <u8g_IsBBXIntersection+0xea>
      return 0;
 8003a98:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8003a9a:	bf00      	nop
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc90      	pop	{r4, r7}
 8003aa4:	4770      	bx	lr

08003aa6 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8003aa6:	b590      	push	{r4, r7, lr}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689c      	ldr	r4, [r3, #8]
 8003ab8:	79fa      	ldrb	r2, [r7, #7]
 8003aba:	2300      	movs	r3, #0
 8003abc:	2101      	movs	r1, #1
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	47a0      	blx	r4
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}

08003acc <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	689c      	ldr	r4, [r3, #8]
 8003ade:	79fa      	ldrb	r2, [r7, #7]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	47a0      	blx	r4
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}

08003af0 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689c      	ldr	r4, [r3, #8]
 8003afe:	2300      	movs	r3, #0
 8003b00:	2200      	movs	r2, #0
 8003b02:	2104      	movs	r1, #4
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	47a0      	blx	r4
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689c      	ldr	r4, [r3, #8]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2201      	movs	r2, #1
 8003b22:	2104      	movs	r1, #4
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	47a0      	blx	r4
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd90      	pop	{r4, r7, pc}

08003b30 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	689c      	ldr	r4, [r3, #8]
 8003b42:	79fa      	ldrb	r2, [r7, #7]
 8003b44:	2300      	movs	r3, #0
 8003b46:	2102      	movs	r1, #2
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	47a0      	blx	r4
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd90      	pop	{r4, r7, pc}

08003b54 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	689c      	ldr	r4, [r3, #8]
 8003b66:	79fa      	ldrb	r2, [r7, #7]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2105      	movs	r1, #5
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	47a0      	blx	r4
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}

08003b7a <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8003b7a:	b590      	push	{r4, r7, lr}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	689c      	ldr	r4, [r3, #8]
 8003b8e:	79fa      	ldrb	r2, [r7, #7]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2106      	movs	r1, #6
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	47a0      	blx	r4
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}

08003ba2 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d110      	bne.n	8003be0 <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 8003bbe:	7dbb      	ldrb	r3, [r7, #22]
 8003bc0:	2bff      	cmp	r3, #255	; 0xff
 8003bc2:	d00a      	beq.n	8003bda <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8003bc4:	7dbb      	ldrb	r3, [r7, #22]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff ffc2 	bl	8003b54 <u8g_WriteByte>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d160      	bne.n	8003c98 <u8g_WriteEscSeqP+0xf6>
          return 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e064      	b.n	8003ca4 <u8g_WriteEscSeqP+0x102>
      }
      else
      {
        is_escape = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
 8003bde:	e05b      	b.n	8003c98 <u8g_WriteEscSeqP+0xf6>
      }
    }
    else
    {
      if ( value == 255 )
 8003be0:	7dbb      	ldrb	r3, [r7, #22]
 8003be2:	2bff      	cmp	r3, #255	; 0xff
 8003be4:	d10a      	bne.n	8003bfc <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8003be6:	7dbb      	ldrb	r3, [r7, #22]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff ffb1 	bl	8003b54 <u8g_WriteByte>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d14d      	bne.n	8003c94 <u8g_WriteEscSeqP+0xf2>
          return 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e053      	b.n	8003ca4 <u8g_WriteEscSeqP+0x102>
      }
      else if ( value == 254 )
 8003bfc:	7dbb      	ldrb	r3, [r7, #22]
 8003bfe:	2bfe      	cmp	r3, #254	; 0xfe
 8003c00:	d04e      	beq.n	8003ca0 <u8g_WriteEscSeqP+0xfe>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8003c02:	7dbb      	ldrb	r3, [r7, #22]
 8003c04:	2bef      	cmp	r3, #239	; 0xef
 8003c06:	d845      	bhi.n	8003c94 <u8g_WriteEscSeqP+0xf2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8003c08:	7dbb      	ldrb	r3, [r7, #22]
 8003c0a:	2bdf      	cmp	r3, #223	; 0xdf
 8003c0c:	d909      	bls.n	8003c22 <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8003c0e:	7dbb      	ldrb	r3, [r7, #22]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7ff ff88 	bl	8003b30 <u8g_SetAddress>
 8003c20:	e038      	b.n	8003c94 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xd0 )
 8003c22:	7dbb      	ldrb	r3, [r7, #22]
 8003c24:	2bcf      	cmp	r3, #207	; 0xcf
 8003c26:	d909      	bls.n	8003c3c <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8003c28:	7dbb      	ldrb	r3, [r7, #22]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff ff49 	bl	8003acc <u8g_SetChipSelect>
 8003c3a:	e02b      	b.n	8003c94 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xc0 )
 8003c3c:	7dbb      	ldrb	r3, [r7, #22]
 8003c3e:	2bbf      	cmp	r3, #191	; 0xbf
 8003c40:	d91c      	bls.n	8003c7c <u8g_WriteEscSeqP+0xda>
      {
        u8g_SetResetLow(u8g, dev);
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ff53 	bl	8003af0 <u8g_SetResetLow>
        value &= 0x0f;
 8003c4a:	7dbb      	ldrb	r3, [r7, #22]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 8003c52:	7dbb      	ldrb	r3, [r7, #22]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	75bb      	strb	r3, [r7, #22]
        value+=2;
 8003c58:	7dbb      	ldrb	r3, [r7, #22]
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	75bb      	strb	r3, [r7, #22]
        u8g_Delay(value);
 8003c5e:	7dbb      	ldrb	r3, [r7, #22]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd fc98 	bl	8001598 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff50 	bl	8003b10 <u8g_SetResetHigh>
        u8g_Delay(value);
 8003c70:	7dbb      	ldrb	r3, [r7, #22]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fc8f 	bl	8001598 <u8g_Delay>
 8003c7a:	e00b      	b.n	8003c94 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xbe )
 8003c7c:	7dbb      	ldrb	r3, [r7, #22]
 8003c7e:	2bbd      	cmp	r3, #189	; 0xbd
 8003c80:	d808      	bhi.n	8003c94 <u8g_WriteEscSeqP+0xf2>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8003c82:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	db04      	blt.n	8003c94 <u8g_WriteEscSeqP+0xf2>
      {
        u8g_Delay(value);
 8003c8a:	7dbb      	ldrb	r3, [r7, #22]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd fc82 	bl	8001598 <u8g_Delay>
      }
      is_escape = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 8003c9e:	e788      	b.n	8003bb2 <u8g_WriteEscSeqP+0x10>
        break;
 8003ca0:	bf00      	nop
  }
  return 1;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	72fb      	strb	r3, [r7, #11]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d811      	bhi.n	8003ce8 <u8g_com_null_fn+0x3c>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <u8g_com_null_fn+0x20>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003ce9 	.word	0x08003ce9
 8003cd0:	08003ce9 	.word	0x08003ce9
 8003cd4:	08003ce9 	.word	0x08003ce9
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003ce9 	.word	0x08003ce9
 8003ce0:	08003ce9 	.word	0x08003ce9
 8003ce4:	08003ce9 	.word	0x08003ce9
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 8003ce8:	2301      	movs	r3, #1
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	3b0a      	subs	r3, #10
 8003d08:	2b0b      	cmp	r3, #11
 8003d0a:	d878      	bhi.n	8003dfe <u8g_dev_ssd1306_128x64_fn+0x10a>
 8003d0c:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <u8g_dev_ssd1306_128x64_fn+0x20>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d45 	.word	0x08003d45
 8003d18:	08003dff 	.word	0x08003dff
 8003d1c:	08003dff 	.word	0x08003dff
 8003d20:	08003dff 	.word	0x08003dff
 8003d24:	08003dff 	.word	0x08003dff
 8003d28:	08003dc5 	.word	0x08003dc5
 8003d2c:	08003da9 	.word	0x08003da9
 8003d30:	08003db7 	.word	0x08003db7
 8003d34:	08003dff 	.word	0x08003dff
 8003d38:	08003dff 	.word	0x08003dff
 8003d3c:	08003dff 	.word	0x08003dff
 8003d40:	08003d5b 	.word	0x08003d5b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8003d44:	2202      	movs	r2, #2
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff feac 	bl	8003aa6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 8003d4e:	4a31      	ldr	r2, [pc, #196]	; (8003e14 <u8g_dev_ssd1306_128x64_fn+0x120>)
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff ff25 	bl	8003ba2 <u8g_WriteEscSeqP>
      break;
 8003d58:	e051      	b.n	8003dfe <u8g_dev_ssd1306_128x64_fn+0x10a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8003d60:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <u8g_dev_ssd1306_128x64_fn+0x124>)
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff ff1c 	bl	8003ba2 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	791b      	ldrb	r3, [r3, #4]
 8003d6e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff feeb 	bl	8003b54 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8003d7e:	2201      	movs	r2, #1
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff fed4 	bl	8003b30 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	6978      	ldr	r0, [r7, #20]
 8003d8e:	f000 fe65 	bl	8004a5c <u8g_pb_WriteBuffer>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e037      	b.n	8003e0c <u8g_dev_ssd1306_128x64_fn+0x118>
        u8g_SetChipSelect(u8g, dev, 0);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fe93 	bl	8003acc <u8g_SetChipSelect>
      }
      break;
 8003da6:	e02a      	b.n	8003dfe <u8g_dev_ssd1306_128x64_fn+0x10a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <u8g_dev_ssd1306_128x64_fn+0x128>)
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fef8 	bl	8003ba2 <u8g_WriteEscSeqP>
      return 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e02a      	b.n	8003e0c <u8g_dev_ssd1306_128x64_fn+0x118>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8003db6:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <u8g_dev_ssd1306_128x64_fn+0x12c>)
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff fef1 	bl	8003ba2 <u8g_WriteEscSeqP>
      return 1;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e023      	b.n	8003e0c <u8g_dev_ssd1306_128x64_fn+0x118>
    case U8G_DEV_MSG_CONTRAST:
    {
	u8g_SetChipSelect(u8g, dev, 1);
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff fe7f 	bl	8003acc <u8g_SetChipSelect>
	u8g_SetAddress(u8g, dev, 0); /* instruction mode */
 8003dce:	2200      	movs	r2, #0
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff feac 	bl	8003b30 <u8g_SetAddress>
	u8g_WriteByte(u8g, dev, 0x81);
 8003dd8:	2281      	movs	r2, #129	; 0x81
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff feb9 	bl	8003b54 <u8g_WriteByte>
	u8g_WriteByte(u8g, dev, *(uint8_t *) arg);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff feb2 	bl	8003b54 <u8g_WriteByte>
	u8g_SetChipSelect(u8g, dev, 0);
 8003df0:	2200      	movs	r2, #0
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff fe69 	bl	8003acc <u8g_SetChipSelect>
	return 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e006      	b.n	8003e0c <u8g_dev_ssd1306_128x64_fn+0x118>
    }
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8003dfe:	79fa      	ldrb	r2, [r7, #7]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 fee9 	bl	8004bdc <u8g_dev_pb8v1_base_fn>
 8003e0a:	4603      	mov	r3, r0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	08009560 	.word	0x08009560
 8003e18:	08009588 	.word	0x08009588
 8003e1c:	08009590 	.word	0x08009590
 8003e20:	0800959c 	.word	0x0800959c

08003e24 <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	81fb      	strh	r3, [r7, #14]
    font++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3301      	adds	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003e66:	89fb      	ldrh	r3, [r7, #14]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	89fb      	ldrh	r3, [r7, #14]
 8003e74:	4413      	add	r3, r2
 8003e76:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003e78:	89fb      	ldrh	r3, [r7, #14]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ffc8 	bl	8003e24 <u8g_font_get_byte>
 8003e94:	4603      	mov	r3, r0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffec 	bl	8003e84 <u8g_font_GetFormat>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d00a      	beq.n	8003ec8 <u8g_font_GetFontGlyphStructureSize+0x2a>
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	dc0a      	bgt.n	8003ecc <u8g_font_GetFontGlyphStructureSize+0x2e>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <u8g_font_GetFontGlyphStructureSize+0x22>
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d002      	beq.n	8003ec4 <u8g_font_GetFontGlyphStructureSize+0x26>
 8003ebe:	e005      	b.n	8003ecc <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 8003ec0:	2306      	movs	r3, #6
 8003ec2:	e004      	b.n	8003ece <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e002      	b.n	8003ece <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 8003ec8:	2306      	movs	r3, #6
 8003eca:	e000      	b.n	8003ece <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 8003ecc:	2303      	movs	r3, #3
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 8003ede:	2105      	movs	r1, #5
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ff9f 	bl	8003e24 <u8g_font_get_byte>
 8003ee6:	4603      	mov	r3, r0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 8003ef8:	2106      	movs	r1, #6
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ffa3 	bl	8003e46 <u8g_font_get_word>
 8003f00:	4603      	mov	r3, r0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 8003f12:	2108      	movs	r1, #8
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff96 	bl	8003e46 <u8g_font_get_word>
 8003f1a:	4603      	mov	r3, r0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 8003f2c:	210a      	movs	r1, #10
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff ff78 	bl	8003e24 <u8g_font_get_byte>
 8003f34:	4603      	mov	r3, r0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 8003f46:	210b      	movs	r1, #11
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff6b 	bl	8003e24 <u8g_font_get_byte>
 8003f4e:	4603      	mov	r3, r0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 8003f60:	210c      	movs	r1, #12
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ff5e 	bl	8003e24 <u8g_font_get_byte>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	b25b      	sxtb	r3, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 8003f7c:	210d      	movs	r1, #13
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ff50 	bl	8003e24 <u8g_font_get_byte>
 8003f84:	4603      	mov	r3, r0
 8003f86:	b25b      	sxtb	r3, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 8003f98:	210e      	movs	r1, #14
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff ff42 	bl	8003e24 <u8g_font_get_byte>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	b25b      	sxtb	r3, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 8003fb4:	210f      	movs	r1, #15
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ff34 	bl	8003e24 <u8g_font_get_byte>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	b25b      	sxtb	r3, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 8003fd0:	2110      	movs	r1, #16
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff26 	bl	8003e24 <u8g_font_get_byte>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	b25b      	sxtb	r3, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff55 	bl	8003e9e <u8g_font_GetFontGlyphStructureSize>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	4413      	add	r3, r2
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff36 	bl	8003e84 <u8g_font_GetFormat>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <u8g_CopyGlyphDataToCache+0x1e>
 800401e:	2b02      	cmp	r3, #2
 8004020:	d11b      	bne.n	800405a <u8g_CopyGlyphDataToCache+0x56>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781a      	ldrb	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	785a      	ldrb	r2, [r3, #1]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	3303      	adds	r3, #3
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b25a      	sxtb	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	3304      	adds	r3, #4
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	b25a      	sxtb	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	3305      	adds	r3, #5
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b25a      	sxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	779a      	strb	r2, [r3, #30]
      break;
 8004058:	e034      	b.n	80040c4 <u8g_CopyGlyphDataToCache+0xc0>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 8004060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	b25a      	sxtb	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	3b02      	subs	r3, #2
 8004078:	b2db      	uxtb	r3, r3
 800407a:	b25a      	sxtb	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 8004086:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	b2da      	uxtb	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	789b      	ldrb	r3, [r3, #2]
 80040b2:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 80040ba:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	771a      	strb	r2, [r3, #28]
    
      
      break;
 80040c2:	bf00      	nop
  }
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	779a      	strb	r2, [r3, #30]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr

080040fe <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	460b      	mov	r3, r1
 8004108:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff feb5 	bl	8003e84 <u8g_font_GetFormat>
 800411a:	4603      	mov	r3, r0
 800411c:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff febb 	bl	8003e9e <u8g_font_GetFontGlyphStructureSize>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 800412c:	23ff      	movs	r3, #255	; 0xff
 800412e:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 8004130:	7c3b      	ldrb	r3, [r7, #16]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <u8g_GetGlyph+0x3c>
    mask = 15;
 8004136:	230f      	movs	r3, #15
 8004138:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fef0 	bl	8003f24 <u8g_font_GetFontStartEncoding>
 8004144:	4603      	mov	r3, r0
 8004146:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fef6 	bl	8003f3e <u8g_font_GetFontEndEncoding>
 8004152:	4603      	mov	r3, r0
 8004154:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fed5 	bl	8003f0a <u8g_font_GetEncoding97Pos>
 8004160:	4603      	mov	r3, r0
 8004162:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	2b60      	cmp	r3, #96	; 0x60
 8004168:	d909      	bls.n	800417e <u8g_GetGlyph+0x80>
 800416a:	89bb      	ldrh	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d006      	beq.n	800417e <u8g_GetGlyph+0x80>
  {
    p+= pos;
 8004170:	89bb      	ldrh	r3, [r7, #12]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4413      	add	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    start = 97;
 8004178:	2361      	movs	r3, #97	; 0x61
 800417a:	74fb      	strb	r3, [r7, #19]
 800417c:	e016      	b.n	80041ac <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff feb4 	bl	8003ef0 <u8g_font_GetEncoding65Pos>
 8004188:	4603      	mov	r3, r0
 800418a:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d909      	bls.n	80041a6 <u8g_GetGlyph+0xa8>
 8004192:	89bb      	ldrh	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 8004198:	89bb      	ldrh	r3, [r7, #12]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4413      	add	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
      start = 65;
 80041a0:	2341      	movs	r3, #65	; 0x41
 80041a2:	74fb      	strb	r3, [r7, #19]
 80041a4:	e002      	b.n	80041ac <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3311      	adds	r3, #17
 80041aa:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	7bbb      	ldrb	r3, [r7, #14]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d904      	bls.n	80041be <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ff89 	bl	80040cc <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 80041ba:	2300      	movs	r3, #0
 80041bc:	e032      	b.n	8004224 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 80041c2:	7cba      	ldrb	r2, [r7, #18]
 80041c4:	7bbb      	ldrb	r3, [r7, #14]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d828      	bhi.n	800421c <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2bff      	cmp	r3, #255	; 0xff
 80041d0:	d103      	bne.n	80041da <u8g_GetGlyph+0xdc>
      {
        p += 1;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3301      	adds	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e017      	b.n	800420a <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 80041da:	7cba      	ldrb	r2, [r7, #18]
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d105      	bne.n	80041ee <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 80041e2:	6979      	ldr	r1, [r7, #20]
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff0d 	bl	8004004 <u8g_CopyGlyphDataToCache>
          return p;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	e01a      	b.n	8004224 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	3302      	adds	r3, #2
 80041f2:	781a      	ldrb	r2, [r3, #0]
 80041f4:	7c7b      	ldrb	r3, [r7, #17]
 80041f6:	4013      	ands	r3, r2
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4413      	add	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 800420a:	7cba      	ldrb	r2, [r7, #18]
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	429a      	cmp	r2, r3
 8004210:	d003      	beq.n	800421a <u8g_GetGlyph+0x11c>
        break;
      i++;
 8004212:	7cbb      	ldrb	r3, [r7, #18]
 8004214:	3301      	adds	r3, #1
 8004216:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8004218:	e7d7      	b.n	80041ca <u8g_GetGlyph+0xcc>
        break;
 800421a:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff ff55 	bl	80040cc <u8g_FillEmptyGlyphCache>
    
  return NULL;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4603      	mov	r3, r0
 800423c:	70fb      	strb	r3, [r7, #3]
 800423e:	460b      	mov	r3, r1
 8004240:	70bb      	strb	r3, [r7, #2]
 8004242:	4613      	mov	r3, r2
 8004244:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8004246:	787b      	ldrb	r3, [r7, #1]
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff57 	bl	80040fe <u8g_GetGlyph>
 8004250:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <u8g_draw_glyph+0x30>
      return 0;
 8004258:	2300      	movs	r3, #0
 800425a:	e06d      	b.n	8004338 <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff febe 	bl	8003fe4 <u8g_font_GetGlyphDataStart>
 8004268:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	7fdb      	ldrb	r3, [r3, #31]
 800426e:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004276:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	4413      	add	r3, r2
 8004284:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	78ba      	ldrb	r2, [r7, #2]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	70bb      	strb	r3, [r7, #2]
  y--;
 8004294:	78bb      	ldrb	r3, [r7, #2]
 8004296:	3b01      	subs	r3, #1
 8004298:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 800429a:	78ba      	ldrb	r2, [r7, #2]
 800429c:	7abb      	ldrb	r3, [r7, #10]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	3301      	adds	r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	7af8      	ldrb	r0, [r7, #11]
 80042a8:	78f9      	ldrb	r1, [r7, #3]
 80042aa:	7abb      	ldrb	r3, [r7, #10]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4603      	mov	r3, r0
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fb7d 	bl	80039b0 <u8g_IsBBXIntersection>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d103      	bne.n	80042c4 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80042c2:	e039      	b.n	8004338 <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 80042c4:	7afb      	ldrb	r3, [r7, #11]
 80042c6:	3307      	adds	r3, #7
 80042c8:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 80042d0:	78bb      	ldrb	r3, [r7, #2]
 80042d2:	743b      	strb	r3, [r7, #16]
  iy -= h;
 80042d4:	7c3a      	ldrb	r2, [r7, #16]
 80042d6:	7abb      	ldrb	r3, [r7, #10]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	743b      	strb	r3, [r7, #16]
  iy++;
 80042dc:	7c3b      	ldrb	r3, [r7, #16]
 80042de:	3301      	adds	r3, #1
 80042e0:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 80042e2:	2300      	movs	r3, #0
 80042e4:	74bb      	strb	r3, [r7, #18]
 80042e6:	e020      	b.n	800432a <u8g_draw_glyph+0xfe>
  {
    ix = x;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 80042ec:	2300      	movs	r3, #0
 80042ee:	74fb      	strb	r3, [r7, #19]
 80042f0:	e011      	b.n	8004316 <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	7c3a      	ldrb	r2, [r7, #16]
 80042f8:	7c79      	ldrb	r1, [r7, #17]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa88 	bl	8004814 <u8g_Draw8Pixel>
      data++;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3301      	adds	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
      ix+=8;
 800430a:	7c7b      	ldrb	r3, [r7, #17]
 800430c:	3308      	adds	r3, #8
 800430e:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	3301      	adds	r3, #1
 8004314:	74fb      	strb	r3, [r7, #19]
 8004316:	7cfa      	ldrb	r2, [r7, #19]
 8004318:	7afb      	ldrb	r3, [r7, #11]
 800431a:	429a      	cmp	r2, r3
 800431c:	d3e9      	bcc.n	80042f2 <u8g_draw_glyph+0xc6>
    }
    iy++;
 800431e:	7c3b      	ldrb	r3, [r7, #16]
 8004320:	3301      	adds	r3, #1
 8004322:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8004324:	7cbb      	ldrb	r3, [r7, #18]
 8004326:	3301      	adds	r3, #1
 8004328:	74bb      	strb	r3, [r7, #18]
 800432a:	7cba      	ldrb	r2, [r7, #18]
 800432c:	7abb      	ldrb	r3, [r7, #10]
 800432e:	429a      	cmp	r2, r3
 8004330:	d3da      	bcc.n	80042e8 <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	72fb      	strb	r3, [r7, #11]
 800434e:	4613      	mov	r3, r2
 8004350:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	4798      	blx	r3
 800435e:	4603      	mov	r3, r0
 8004360:	461a      	mov	r2, r3
 8004362:	7abb      	ldrb	r3, [r7, #10]
 8004364:	4413      	add	r3, r2
 8004366:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 8004368:	e013      	b.n	8004392 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	7aba      	ldrb	r2, [r7, #10]
 8004370:	7af9      	ldrb	r1, [r7, #11]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff ff5a 	bl	800422c <u8g_draw_glyph>
 8004378:	4603      	mov	r3, r0
 800437a:	75bb      	strb	r3, [r7, #22]
    x += d;
 800437c:	7dba      	ldrb	r2, [r7, #22]
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	4413      	add	r3, r2
 8004382:	72fb      	strb	r3, [r7, #11]
    t += d;
 8004384:	7dba      	ldrb	r2, [r7, #22]
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	4413      	add	r3, r2
 800438a:	75fb      	strb	r3, [r7, #23]
    s++;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3301      	adds	r3, #1
 8004390:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e7      	bne.n	800436a <u8g_DrawStr+0x2a>
  }
  return t;
 800439a:	7dfb      	ldrb	r3, [r7, #23]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d06b      	beq.n	800448c <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d114      	bne.n	80043e8 <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fd87 	bl	8003ed6 <u8g_font_GetCapitalAHeight>
 80043c8:	4603      	mov	r3, r0
 80043ca:	b25a      	sxtb	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fdbe 	bl	8003f58 <u8g_font_GetLowerGDescent>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80043e6:	e02d      	b.n	8004444 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d114      	bne.n	800441c <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fdd8 	bl	8003fac <u8g_font_GetFontXAscent>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fddc 	bl	8003fc8 <u8g_font_GetFontXDescent>
 8004410:	4603      	mov	r3, r0
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800441a:	e013      	b.n	8004444 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fda7 	bl	8003f74 <u8g_font_GetFontAscent>
 8004426:	4603      	mov	r3, r0
 8004428:	461a      	mov	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fdab 	bl	8003f90 <u8g_font_GetFontDescent>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800444a:	b21a      	sxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8004452:	b21b      	sxth	r3, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	b21b      	sxth	r3, r3
 8004458:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d00d      	beq.n	8004480 <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 8004464:	89fb      	ldrh	r3, [r7, #14]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004470:	b29b      	uxth	r3, r3
 8004472:	89fa      	ldrh	r2, [r7, #14]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	099b      	lsrs	r3, r3, #6
 800447e:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 8004480:	89fb      	ldrh	r3, [r7, #14]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800448a:	e000      	b.n	800448e <u8g_UpdateRefHeight+0xea>
    return;
 800448c:	bf00      	nop
}
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  return 0;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a03      	ldr	r2, [pc, #12]	; (80044c0 <u8g_SetFontPosBaseline+0x18>)
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	08004495 	.word	0x08004495

080044c4 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d008      	beq.n	80044ea <u8g_SetFont+0x26>
  {
    u8g->font = font;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ff60 	bl	80043a4 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ffdf 	bl	80044a8 <u8g_SetFontPosBaseline>
  }
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80044f2:	b590      	push	{r4, r7, lr}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	603b      	str	r3, [r7, #0]
 80044fe:	4613      	mov	r3, r2
 8004500:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	681c      	ldr	r4, [r3, #0]
 8004506:	79fa      	ldrb	r2, [r7, #7]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	47a0      	blx	r4
 8004510:	4603      	mov	r3, r0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}

0800451a <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	2002      	movs	r0, #2
 800452a:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 800452c:	2300      	movs	r3, #0
 800452e:	220a      	movs	r2, #10
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ffdd 	bl	80044f2 <u8g_call_dev_fn>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	2003      	movs	r0, #3
 8004542:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	2000      	movs	r0, #0
 800454a:	4798      	blx	r3
  return r;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004564:	2002      	movs	r0, #2
 8004566:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	2001      	movs	r0, #1
 800456e:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8004570:	2300      	movs	r3, #0
 8004572:	2214      	movs	r2, #20
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff ffbb 	bl	80044f2 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3338      	adds	r3, #56	; 0x38
 8004580:	2217      	movs	r2, #23
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ffb4 	bl	80044f2 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458e:	2000      	movs	r0, #0
 8004590:	4798      	blx	r3
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	2002      	movs	r0, #2
 80045aa:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	2001      	movs	r0, #1
 80045b2:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 80045b4:	2300      	movs	r3, #0
 80045b6:	2215      	movs	r2, #21
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ff99 	bl	80044f2 <u8g_call_dev_fn>
 80045c0:	4603      	mov	r3, r0
 80045c2:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3338      	adds	r3, #56	; 0x38
 80045ce:	2217      	movs	r2, #23
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff ff8d 	bl	80044f2 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	2000      	movs	r0, #0
 80045de:	4798      	blx	r3
  return r;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	4611      	mov	r1, r2
 80045f6:	461a      	mov	r2, r3
 80045f8:	460b      	mov	r3, r1
 80045fa:	71fb      	strb	r3, [r7, #7]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	332d      	adds	r3, #45	; 0x2d
 8004604:	617b      	str	r3, [r7, #20]
  arg->x = x;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	79fa      	ldrb	r2, [r7, #7]
 800460a:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	79ba      	ldrb	r2, [r7, #6]
 8004610:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004618:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004620:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	223b      	movs	r2, #59	; 0x3b
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff ff62 	bl	80044f2 <u8g_call_dev_fn>
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8004640:	f107 030f 	add.w	r3, r7, #15
 8004644:	2246      	movs	r2, #70	; 0x46
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff52 	bl	80044f2 <u8g_call_dev_fn>
  return r;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8004662:	f107 030f 	add.w	r3, r7, #15
 8004666:	2247      	movs	r2, #71	; 0x47
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff ff41 	bl	80044f2 <u8g_call_dev_fn>
  return r;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 8004684:	2300      	movs	r3, #0
 8004686:	2248      	movs	r2, #72	; 0x48
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff ff31 	bl	80044f2 <u8g_call_dev_fn>
 8004690:	4603      	mov	r3, r0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ffc4 	bl	8004636 <u8g_GetWidthLL>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ffcb 	bl	8004658 <u8g_GetHeightLL>
 80046c2:	4603      	mov	r3, r0
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ffd2 	bl	800467a <u8g_GetModeLL>
 80046d6:	4603      	mov	r3, r0
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6859      	ldr	r1, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3338      	adds	r3, #56	; 0x38
 80046e6:	2217      	movs	r2, #23
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff02 	bl	80044f2 <u8g_call_dev_fn>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2222      	movs	r2, #34	; 0x22
 800471c:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8004724:	2101      	movs	r1, #1
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f891 	bl	800484e <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff febb 	bl	80044a8 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a02      	ldr	r2, [pc, #8]	; (8004768 <u8g_init_data+0x70>)
 800475e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	08004d7d 	.word	0x08004d7d

0800476c <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fecd 	bl	800451a <u8g_InitLL>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <u8g_Begin+0x1e>
    return 0;
 8004786:	2300      	movs	r3, #0
 8004788:	e003      	b.n	8004792 <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ff85 	bl	800469a <u8g_UpdateDimension>
  return 1;
 8004790:	2301      	movs	r3, #1
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff ffa6 	bl	80046f8 <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff ffd6 	bl	800476c <u8g_Begin>
 80047c0:	4603      	mov	r3, r0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff febc 	bl	8004556 <u8g_FirstPageLL>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fec8 	bl	800459a <u8g_NextPageLL>
 800480a:	4603      	mov	r3, r0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af02      	add	r7, sp, #8
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	4608      	mov	r0, r1
 800481e:	4611      	mov	r1, r2
 8004820:	461a      	mov	r2, r3
 8004822:	4603      	mov	r3, r0
 8004824:	70fb      	strb	r3, [r7, #3]
 8004826:	460b      	mov	r3, r1
 8004828:	70bb      	strb	r3, [r7, #2]
 800482a:	4613      	mov	r3, r2
 800482c:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	78b8      	ldrb	r0, [r7, #2]
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	7c3b      	ldrb	r3, [r7, #16]
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	787b      	ldrb	r3, [r7, #1]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	4603      	mov	r3, r0
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff fed2 	bl	80045ea <u8g_Draw8PixelLL>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	78db      	ldrb	r3, [r3, #3]
 8004886:	3b01      	subs	r3, #1
 8004888:	b2da      	uxtb	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	711a      	strb	r2, [r3, #4]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr

0800489e <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 800489e:	b490      	push	{r4, r7}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	789a      	ldrb	r2, [r3, #2]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4413      	add	r3, r2
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	789a      	ldrb	r2, [r3, #2]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	785b      	ldrb	r3, [r3, #1]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d301      	bcc.n	80048c6 <u8g_page_Next+0x28>
    return 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e018      	b.n	80048f8 <u8g_page_Next+0x5a>
  p->page++;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	791b      	ldrb	r3, [r3, #4]
 80048ca:	3301      	adds	r3, #1
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	4423      	add	r3, r4
 80048dc:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	429c      	cmp	r4, r3
 80048e4:	d304      	bcc.n	80048f0 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	785c      	ldrb	r4, [r3, #1]
    y1--;
 80048ea:	4623      	mov	r3, r4
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4622      	mov	r2, r4
 80048f4:	70da      	strb	r2, [r3, #3]
  
  return 1;
 80048f6:	2301      	movs	r3, #1
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc90      	pop	{r4, r7}
 8004900:	4770      	bx	lr

08004902 <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	795b      	ldrb	r3, [r3, #5]
 8004918:	461a      	mov	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	4413      	add	r3, r2
 800491e:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	60fa      	str	r2, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d1f6      	bne.n	8004920 <u8g_pb_Clear+0x1e>
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	70fb      	strb	r3, [r7, #3]
 800494a:	4613      	mov	r3, r2
 800494c:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	78db      	ldrb	r3, [r3, #3]
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	429a      	cmp	r2, r3
 8004956:	bf94      	ite	ls
 8004958:	2301      	movls	r3, #1
 800495a:	2300      	movhi	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	789b      	ldrb	r3, [r3, #2]
 8004964:	78ba      	ldrb	r2, [r7, #2]
 8004966:	429a      	cmp	r2, r3
 8004968:	bf2c      	ite	cs
 800496a:	2301      	movcs	r3, #1
 800496c:	2300      	movcc	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	78bb      	ldrb	r3, [r7, #2]
 8004976:	429a      	cmp	r2, r3
 8004978:	bf8c      	ite	hi
 800497a:	2301      	movhi	r3, #1
 800497c:	2300      	movls	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	7bbb      	ldrb	r3, [r7, #14]
 800498a:	4013      	ands	r3, r2
 800498c:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 800498e:	7bba      	ldrb	r2, [r7, #14]
 8004990:	7b7b      	ldrb	r3, [r7, #13]
 8004992:	4013      	ands	r3, r2
 8004994:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 8004996:	7b7a      	ldrb	r2, [r7, #13]
 8004998:	7b3b      	ldrb	r3, [r7, #12]
 800499a:	4013      	ands	r3, r2
 800499c:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 800499e:	7bfa      	ldrb	r2, [r7, #15]
 80049a0:	7bbb      	ldrb	r3, [r7, #14]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	7b7b      	ldrb	r3, [r7, #13]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	b2db      	uxtb	r3, r3
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	789a      	ldrb	r2, [r3, #2]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	795a      	ldrb	r2, [r3, #5]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	709a      	strb	r2, [r3, #2]
  box->x1--;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	789b      	ldrb	r3, [r3, #2]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	78da      	ldrb	r2, [r3, #3]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	70da      	strb	r2, [r3, #3]
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
	...

08004a00 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	78db      	ldrb	r3, [r3, #3]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d813      	bhi.n	8004a44 <u8g_pb_Is8PixelVisible+0x44>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <u8g_pb_Is8PixelVisible+0x24>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a45 	.word	0x08004a45
 8004a28:	08004a35 	.word	0x08004a35
 8004a2c:	08004a45 	.word	0x08004a45
 8004a30:	08004a3d 	.word	0x08004a3d
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8004a34:	7bbb      	ldrb	r3, [r7, #14]
 8004a36:	3308      	adds	r3, #8
 8004a38:	73bb      	strb	r3, [r7, #14]
      break;
 8004a3a:	e003      	b.n	8004a44 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	3b08      	subs	r3, #8
 8004a40:	73fb      	strb	r3, [r7, #15]
      break;
 8004a42:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8004a44:	7bba      	ldrb	r2, [r7, #14]
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ff77 	bl	800493e <u8g_pb_IsYIntersection>
 8004a50:	4603      	mov	r3, r0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop

08004a5c <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	795a      	ldrb	r2, [r3, #5]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	68b8      	ldr	r0, [r7, #8]
 8004a74:	f7ff f881 	bl	8003b7a <u8g_WriteSequence>
 8004a78:	4603      	mov	r3, r0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8004a82:	b490      	push	{r4, r7}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4603      	mov	r3, r0
 8004a92:	70fb      	strb	r3, [r7, #3]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70bb      	strb	r3, [r7, #2]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	78ba      	ldrb	r2, [r7, #2]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 8004aac:	2401      	movs	r4, #1
  y &= 0x07;
 8004aae:	78bb      	ldrb	r3, [r7, #2]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	78bb      	ldrb	r3, [r7, #2]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	b2dc      	uxtb	r4, r3
  ptr += x;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 8004ac8:	787b      	ldrb	r3, [r7, #1]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d006      	beq.n	8004adc <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	4323      	orrs	r3, r4
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 8004ada:	e007      	b.n	8004aec <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 8004adc:	43e3      	mvns	r3, r4
 8004ade:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4023      	ands	r3, r4
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	701a      	strb	r2, [r3, #0]
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc90      	pop	{r4, r7}
 8004af4:	4770      	bx	lr

08004af6 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	785a      	ldrb	r2, [r3, #1]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	789b      	ldrb	r3, [r3, #2]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d315      	bcc.n	8004b38 <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	785a      	ldrb	r2, [r3, #1]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	78db      	ldrb	r3, [r3, #3]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d811      	bhi.n	8004b3c <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	795b      	ldrb	r3, [r3, #5]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d20d      	bcs.n	8004b40 <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	7819      	ldrb	r1, [r3, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	785a      	ldrb	r2, [r3, #1]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	791b      	ldrb	r3, [r3, #4]
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ffa6 	bl	8004a82 <u8g_pb8v1_set_pixel>
 8004b36:	e004      	b.n	8004b42 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8004b38:	bf00      	nop
 8004b3a:	e002      	b.n	8004b42 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8004b3c:	bf00      	nop
 8004b3e:	e000      	b.n	8004b42 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8004b40:	bf00      	nop
}
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	78db      	ldrb	r3, [r3, #3]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d81c      	bhi.n	8004ba0 <u8g_pb8v1_Set8PixelOpt2+0x58>
 8004b66:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <u8g_pb8v1_Set8PixelOpt2+0x24>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b85 	.word	0x08004b85
 8004b74:	08004b8d 	.word	0x08004b8d
 8004b78:	08004b95 	.word	0x08004b95
  {
    case 0: dx++; break;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
 8004b82:	e00d      	b.n	8004ba0 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 1: dy++; break;
 8004b84:	7bbb      	ldrb	r3, [r7, #14]
 8004b86:	3301      	adds	r3, #1
 8004b88:	73bb      	strb	r3, [r7, #14]
 8004b8a:	e009      	b.n	8004ba0 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 2: dx--; break;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	e005      	b.n	8004ba0 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 3: dy--; break;
 8004b94:	7bbb      	ldrb	r3, [r7, #14]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	73bb      	strb	r3, [r7, #14]
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <u8g_pb8v1_Set8PixelOpt2+0x58>
  }
  
  do
 8004b9e:	bf00      	nop
  {
    if ( pixel & 128 )
 8004ba0:	b263      	sxtb	r3, r4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da03      	bge.n	8004bae <u8g_pb8v1_Set8PixelOpt2+0x66>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ffa4 	bl	8004af6 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	785a      	ldrb	r2, [r3, #1]
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 8004bca:	0063      	lsls	r3, r4, #1
 8004bcc:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	d1e5      	bne.n	8004b9e <u8g_pb8v1_Set8PixelOpt2+0x56>
  
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}

08004bdc <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	617b      	str	r3, [r7, #20]
  switch(msg)
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	3b0a      	subs	r3, #10
 8004bf6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bf8:	f200 80ba 	bhi.w	8004d70 <u8g_dev_pb8v1_base_fn+0x194>
 8004bfc:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <u8g_dev_pb8v1_base_fn+0x28>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004d71 	.word	0x08004d71
 8004c08:	08004d71 	.word	0x08004d71
 8004c0c:	08004d71 	.word	0x08004d71
 8004c10:	08004d71 	.word	0x08004d71
 8004c14:	08004d71 	.word	0x08004d71
 8004c18:	08004d71 	.word	0x08004d71
 8004c1c:	08004d71 	.word	0x08004d71
 8004c20:	08004d71 	.word	0x08004d71
 8004c24:	08004d71 	.word	0x08004d71
 8004c28:	08004d71 	.word	0x08004d71
 8004c2c:	08004d23 	.word	0x08004d23
 8004c30:	08004d33 	.word	0x08004d33
 8004c34:	08004d71 	.word	0x08004d71
 8004c38:	08004d4d 	.word	0x08004d4d
 8004c3c:	08004d71 	.word	0x08004d71
 8004c40:	08004d71 	.word	0x08004d71
 8004c44:	08004d71 	.word	0x08004d71
 8004c48:	08004d71 	.word	0x08004d71
 8004c4c:	08004d71 	.word	0x08004d71
 8004c50:	08004d71 	.word	0x08004d71
 8004c54:	08004d71 	.word	0x08004d71
 8004c58:	08004d71 	.word	0x08004d71
 8004c5c:	08004d71 	.word	0x08004d71
 8004c60:	08004d71 	.word	0x08004d71
 8004c64:	08004d71 	.word	0x08004d71
 8004c68:	08004d71 	.word	0x08004d71
 8004c6c:	08004d71 	.word	0x08004d71
 8004c70:	08004d71 	.word	0x08004d71
 8004c74:	08004d71 	.word	0x08004d71
 8004c78:	08004d71 	.word	0x08004d71
 8004c7c:	08004d71 	.word	0x08004d71
 8004c80:	08004d71 	.word	0x08004d71
 8004c84:	08004d71 	.word	0x08004d71
 8004c88:	08004d71 	.word	0x08004d71
 8004c8c:	08004d71 	.word	0x08004d71
 8004c90:	08004d71 	.word	0x08004d71
 8004c94:	08004d71 	.word	0x08004d71
 8004c98:	08004d71 	.word	0x08004d71
 8004c9c:	08004d71 	.word	0x08004d71
 8004ca0:	08004d71 	.word	0x08004d71
 8004ca4:	08004d19 	.word	0x08004d19
 8004ca8:	08004d71 	.word	0x08004d71
 8004cac:	08004d71 	.word	0x08004d71
 8004cb0:	08004d71 	.word	0x08004d71
 8004cb4:	08004d71 	.word	0x08004d71
 8004cb8:	08004d71 	.word	0x08004d71
 8004cbc:	08004d71 	.word	0x08004d71
 8004cc0:	08004d71 	.word	0x08004d71
 8004cc4:	08004d71 	.word	0x08004d71
 8004cc8:	08004d01 	.word	0x08004d01
 8004ccc:	08004d71 	.word	0x08004d71
 8004cd0:	08004d71 	.word	0x08004d71
 8004cd4:	08004d71 	.word	0x08004d71
 8004cd8:	08004d71 	.word	0x08004d71
 8004cdc:	08004d71 	.word	0x08004d71
 8004ce0:	08004d71 	.word	0x08004d71
 8004ce4:	08004d71 	.word	0x08004d71
 8004ce8:	08004d71 	.word	0x08004d71
 8004cec:	08004d71 	.word	0x08004d71
 8004cf0:	08004d71 	.word	0x08004d71
 8004cf4:	08004d57 	.word	0x08004d57
 8004cf8:	08004d61 	.word	0x08004d61
 8004cfc:	08004d6b 	.word	0x08004d6b
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff fe7c 	bl	8004a00 <u8g_pb_Is8PixelVisible>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d02f      	beq.n	8004d6e <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	6978      	ldr	r0, [r7, #20]
 8004d12:	f7ff ff19 	bl	8004b48 <u8g_pb8v1_Set8PixelOpt2>
      break;
 8004d16:	e02a      	b.n	8004d6e <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8004d18:	6839      	ldr	r1, [r7, #0]
 8004d1a:	6978      	ldr	r0, [r7, #20]
 8004d1c:	f7ff feeb 	bl	8004af6 <u8g_pb8v1_SetPixel>
      break;
 8004d20:	e026      	b.n	8004d70 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 8004d22:	6978      	ldr	r0, [r7, #20]
 8004d24:	f7ff fded 	bl	8004902 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fd9e 	bl	800486c <u8g_page_First>
      break;
 8004d30:	e01e      	b.n	8004d70 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fdb2 	bl	800489e <u8g_page_Next>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e016      	b.n	8004d72 <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	f7ff fddc 	bl	8004902 <u8g_pb_Clear>
      break;
 8004d4a:	e011      	b.n	8004d70 <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7ff fe36 	bl	80049c0 <u8g_pb_GetPageBox>
      break;
 8004d54:	e00c      	b.n	8004d70 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	795a      	ldrb	r2, [r3, #5]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	701a      	strb	r2, [r3, #0]
      break;
 8004d5e:	e007      	b.n	8004d70 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	785a      	ldrb	r2, [r3, #1]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	701a      	strb	r2, [r3, #0]
      break;
 8004d68:	e002      	b.n	8004d70 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e001      	b.n	8004d72 <u8g_dev_pb8v1_base_fn+0x196>
      break;
 8004d6e:	bf00      	nop
  }
  return 1;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d96:	f3ef 8305 	mrs	r3, IPSR
 8004d9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10f      	bne.n	8004dc2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da2:	f3ef 8310 	mrs	r3, PRIMASK
 8004da6:	607b      	str	r3, [r7, #4]
  return(result);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <osKernelInitialize+0x32>
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <osKernelInitialize+0x60>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d109      	bne.n	8004dca <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004db6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dba:	603b      	str	r3, [r7, #0]
  return(result);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004dc2:	f06f 0305 	mvn.w	r3, #5
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e00c      	b.n	8004de4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <osKernelInitialize+0x60>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <osKernelInitialize+0x60>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e002      	b.n	8004de4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004de4:	68fb      	ldr	r3, [r7, #12]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	200001e0 	.word	0x200001e0

08004df4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dfa:	f3ef 8305 	mrs	r3, IPSR
 8004dfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10f      	bne.n	8004e26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e06:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0a:	607b      	str	r3, [r7, #4]
  return(result);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <osKernelStart+0x32>
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <osKernelStart+0x64>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d109      	bne.n	8004e2e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1e:	603b      	str	r3, [r7, #0]
  return(result);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e26:	f06f 0305 	mvn.w	r3, #5
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e00e      	b.n	8004e4c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <osKernelStart+0x64>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <osKernelStart+0x64>)
 8004e38:	2202      	movs	r2, #2
 8004e3a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004e3c:	f001 fb26 	bl	800648c <vTaskStartScheduler>
      stat = osOK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e002      	b.n	8004e4c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004e46:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200001e0 	.word	0x200001e0

08004e5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b092      	sub	sp, #72	; 0x48
 8004e60:	af04      	add	r7, sp, #16
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e6c:	f3ef 8305 	mrs	r3, IPSR
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f040 8094 	bne.w	8004fa2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7e:	623b      	str	r3, [r7, #32]
  return(result);
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 808d 	bne.w	8004fa2 <osThreadNew+0x146>
 8004e88:	4b48      	ldr	r3, [pc, #288]	; (8004fac <osThreadNew+0x150>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d106      	bne.n	8004e9e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e90:	f3ef 8311 	mrs	r3, BASEPRI
 8004e94:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f040 8082 	bne.w	8004fa2 <osThreadNew+0x146>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d07e      	beq.n	8004fa2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004ea8:	2318      	movs	r3, #24
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004eac:	2300      	movs	r3, #0
 8004eae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004eb0:	f107 031b 	add.w	r3, r7, #27
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d045      	beq.n	8004f4e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <osThreadNew+0x74>
        name = attr->name;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <osThreadNew+0x9a>
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	2b38      	cmp	r3, #56	; 0x38
 8004ee8:	d805      	bhi.n	8004ef6 <osThreadNew+0x9a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <osThreadNew+0x9e>
        return (NULL);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e054      	b.n	8004fa4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	089b      	lsrs	r3, r3, #2
 8004f08:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00e      	beq.n	8004f30 <osThreadNew+0xd4>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2bbb      	cmp	r3, #187	; 0xbb
 8004f18:	d90a      	bls.n	8004f30 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d006      	beq.n	8004f30 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <osThreadNew+0xd4>
        mem = 1;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f2e:	e010      	b.n	8004f52 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10c      	bne.n	8004f52 <osThreadNew+0xf6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d108      	bne.n	8004f52 <osThreadNew+0xf6>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <osThreadNew+0xf6>
          mem = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f4c:	e001      	b.n	8004f52 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d110      	bne.n	8004f7a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f60:	9202      	str	r2, [sp, #8]
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f001 f8a8 	bl	80060c4 <xTaskCreateStatic>
 8004f74:	4603      	mov	r3, r0
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e013      	b.n	8004fa2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d110      	bne.n	8004fa2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f001 f8f2 	bl	800617c <xTaskCreate>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d001      	beq.n	8004fa2 <osThreadNew+0x146>
          hTask = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fa2:	697b      	ldr	r3, [r7, #20]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3738      	adds	r7, #56	; 0x38
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200001e0 	.word	0x200001e0

08004fb0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb8:	f3ef 8305 	mrs	r3, IPSR
 8004fbc:	613b      	str	r3, [r7, #16]
  return(result);
 8004fbe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <osDelay+0x34>
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <osDelay+0x58>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d109      	bne.n	8004fec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <osDelay+0x3c>
    stat = osErrorISR;
 8004fe4:	f06f 0305 	mvn.w	r3, #5
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e007      	b.n	8004ffc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <osDelay+0x4c>
      vTaskDelay(ticks);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fa14 	bl	8006424 <vTaskDelay>
    }
  }

  return (stat);
 8004ffc:	697b      	ldr	r3, [r7, #20]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	200001e0 	.word	0x200001e0

0800500c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b08c      	sub	sp, #48	; 0x30
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800501c:	f3ef 8305 	mrs	r3, IPSR
 8005020:	61bb      	str	r3, [r7, #24]
  return(result);
 8005022:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005024:	2b00      	cmp	r3, #0
 8005026:	d16f      	bne.n	8005108 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005028:	f3ef 8310 	mrs	r3, PRIMASK
 800502c:	617b      	str	r3, [r7, #20]
  return(result);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d169      	bne.n	8005108 <osMessageQueueNew+0xfc>
 8005034:	4b37      	ldr	r3, [pc, #220]	; (8005114 <osMessageQueueNew+0x108>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d105      	bne.n	8005048 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800503c:	f3ef 8311 	mrs	r3, BASEPRI
 8005040:	613b      	str	r3, [r7, #16]
  return(result);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d15f      	bne.n	8005108 <osMessageQueueNew+0xfc>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d05c      	beq.n	8005108 <osMessageQueueNew+0xfc>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d059      	beq.n	8005108 <osMessageQueueNew+0xfc>
    mem = -1;
 8005054:	f04f 33ff 	mov.w	r3, #4294967295
 8005058:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d029      	beq.n	80050b4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d012      	beq.n	800508e <osMessageQueueNew+0x82>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b4f      	cmp	r3, #79	; 0x4f
 800506e:	d90e      	bls.n	800508e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	429a      	cmp	r2, r3
 8005086:	d302      	bcc.n	800508e <osMessageQueueNew+0x82>
        mem = 1;
 8005088:	2301      	movs	r3, #1
 800508a:	623b      	str	r3, [r7, #32]
 800508c:	e014      	b.n	80050b8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d110      	bne.n	80050b8 <osMessageQueueNew+0xac>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10c      	bne.n	80050b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d108      	bne.n	80050b8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <osMessageQueueNew+0xac>
          mem = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	623b      	str	r3, [r7, #32]
 80050b2:	e001      	b.n	80050b8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d10b      	bne.n	80050d6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2100      	movs	r1, #0
 80050c8:	9100      	str	r1, [sp, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fa85 	bl	80055dc <xQueueGenericCreateStatic>
 80050d2:	6278      	str	r0, [r7, #36]	; 0x24
 80050d4:	e008      	b.n	80050e8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d105      	bne.n	80050e8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80050dc:	2200      	movs	r2, #0
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 faf2 	bl	80056ca <xQueueGenericCreate>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00c      	beq.n	8005108 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <osMessageQueueNew+0xf0>
        name = attr->name;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	e001      	b.n	8005100 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005100:	69f9      	ldr	r1, [r7, #28]
 8005102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005104:	f000 ff82 	bl	800600c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800510a:	4618      	mov	r0, r3
 800510c:	3728      	adds	r7, #40	; 0x28
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	200001e0 	.word	0x200001e0

08005118 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005130:	f3ef 8305 	mrs	r3, IPSR
 8005134:	61fb      	str	r3, [r7, #28]
  return(result);
 8005136:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10f      	bne.n	800515c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513c:	f3ef 8310 	mrs	r3, PRIMASK
 8005140:	61bb      	str	r3, [r7, #24]
  return(result);
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <osMessageQueuePut+0x44>
 8005148:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <osMessageQueuePut+0xe0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d12e      	bne.n	80051ae <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005150:	f3ef 8311 	mrs	r3, BASEPRI
 8005154:	617b      	str	r3, [r7, #20]
  return(result);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d028      	beq.n	80051ae <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <osMessageQueuePut+0x56>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <osMessageQueuePut+0x56>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800516e:	f06f 0303 	mvn.w	r3, #3
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005174:	e039      	b.n	80051ea <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800517a:	f107 0210 	add.w	r2, r7, #16
 800517e:	2300      	movs	r3, #0
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	6a38      	ldr	r0, [r7, #32]
 8005184:	f000 fc00 	bl	8005988 <xQueueGenericSendFromISR>
 8005188:	4603      	mov	r3, r0
 800518a:	2b01      	cmp	r3, #1
 800518c:	d003      	beq.n	8005196 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800518e:	f06f 0302 	mvn.w	r3, #2
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005194:	e029      	b.n	80051ea <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d026      	beq.n	80051ea <osMessageQueuePut+0xd2>
 800519c:	4b17      	ldr	r3, [pc, #92]	; (80051fc <osMessageQueuePut+0xe4>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051ac:	e01d      	b.n	80051ea <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <osMessageQueuePut+0xa2>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80051ba:	f06f 0303 	mvn.w	r3, #3
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	e014      	b.n	80051ec <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051c2:	2300      	movs	r3, #0
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	6a38      	ldr	r0, [r7, #32]
 80051ca:	f000 fadf 	bl	800578c <xQueueGenericSend>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d00b      	beq.n	80051ec <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80051da:	f06f 0301 	mvn.w	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
 80051e0:	e004      	b.n	80051ec <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80051e2:	f06f 0302 	mvn.w	r3, #2
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
 80051e8:	e000      	b.n	80051ec <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051ea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3728      	adds	r7, #40	; 0x28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	200001e0 	.word	0x200001e0
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005216:	f3ef 8305 	mrs	r3, IPSR
 800521a:	61fb      	str	r3, [r7, #28]
  return(result);
 800521c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005222:	f3ef 8310 	mrs	r3, PRIMASK
 8005226:	61bb      	str	r3, [r7, #24]
  return(result);
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d109      	bne.n	8005242 <osMessageQueueGet+0x42>
 800522e:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <osMessageQueueGet+0xdc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d12e      	bne.n	8005294 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005236:	f3ef 8311 	mrs	r3, BASEPRI
 800523a:	617b      	str	r3, [r7, #20]
  return(result);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d028      	beq.n	8005294 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <osMessageQueueGet+0x54>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <osMessageQueueGet+0x54>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005254:	f06f 0303 	mvn.w	r3, #3
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800525a:	e038      	b.n	80052ce <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005260:	f107 0310 	add.w	r3, r7, #16
 8005264:	461a      	mov	r2, r3
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	6a38      	ldr	r0, [r7, #32]
 800526a:	f000 fd05 	bl	8005c78 <xQueueReceiveFromISR>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d003      	beq.n	800527c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005274:	f06f 0302 	mvn.w	r3, #2
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800527a:	e028      	b.n	80052ce <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d025      	beq.n	80052ce <osMessageQueueGet+0xce>
 8005282:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <osMessageQueueGet+0xe0>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005292:	e01c      	b.n	80052ce <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <osMessageQueueGet+0xa0>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80052a0:	f06f 0303 	mvn.w	r3, #3
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
 80052a6:	e013      	b.n	80052d0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	6a38      	ldr	r0, [r7, #32]
 80052ae:	f000 fc03 	bl	8005ab8 <xQueueReceive>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d00b      	beq.n	80052d0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80052be:	f06f 0301 	mvn.w	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	e004      	b.n	80052d0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80052c6:	f06f 0302 	mvn.w	r3, #2
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
 80052cc:	e000      	b.n	80052d0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052ce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3728      	adds	r7, #40	; 0x28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	200001e0 	.word	0x200001e0
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <osMessageQueueGetCount+0x18>
    count = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	e01e      	b.n	800533a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052fc:	f3ef 8305 	mrs	r3, IPSR
 8005300:	617b      	str	r3, [r7, #20]
  return(result);
 8005302:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10f      	bne.n	8005328 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005308:	f3ef 8310 	mrs	r3, PRIMASK
 800530c:	613b      	str	r3, [r7, #16]
  return(result);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <osMessageQueueGetCount+0x44>
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <osMessageQueueGetCount+0x60>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d10a      	bne.n	8005332 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800531c:	f3ef 8311 	mrs	r3, BASEPRI
 8005320:	60fb      	str	r3, [r7, #12]
  return(result);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005328:	69b8      	ldr	r0, [r7, #24]
 800532a:	f000 fd43 	bl	8005db4 <uxQueueMessagesWaitingFromISR>
 800532e:	61f8      	str	r0, [r7, #28]
 8005330:	e003      	b.n	800533a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005332:	69b8      	ldr	r0, [r7, #24]
 8005334:	f000 fd20 	bl	8005d78 <uxQueueMessagesWaiting>
 8005338:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800533a:	69fb      	ldr	r3, [r7, #28]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	200001e0 	.word	0x200001e0

08005348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4a06      	ldr	r2, [pc, #24]	; (8005370 <vApplicationGetIdleTaskMemory+0x28>)
 8005358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4a05      	ldr	r2, [pc, #20]	; (8005374 <vApplicationGetIdleTaskMemory+0x2c>)
 800535e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2280      	movs	r2, #128	; 0x80
 8005364:	601a      	str	r2, [r3, #0]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr
 8005370:	200001e4 	.word	0x200001e4
 8005374:	200002a0 	.word	0x200002a0

08005378 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005388:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a06      	ldr	r2, [pc, #24]	; (80053a8 <vApplicationGetTimerTaskMemory+0x30>)
 800538e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005396:	601a      	str	r2, [r3, #0]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	200004a0 	.word	0x200004a0
 80053a8:	2000055c 	.word	0x2000055c

080053ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f103 0208 	add.w	r2, r3, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f04f 32ff 	mov.w	r2, #4294967295
 80053c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f103 0208 	add.w	r2, r3, #8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f103 0208 	add.w	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d103      	bne.n	8005468 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e00c      	b.n	8005482 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3308      	adds	r3, #8
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	e002      	b.n	8005476 <vListInsert+0x2e>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	d2f6      	bcs.n	8005470 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6892      	ldr	r2, [r2, #8]
 80054ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6852      	ldr	r2, [r2, #4]
 80054d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d103      	bne.n	80054ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	1e5a      	subs	r2, r3, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
	...

0800550c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005536:	f002 f8f1 	bl	800771c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	441a      	add	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005566:	3b01      	subs	r3, #1
 8005568:	68f9      	ldr	r1, [r7, #12]
 800556a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	441a      	add	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d114      	bne.n	80055b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01a      	beq.n	80055ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3310      	adds	r3, #16
 8005598:	4618      	mov	r0, r3
 800559a:	f001 fa13 	bl	80069c4 <xTaskRemoveFromEventList>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d012      	beq.n	80055ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <xQueueGenericReset+0xcc>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	e009      	b.n	80055ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3310      	adds	r3, #16
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fef6 	bl	80053ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3324      	adds	r3, #36	; 0x24
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fef1 	bl	80053ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055ca:	f002 f8d7 	bl	800777c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055ce:	2301      	movs	r3, #1
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08e      	sub	sp, #56	; 0x38
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <xQueueGenericCreateStatic+0x52>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <xQueueGenericCreateStatic+0x56>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <xQueueGenericCreateStatic+0x58>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	623b      	str	r3, [r7, #32]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <xQueueGenericCreateStatic+0x7e>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <xQueueGenericCreateStatic+0x82>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <xQueueGenericCreateStatic+0x84>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	61fb      	str	r3, [r7, #28]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800567a:	2350      	movs	r3, #80	; 0x50
 800567c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b50      	cmp	r3, #80	; 0x50
 8005682:	d00a      	beq.n	800569a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00d      	beq.n	80056c0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f843 	bl	8005746 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3730      	adds	r7, #48	; 0x30
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b08a      	sub	sp, #40	; 0x28
 80056ce:	af02      	add	r7, sp, #8
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	613b      	str	r3, [r7, #16]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	e004      	b.n	800570a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	fb02 f303 	mul.w	r3, r2, r3
 8005708:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3350      	adds	r3, #80	; 0x50
 800570e:	4618      	mov	r0, r3
 8005710:	f002 f904 	bl	800791c <pvPortMalloc>
 8005714:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00f      	beq.n	800573c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	3350      	adds	r3, #80	; 0x50
 8005720:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800572a:	79fa      	ldrb	r2, [r7, #7]
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	4613      	mov	r3, r2
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f805 	bl	8005746 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800573c:	69bb      	ldr	r3, [r7, #24]
	}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	e002      	b.n	8005768 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005774:	2101      	movs	r1, #1
 8005776:	69b8      	ldr	r0, [r7, #24]
 8005778:	f7ff fec8 	bl	800550c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	; 0x38
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <xQueueGenericSend+0x32>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <xQueueGenericSend+0x40>
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <xQueueGenericSend+0x44>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <xQueueGenericSend+0x46>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <xQueueGenericSend+0x60>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d103      	bne.n	80057fa <xQueueGenericSend+0x6e>
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <xQueueGenericSend+0x72>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <xQueueGenericSend+0x74>
 80057fe:	2300      	movs	r3, #0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xQueueGenericSend+0x8e>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	623b      	str	r3, [r7, #32]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800581a:	f001 fa99 	bl	8006d50 <xTaskGetSchedulerState>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <xQueueGenericSend+0x9e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <xQueueGenericSend+0xa2>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <xQueueGenericSend+0xa4>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xQueueGenericSend+0xbe>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	61fb      	str	r3, [r7, #28]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800584a:	f001 ff67 	bl	800771c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <xQueueGenericSend+0xd4>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d129      	bne.n	80058b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005866:	f000 fac0 	bl	8005dea <prvCopyDataToQueue>
 800586a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	2b00      	cmp	r3, #0
 8005872:	d010      	beq.n	8005896 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	3324      	adds	r3, #36	; 0x24
 8005878:	4618      	mov	r0, r3
 800587a:	f001 f8a3 	bl	80069c4 <xTaskRemoveFromEventList>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d013      	beq.n	80058ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005884:	4b3f      	ldr	r3, [pc, #252]	; (8005984 <xQueueGenericSend+0x1f8>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	e00a      	b.n	80058ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800589c:	4b39      	ldr	r3, [pc, #228]	; (8005984 <xQueueGenericSend+0x1f8>)
 800589e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058ac:	f001 ff66 	bl	800777c <vPortExitCritical>
				return pdPASS;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e063      	b.n	800597c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ba:	f001 ff5f 	bl	800777c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	e05c      	b.n	800597c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 f8dd 	bl	8006a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058d6:	f001 ff51 	bl	800777c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058da:	f000 fe47 	bl	800656c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058de:	f001 ff1d 	bl	800771c <vPortEnterCritical>
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e8:	b25b      	sxtb	r3, r3
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d103      	bne.n	80058f8 <xQueueGenericSend+0x16c>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fe:	b25b      	sxtb	r3, r3
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d103      	bne.n	800590e <xQueueGenericSend+0x182>
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800590e:	f001 ff35 	bl	800777c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005912:	1d3a      	adds	r2, r7, #4
 8005914:	f107 0314 	add.w	r3, r7, #20
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f001 f8cc 	bl	8006ab8 <xTaskCheckForTimeOut>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d124      	bne.n	8005970 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005928:	f000 fb57 	bl	8005fda <prvIsQueueFull>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d018      	beq.n	8005964 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	3310      	adds	r3, #16
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4611      	mov	r1, r2
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fff2 	bl	8006924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005942:	f000 fae2 	bl	8005f0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005946:	f000 fe1f 	bl	8006588 <xTaskResumeAll>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	f47f af7c 	bne.w	800584a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <xQueueGenericSend+0x1f8>)
 8005954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	e772      	b.n	800584a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005966:	f000 fad0 	bl	8005f0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800596a:	f000 fe0d 	bl	8006588 <xTaskResumeAll>
 800596e:	e76c      	b.n	800584a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005972:	f000 faca 	bl	8005f0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005976:	f000 fe07 	bl	8006588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800597a:	2300      	movs	r3, #0
		}
	}
}
 800597c:	4618      	mov	r0, r3
 800597e:	3738      	adds	r7, #56	; 0x38
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	; 0x38
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <xQueueGenericSendFromISR+0x3c>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <xQueueGenericSendFromISR+0x40>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <xQueueGenericSendFromISR+0x42>
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	623b      	str	r3, [r7, #32]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d103      	bne.n	80059f2 <xQueueGenericSendFromISR+0x6a>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <xQueueGenericSendFromISR+0x6e>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueGenericSendFromISR+0x70>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	61fb      	str	r3, [r7, #28]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a12:	f001 ff45 	bl	80078a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a16:	f3ef 8211 	mrs	r2, BASEPRI
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	61ba      	str	r2, [r7, #24]
 8005a2c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d302      	bcc.n	8005a44 <xQueueGenericSendFromISR+0xbc>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d12c      	bne.n	8005a9e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a54:	f000 f9c9 	bl	8005dea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d112      	bne.n	8005a88 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	3324      	adds	r3, #36	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 ffa8 	bl	80069c4 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e007      	b.n	8005a98 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	b25a      	sxtb	r2, r3
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a9c:	e001      	b.n	8005aa2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005aac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3738      	adds	r7, #56	; 0x38
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10a      	bne.n	8005ae8 <xQueueReceive+0x30>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	623b      	str	r3, [r7, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	e7fe      	b.n	8005ae6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <xQueueReceive+0x3e>
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <xQueueReceive+0x42>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <xQueueReceive+0x44>
 8005afa:	2300      	movs	r3, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <xQueueReceive+0x5e>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	61fb      	str	r3, [r7, #28]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b16:	f001 f91b 	bl	8006d50 <xTaskGetSchedulerState>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d102      	bne.n	8005b26 <xQueueReceive+0x6e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <xQueueReceive+0x72>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <xQueueReceive+0x74>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xQueueReceive+0x8e>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	61bb      	str	r3, [r7, #24]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b46:	f001 fde9 	bl	800771c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01f      	beq.n	8005b96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b56:	68b9      	ldr	r1, [r7, #8]
 8005b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b5a:	f000 f9b0 	bl	8005ebe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	1e5a      	subs	r2, r3, #1
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00f      	beq.n	8005b8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	3310      	adds	r3, #16
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 ff26 	bl	80069c4 <xTaskRemoveFromEventList>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b7e:	4b3d      	ldr	r3, [pc, #244]	; (8005c74 <xQueueReceive+0x1bc>)
 8005b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b8e:	f001 fdf5 	bl	800777c <vPortExitCritical>
				return pdPASS;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e069      	b.n	8005c6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b9c:	f001 fdee 	bl	800777c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e062      	b.n	8005c6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005baa:	f107 0310 	add.w	r3, r7, #16
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 ff6c 	bl	8006a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bb8:	f001 fde0 	bl	800777c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bbc:	f000 fcd6 	bl	800656c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bc0:	f001 fdac 	bl	800771c <vPortEnterCritical>
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bca:	b25b      	sxtb	r3, r3
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d103      	bne.n	8005bda <xQueueReceive+0x122>
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be0:	b25b      	sxtb	r3, r3
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d103      	bne.n	8005bf0 <xQueueReceive+0x138>
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bf0:	f001 fdc4 	bl	800777c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bf4:	1d3a      	adds	r2, r7, #4
 8005bf6:	f107 0310 	add.w	r3, r7, #16
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 ff5b 	bl	8006ab8 <xTaskCheckForTimeOut>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d123      	bne.n	8005c50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0a:	f000 f9d0 	bl	8005fae <prvIsQueueEmpty>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d017      	beq.n	8005c44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	3324      	adds	r3, #36	; 0x24
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fe81 	bl	8006924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c24:	f000 f971 	bl	8005f0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c28:	f000 fcae 	bl	8006588 <xTaskResumeAll>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d189      	bne.n	8005b46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <xQueueReceive+0x1bc>)
 8005c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	e780      	b.n	8005b46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c46:	f000 f960 	bl	8005f0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c4a:	f000 fc9d 	bl	8006588 <xTaskResumeAll>
 8005c4e:	e77a      	b.n	8005b46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c52:	f000 f95a 	bl	8005f0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c56:	f000 fc97 	bl	8006588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c5c:	f000 f9a7 	bl	8005fae <prvIsQueueEmpty>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f43f af6f 	beq.w	8005b46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3730      	adds	r7, #48	; 0x30
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08e      	sub	sp, #56	; 0x38
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	623b      	str	r3, [r7, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <xQueueReceiveFromISR+0x3a>
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <xQueueReceiveFromISR+0x3e>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueReceiveFromISR+0x40>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	61fb      	str	r3, [r7, #28]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cd2:	f001 fde5 	bl	80078a0 <vPortValidateInterruptPriority>
	__asm volatile
 8005cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	61ba      	str	r2, [r7, #24]
 8005cec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005cee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d02f      	beq.n	8005d5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d0c:	f000 f8d7 	bl	8005ebe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	1e5a      	subs	r2, r3, #1
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d112      	bne.n	8005d48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d016      	beq.n	8005d58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	3310      	adds	r3, #16
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fe48 	bl	80069c4 <xTaskRemoveFromEventList>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00e      	beq.n	8005d58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e007      	b.n	8005d58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	b25a      	sxtb	r2, r3
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5c:	e001      	b.n	8005d62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f383 8811 	msr	BASEPRI, r3
}
 8005d6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3738      	adds	r7, #56	; 0x38
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	60bb      	str	r3, [r7, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005d9c:	f001 fcbe 	bl	800771c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005da6:	f001 fce9 	bl	800777c <vPortExitCritical>

	return uxReturn;
 8005daa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60bb      	str	r3, [r7, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005dde:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr

08005dea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b086      	sub	sp, #24
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10d      	bne.n	8005e24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d14d      	bne.n	8005eac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 ffb9 	bl	8006d8c <xTaskPriorityDisinherit>
 8005e1a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	e043      	b.n	8005eac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d119      	bne.n	8005e5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6898      	ldr	r0, [r3, #8]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	461a      	mov	r2, r3
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	f001 ff75 	bl	8007d24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	441a      	add	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d32b      	bcc.n	8005eac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	e026      	b.n	8005eac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68d8      	ldr	r0, [r3, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	461a      	mov	r2, r3
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	f001 ff5b 	bl	8007d24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	425b      	negs	r3, r3
 8005e78:	441a      	add	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d207      	bcs.n	8005e9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	425b      	negs	r3, r3
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d105      	bne.n	8005eac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005eb4:	697b      	ldr	r3, [r7, #20]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d018      	beq.n	8005f02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	441a      	add	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d303      	bcc.n	8005ef2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68d9      	ldr	r1, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	461a      	mov	r2, r3
 8005efc:	6838      	ldr	r0, [r7, #0]
 8005efe:	f001 ff11 	bl	8007d24 <memcpy>
	}
}
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f12:	f001 fc03 	bl	800771c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f1e:	e011      	b.n	8005f44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d012      	beq.n	8005f4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3324      	adds	r3, #36	; 0x24
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fd49 	bl	80069c4 <xTaskRemoveFromEventList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f38:	f000 fe20 	bl	8006b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	dce9      	bgt.n	8005f20 <prvUnlockQueue+0x16>
 8005f4c:	e000      	b.n	8005f50 <prvUnlockQueue+0x46>
					break;
 8005f4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	22ff      	movs	r2, #255	; 0xff
 8005f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f58:	f001 fc10 	bl	800777c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f5c:	f001 fbde 	bl	800771c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f68:	e011      	b.n	8005f8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d012      	beq.n	8005f98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3310      	adds	r3, #16
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fd24 	bl	80069c4 <xTaskRemoveFromEventList>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f82:	f000 fdfb 	bl	8006b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	dce9      	bgt.n	8005f6a <prvUnlockQueue+0x60>
 8005f96:	e000      	b.n	8005f9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	22ff      	movs	r2, #255	; 0xff
 8005f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fa2:	f001 fbeb 	bl	800777c <vPortExitCritical>
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fb6:	f001 fbb1 	bl	800771c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e001      	b.n	8005fcc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fcc:	f001 fbd6 	bl	800777c <vPortExitCritical>

	return xReturn;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fe2:	f001 fb9b 	bl	800771c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d102      	bne.n	8005ff8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	e001      	b.n	8005ffc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ffc:	f001 fbbe 	bl	800777c <vPortExitCritical>

	return xReturn;
 8006000:	68fb      	ldr	r3, [r7, #12]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	e014      	b.n	8006046 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800601c:	4a0e      	ldr	r2, [pc, #56]	; (8006058 <vQueueAddToRegistry+0x4c>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006028:	490b      	ldr	r1, [pc, #44]	; (8006058 <vQueueAddToRegistry+0x4c>)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <vQueueAddToRegistry+0x4c>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	4413      	add	r3, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800603e:	e006      	b.n	800604e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	3301      	adds	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b07      	cmp	r3, #7
 800604a:	d9e7      	bls.n	800601c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr
 8006058:	2000095c 	.word	0x2000095c

0800605c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800606c:	f001 fb56 	bl	800771c <vPortEnterCritical>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006076:	b25b      	sxtb	r3, r3
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d103      	bne.n	8006086 <vQueueWaitForMessageRestricted+0x2a>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608c:	b25b      	sxtb	r3, r3
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d103      	bne.n	800609c <vQueueWaitForMessageRestricted+0x40>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800609c:	f001 fb6e 	bl	800777c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3324      	adds	r3, #36	; 0x24
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fc5b 	bl	800696c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	f7ff ff27 	bl	8005f0a <prvUnlockQueue>
	}
 80060bc:	bf00      	nop
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	; 0x38
 80060c8:	af04      	add	r7, sp, #16
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	623b      	str	r3, [r7, #32]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xTaskCreateStatic+0x46>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61fb      	str	r3, [r7, #28]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800610a:	23bc      	movs	r3, #188	; 0xbc
 800610c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2bbc      	cmp	r3, #188	; 0xbc
 8006112:	d00a      	beq.n	800612a <xTaskCreateStatic+0x66>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61bb      	str	r3, [r7, #24]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01e      	beq.n	800616e <xTaskCreateStatic+0xaa>
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01b      	beq.n	800616e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800613e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	2202      	movs	r2, #2
 8006144:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006148:	2300      	movs	r3, #0
 800614a:	9303      	str	r3, [sp, #12]
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	9302      	str	r3, [sp, #8]
 8006150:	f107 0314 	add.w	r3, r7, #20
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f851 	bl	8006208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006168:	f000 f8ec 	bl	8006344 <prvAddNewTaskToReadyList>
 800616c:	e001      	b.n	8006172 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006172:	697b      	ldr	r3, [r7, #20]
	}
 8006174:	4618      	mov	r0, r3
 8006176:	3728      	adds	r7, #40	; 0x28
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	; 0x30
 8006180:	af04      	add	r7, sp, #16
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4618      	mov	r0, r3
 8006192:	f001 fbc3 	bl	800791c <pvPortMalloc>
 8006196:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00e      	beq.n	80061bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800619e:	20bc      	movs	r0, #188	; 0xbc
 80061a0:	f001 fbbc 	bl	800791c <pvPortMalloc>
 80061a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30
 80061b2:	e005      	b.n	80061c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061b4:	6978      	ldr	r0, [r7, #20]
 80061b6:	f001 fc75 	bl	8007aa4 <vPortFree>
 80061ba:	e001      	b.n	80061c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d017      	beq.n	80061f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	2300      	movs	r3, #0
 80061d2:	9303      	str	r3, [sp, #12]
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	9302      	str	r3, [sp, #8]
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68b9      	ldr	r1, [r7, #8]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f80f 	bl	8006208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ea:	69f8      	ldr	r0, [r7, #28]
 80061ec:	f000 f8aa 	bl	8006344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061f0:	2301      	movs	r3, #1
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	e002      	b.n	80061fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061fc:	69bb      	ldr	r3, [r7, #24]
	}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	461a      	mov	r2, r3
 8006220:	21a5      	movs	r1, #165	; 0xa5
 8006222:	f001 fd8d 	bl	8007d40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006230:	3b01      	subs	r3, #1
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <prvInitialiseNewTask+0x58>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	617b      	str	r3, [r7, #20]
}
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	e012      	b.n	800628c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	7819      	ldrb	r1, [r3, #0]
 800626e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	3334      	adds	r3, #52	; 0x34
 8006276:	460a      	mov	r2, r1
 8006278:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d006      	beq.n	8006294 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3301      	adds	r3, #1
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b0f      	cmp	r3, #15
 8006290:	d9e9      	bls.n	8006266 <prvInitialiseNewTask+0x5e>
 8006292:	e000      	b.n	8006296 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006294:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2b37      	cmp	r3, #55	; 0x37
 80062a2:	d901      	bls.n	80062a8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062a4:	2337      	movs	r3, #55	; 0x37
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	2200      	movs	r2, #0
 80062b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	3304      	adds	r3, #4
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff f893 	bl	80053ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	3318      	adds	r3, #24
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff f88e 	bl	80053ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	3354      	adds	r3, #84	; 0x54
 80062f8:	2260      	movs	r2, #96	; 0x60
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fd1f 	bl	8007d40 <memset>
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	4a0c      	ldr	r2, [pc, #48]	; (8006338 <prvInitialiseNewTask+0x130>)
 8006306:	659a      	str	r2, [r3, #88]	; 0x58
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	4a0c      	ldr	r2, [pc, #48]	; (800633c <prvInitialiseNewTask+0x134>)
 800630c:	65da      	str	r2, [r3, #92]	; 0x5c
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	4a0b      	ldr	r2, [pc, #44]	; (8006340 <prvInitialiseNewTask+0x138>)
 8006312:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	69b8      	ldr	r0, [r7, #24]
 800631a:	f001 f90b 	bl	8007534 <pxPortInitialiseStack>
 800631e:	4602      	mov	r2, r0
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006330:	bf00      	nop
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	080095c8 	.word	0x080095c8
 800633c:	080095e8 	.word	0x080095e8
 8006340:	080095a8 	.word	0x080095a8

08006344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800634c:	f001 f9e6 	bl	800771c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <prvAddNewTaskToReadyList+0xc4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3301      	adds	r3, #1
 8006356:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <prvAddNewTaskToReadyList+0xc4>)
 8006358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800635a:	4b2c      	ldr	r3, [pc, #176]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006362:	4a2a      	ldr	r2, [pc, #168]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006368:	4b27      	ldr	r3, [pc, #156]	; (8006408 <prvAddNewTaskToReadyList+0xc4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d110      	bne.n	8006392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006370:	f000 fc28 	bl	8006bc4 <prvInitialiseTaskLists>
 8006374:	e00d      	b.n	8006392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006376:	4b26      	ldr	r3, [pc, #152]	; (8006410 <prvAddNewTaskToReadyList+0xcc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800637e:	4b23      	ldr	r3, [pc, #140]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	429a      	cmp	r2, r3
 800638a:	d802      	bhi.n	8006392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800638c:	4a1f      	ldr	r2, [pc, #124]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006392:	4b20      	ldr	r3, [pc, #128]	; (8006414 <prvAddNewTaskToReadyList+0xd0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	4a1e      	ldr	r2, [pc, #120]	; (8006414 <prvAddNewTaskToReadyList+0xd0>)
 800639a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800639c:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <prvAddNewTaskToReadyList+0xd0>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a8:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <prvAddNewTaskToReadyList+0xd4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d903      	bls.n	80063b8 <prvAddNewTaskToReadyList+0x74>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	4a18      	ldr	r2, [pc, #96]	; (8006418 <prvAddNewTaskToReadyList+0xd4>)
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4a15      	ldr	r2, [pc, #84]	; (800641c <prvAddNewTaskToReadyList+0xd8>)
 80063c6:	441a      	add	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f7ff f817 	bl	8005402 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063d4:	f001 f9d2 	bl	800777c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063d8:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <prvAddNewTaskToReadyList+0xcc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063e0:	4b0a      	ldr	r3, [pc, #40]	; (800640c <prvAddNewTaskToReadyList+0xc8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d207      	bcs.n	80063fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063ee:	4b0c      	ldr	r3, [pc, #48]	; (8006420 <prvAddNewTaskToReadyList+0xdc>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000e70 	.word	0x20000e70
 800640c:	2000099c 	.word	0x2000099c
 8006410:	20000e7c 	.word	0x20000e7c
 8006414:	20000e8c 	.word	0x20000e8c
 8006418:	20000e78 	.word	0x20000e78
 800641c:	200009a0 	.word	0x200009a0
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d017      	beq.n	8006466 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006436:	4b13      	ldr	r3, [pc, #76]	; (8006484 <vTaskDelay+0x60>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <vTaskDelay+0x30>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	60bb      	str	r3, [r7, #8]
}
 8006450:	bf00      	nop
 8006452:	e7fe      	b.n	8006452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006454:	f000 f88a 	bl	800656c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006458:	2100      	movs	r1, #0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fd04 	bl	8006e68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006460:	f000 f892 	bl	8006588 <xTaskResumeAll>
 8006464:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d107      	bne.n	800647c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <vTaskDelay+0x64>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000e98 	.word	0x20000e98
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800649a:	463a      	mov	r2, r7
 800649c:	1d39      	adds	r1, r7, #4
 800649e:	f107 0308 	add.w	r3, r7, #8
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe ff50 	bl	8005348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	9202      	str	r2, [sp, #8]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	460a      	mov	r2, r1
 80064ba:	4924      	ldr	r1, [pc, #144]	; (800654c <vTaskStartScheduler+0xc0>)
 80064bc:	4824      	ldr	r0, [pc, #144]	; (8006550 <vTaskStartScheduler+0xc4>)
 80064be:	f7ff fe01 	bl	80060c4 <xTaskCreateStatic>
 80064c2:	4603      	mov	r3, r0
 80064c4:	4a23      	ldr	r2, [pc, #140]	; (8006554 <vTaskStartScheduler+0xc8>)
 80064c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064c8:	4b22      	ldr	r3, [pc, #136]	; (8006554 <vTaskStartScheduler+0xc8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e001      	b.n	80064da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d102      	bne.n	80064e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064e0:	f000 fd16 	bl	8006f10 <xTimerCreateTimerTask>
 80064e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d11b      	bne.n	8006524 <vTaskStartScheduler+0x98>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	613b      	str	r3, [r7, #16]
}
 80064fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006500:	4b15      	ldr	r3, [pc, #84]	; (8006558 <vTaskStartScheduler+0xcc>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3354      	adds	r3, #84	; 0x54
 8006506:	4a15      	ldr	r2, [pc, #84]	; (800655c <vTaskStartScheduler+0xd0>)
 8006508:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <vTaskStartScheduler+0xd4>)
 800650c:	f04f 32ff 	mov.w	r2, #4294967295
 8006510:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <vTaskStartScheduler+0xd8>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006518:	4b13      	ldr	r3, [pc, #76]	; (8006568 <vTaskStartScheduler+0xdc>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800651e:	f001 f88b 	bl	8007638 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006522:	e00e      	b.n	8006542 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d10a      	bne.n	8006542 <vTaskStartScheduler+0xb6>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <vTaskStartScheduler+0xb4>
}
 8006542:	bf00      	nop
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	08008790 	.word	0x08008790
 8006550:	08006b95 	.word	0x08006b95
 8006554:	20000e94 	.word	0x20000e94
 8006558:	2000099c 	.word	0x2000099c
 800655c:	20000028 	.word	0x20000028
 8006560:	20000e90 	.word	0x20000e90
 8006564:	20000e7c 	.word	0x20000e7c
 8006568:	20000e74 	.word	0x20000e74

0800656c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006570:	4b04      	ldr	r3, [pc, #16]	; (8006584 <vTaskSuspendAll+0x18>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a03      	ldr	r2, [pc, #12]	; (8006584 <vTaskSuspendAll+0x18>)
 8006578:	6013      	str	r3, [r2, #0]
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000e98 	.word	0x20000e98

08006588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006596:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <xTaskResumeAll+0x118>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	603b      	str	r3, [r7, #0]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065b4:	f001 f8b2 	bl	800771c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065b8:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <xTaskResumeAll+0x118>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3b01      	subs	r3, #1
 80065be:	4a38      	ldr	r2, [pc, #224]	; (80066a0 <xTaskResumeAll+0x118>)
 80065c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <xTaskResumeAll+0x118>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d162      	bne.n	8006690 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065ca:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <xTaskResumeAll+0x11c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d05e      	beq.n	8006690 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065d2:	e02f      	b.n	8006634 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80065d4:	4b34      	ldr	r3, [pc, #208]	; (80066a8 <xTaskResumeAll+0x120>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3318      	adds	r3, #24
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe ff69 	bl	80054b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3304      	adds	r3, #4
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe ff64 	bl	80054b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	4b2d      	ldr	r3, [pc, #180]	; (80066ac <xTaskResumeAll+0x124>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d903      	bls.n	8006604 <xTaskResumeAll+0x7c>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	4a2a      	ldr	r2, [pc, #168]	; (80066ac <xTaskResumeAll+0x124>)
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <xTaskResumeAll+0x128>)
 8006612:	441a      	add	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3304      	adds	r3, #4
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f7fe fef1 	bl	8005402 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4b23      	ldr	r3, [pc, #140]	; (80066b4 <xTaskResumeAll+0x12c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	429a      	cmp	r2, r3
 800662c:	d302      	bcc.n	8006634 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800662e:	4b22      	ldr	r3, [pc, #136]	; (80066b8 <xTaskResumeAll+0x130>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006634:	4b1c      	ldr	r3, [pc, #112]	; (80066a8 <xTaskResumeAll+0x120>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1cb      	bne.n	80065d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006642:	f000 fb61 	bl	8006d08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006646:	4b1d      	ldr	r3, [pc, #116]	; (80066bc <xTaskResumeAll+0x134>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006652:	f000 f845 	bl	80066e0 <xTaskIncrementTick>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800665c:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <xTaskResumeAll+0x130>)
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3b01      	subs	r3, #1
 8006666:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f1      	bne.n	8006652 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800666e:	4b13      	ldr	r3, [pc, #76]	; (80066bc <xTaskResumeAll+0x134>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <xTaskResumeAll+0x130>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d009      	beq.n	8006690 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800667c:	2301      	movs	r3, #1
 800667e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006680:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <xTaskResumeAll+0x138>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006690:	f001 f874 	bl	800777c <vPortExitCritical>

	return xAlreadyYielded;
 8006694:	68bb      	ldr	r3, [r7, #8]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20000e98 	.word	0x20000e98
 80066a4:	20000e70 	.word	0x20000e70
 80066a8:	20000e30 	.word	0x20000e30
 80066ac:	20000e78 	.word	0x20000e78
 80066b0:	200009a0 	.word	0x200009a0
 80066b4:	2000099c 	.word	0x2000099c
 80066b8:	20000e84 	.word	0x20000e84
 80066bc:	20000e80 	.word	0x20000e80
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066ca:	4b04      	ldr	r3, [pc, #16]	; (80066dc <xTaskGetTickCount+0x18>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066d0:	687b      	ldr	r3, [r7, #4]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr
 80066dc:	20000e74 	.word	0x20000e74

080066e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ea:	4b51      	ldr	r3, [pc, #324]	; (8006830 <xTaskIncrementTick+0x150>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 808e 	bne.w	8006810 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066f4:	4b4f      	ldr	r3, [pc, #316]	; (8006834 <xTaskIncrementTick+0x154>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066fc:	4a4d      	ldr	r2, [pc, #308]	; (8006834 <xTaskIncrementTick+0x154>)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d120      	bne.n	800674a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006708:	4b4b      	ldr	r3, [pc, #300]	; (8006838 <xTaskIncrementTick+0x158>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <xTaskIncrementTick+0x48>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	603b      	str	r3, [r7, #0]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xTaskIncrementTick+0x46>
 8006728:	4b43      	ldr	r3, [pc, #268]	; (8006838 <xTaskIncrementTick+0x158>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	4b43      	ldr	r3, [pc, #268]	; (800683c <xTaskIncrementTick+0x15c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a41      	ldr	r2, [pc, #260]	; (8006838 <xTaskIncrementTick+0x158>)
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	4a41      	ldr	r2, [pc, #260]	; (800683c <xTaskIncrementTick+0x15c>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	4b40      	ldr	r3, [pc, #256]	; (8006840 <xTaskIncrementTick+0x160>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a3f      	ldr	r2, [pc, #252]	; (8006840 <xTaskIncrementTick+0x160>)
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	f000 fadf 	bl	8006d08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800674a:	4b3e      	ldr	r3, [pc, #248]	; (8006844 <xTaskIncrementTick+0x164>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	429a      	cmp	r2, r3
 8006752:	d34e      	bcc.n	80067f2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006754:	4b38      	ldr	r3, [pc, #224]	; (8006838 <xTaskIncrementTick+0x158>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <xTaskIncrementTick+0x82>
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <xTaskIncrementTick+0x84>
 8006762:	2300      	movs	r3, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006768:	4b36      	ldr	r3, [pc, #216]	; (8006844 <xTaskIncrementTick+0x164>)
 800676a:	f04f 32ff 	mov.w	r2, #4294967295
 800676e:	601a      	str	r2, [r3, #0]
					break;
 8006770:	e03f      	b.n	80067f2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006772:	4b31      	ldr	r3, [pc, #196]	; (8006838 <xTaskIncrementTick+0x158>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	d203      	bcs.n	8006792 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800678a:	4a2e      	ldr	r2, [pc, #184]	; (8006844 <xTaskIncrementTick+0x164>)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6013      	str	r3, [r2, #0]
						break;
 8006790:	e02f      	b.n	80067f2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	3304      	adds	r3, #4
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fe8e 	bl	80054b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d004      	beq.n	80067ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	3318      	adds	r3, #24
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fe85 	bl	80054b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b2:	4b25      	ldr	r3, [pc, #148]	; (8006848 <xTaskIncrementTick+0x168>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d903      	bls.n	80067c2 <xTaskIncrementTick+0xe2>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	4a22      	ldr	r2, [pc, #136]	; (8006848 <xTaskIncrementTick+0x168>)
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4a1f      	ldr	r2, [pc, #124]	; (800684c <xTaskIncrementTick+0x16c>)
 80067d0:	441a      	add	r2, r3
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f7fe fe12 	bl	8005402 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e2:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <xTaskIncrementTick+0x170>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d3b3      	bcc.n	8006754 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067f0:	e7b0      	b.n	8006754 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <xTaskIncrementTick+0x170>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f8:	4914      	ldr	r1, [pc, #80]	; (800684c <xTaskIncrementTick+0x16c>)
 80067fa:	4613      	mov	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d907      	bls.n	800681a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	e004      	b.n	800681a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006810:	4b10      	ldr	r3, [pc, #64]	; (8006854 <xTaskIncrementTick+0x174>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3301      	adds	r3, #1
 8006816:	4a0f      	ldr	r2, [pc, #60]	; (8006854 <xTaskIncrementTick+0x174>)
 8006818:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800681a:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <xTaskIncrementTick+0x178>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006826:	697b      	ldr	r3, [r7, #20]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20000e98 	.word	0x20000e98
 8006834:	20000e74 	.word	0x20000e74
 8006838:	20000e28 	.word	0x20000e28
 800683c:	20000e2c 	.word	0x20000e2c
 8006840:	20000e88 	.word	0x20000e88
 8006844:	20000e90 	.word	0x20000e90
 8006848:	20000e78 	.word	0x20000e78
 800684c:	200009a0 	.word	0x200009a0
 8006850:	2000099c 	.word	0x2000099c
 8006854:	20000e80 	.word	0x20000e80
 8006858:	20000e84 	.word	0x20000e84

0800685c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006862:	4b2a      	ldr	r3, [pc, #168]	; (800690c <vTaskSwitchContext+0xb0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800686a:	4b29      	ldr	r3, [pc, #164]	; (8006910 <vTaskSwitchContext+0xb4>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006870:	e046      	b.n	8006900 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006872:	4b27      	ldr	r3, [pc, #156]	; (8006910 <vTaskSwitchContext+0xb4>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006878:	4b26      	ldr	r3, [pc, #152]	; (8006914 <vTaskSwitchContext+0xb8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	e010      	b.n	80068a2 <vTaskSwitchContext+0x46>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <vTaskSwitchContext+0x40>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	607b      	str	r3, [r7, #4]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <vTaskSwitchContext+0x3e>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3b01      	subs	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	491d      	ldr	r1, [pc, #116]	; (8006918 <vTaskSwitchContext+0xbc>)
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0e4      	beq.n	8006880 <vTaskSwitchContext+0x24>
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4a15      	ldr	r2, [pc, #84]	; (8006918 <vTaskSwitchContext+0xbc>)
 80068c2:	4413      	add	r3, r2
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	605a      	str	r2, [r3, #4]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	3308      	adds	r3, #8
 80068d8:	429a      	cmp	r2, r3
 80068da:	d104      	bne.n	80068e6 <vTaskSwitchContext+0x8a>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4a0b      	ldr	r2, [pc, #44]	; (800691c <vTaskSwitchContext+0xc0>)
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	4a08      	ldr	r2, [pc, #32]	; (8006914 <vTaskSwitchContext+0xb8>)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <vTaskSwitchContext+0xc0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3354      	adds	r3, #84	; 0x54
 80068fc:	4a08      	ldr	r2, [pc, #32]	; (8006920 <vTaskSwitchContext+0xc4>)
 80068fe:	6013      	str	r3, [r2, #0]
}
 8006900:	bf00      	nop
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000e98 	.word	0x20000e98
 8006910:	20000e84 	.word	0x20000e84
 8006914:	20000e78 	.word	0x20000e78
 8006918:	200009a0 	.word	0x200009a0
 800691c:	2000099c 	.word	0x2000099c
 8006920:	20000028 	.word	0x20000028

08006924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60fb      	str	r3, [r7, #12]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <vTaskPlaceOnEventList+0x44>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3318      	adds	r3, #24
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fe fd78 	bl	8005448 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006958:	2101      	movs	r1, #1
 800695a:	6838      	ldr	r0, [r7, #0]
 800695c:	f000 fa84 	bl	8006e68 <prvAddCurrentTaskToDelayedList>
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	2000099c 	.word	0x2000099c

0800696c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	617b      	str	r3, [r7, #20]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3318      	adds	r3, #24
 800699a:	4619      	mov	r1, r3
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7fe fd30 	bl	8005402 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069a8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	68b8      	ldr	r0, [r7, #8]
 80069b2:	f000 fa59 	bl	8006e68 <prvAddCurrentTaskToDelayedList>
	}
 80069b6:	bf00      	nop
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	2000099c 	.word	0x2000099c

080069c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10a      	bne.n	80069f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60fb      	str	r3, [r7, #12]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	3318      	adds	r3, #24
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fd5f 	bl	80054b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069fa:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <xTaskRemoveFromEventList+0xb0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d11d      	bne.n	8006a3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fd56 	bl	80054b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <xTaskRemoveFromEventList+0xb4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d903      	bls.n	8006a20 <xTaskRemoveFromEventList+0x5c>
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <xTaskRemoveFromEventList+0xb4>)
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <xTaskRemoveFromEventList+0xb8>)
 8006a2e:	441a      	add	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7fe fce3 	bl	8005402 <vListInsertEnd>
 8006a3c:	e005      	b.n	8006a4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3318      	adds	r3, #24
 8006a42:	4619      	mov	r1, r3
 8006a44:	480e      	ldr	r0, [pc, #56]	; (8006a80 <xTaskRemoveFromEventList+0xbc>)
 8006a46:	f7fe fcdc 	bl	8005402 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <xTaskRemoveFromEventList+0xc0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d905      	bls.n	8006a64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <xTaskRemoveFromEventList+0xc4>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	e001      	b.n	8006a68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006a68:	697b      	ldr	r3, [r7, #20]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000e98 	.word	0x20000e98
 8006a78:	20000e78 	.word	0x20000e78
 8006a7c:	200009a0 	.word	0x200009a0
 8006a80:	20000e30 	.word	0x20000e30
 8006a84:	2000099c 	.word	0x2000099c
 8006a88:	20000e84 	.word	0x20000e84

08006a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <vTaskInternalSetTimeOutState+0x24>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <vTaskInternalSetTimeOutState+0x28>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	605a      	str	r2, [r3, #4]
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000e88 	.word	0x20000e88
 8006ab4:	20000e74 	.word	0x20000e74

08006ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	613b      	str	r3, [r7, #16]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	60fb      	str	r3, [r7, #12]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006afa:	f000 fe0f 	bl	800771c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006afe:	4b1d      	ldr	r3, [pc, #116]	; (8006b74 <xTaskCheckForTimeOut+0xbc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d102      	bne.n	8006b1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e023      	b.n	8006b66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b15      	ldr	r3, [pc, #84]	; (8006b78 <xTaskCheckForTimeOut+0xc0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d007      	beq.n	8006b3a <xTaskCheckForTimeOut+0x82>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d302      	bcc.n	8006b3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	e015      	b.n	8006b66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d20b      	bcs.n	8006b5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff9b 	bl	8006a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	e004      	b.n	8006b66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b62:	2301      	movs	r3, #1
 8006b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b66:	f000 fe09 	bl	800777c <vPortExitCritical>

	return xReturn;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000e74 	.word	0x20000e74
 8006b78:	20000e88 	.word	0x20000e88

08006b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b80:	4b03      	ldr	r3, [pc, #12]	; (8006b90 <vTaskMissedYield+0x14>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
}
 8006b86:	bf00      	nop
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000e84 	.word	0x20000e84

08006b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b9c:	f000 f852 	bl	8006c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ba0:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <prvIdleTask+0x28>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d9f9      	bls.n	8006b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <prvIdleTask+0x2c>)
 8006baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bb8:	e7f0      	b.n	8006b9c <prvIdleTask+0x8>
 8006bba:	bf00      	nop
 8006bbc:	200009a0 	.word	0x200009a0
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	e00c      	b.n	8006bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <prvInitialiseTaskLists+0x60>)
 8006bdc:	4413      	add	r3, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fbe4 	bl	80053ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3301      	adds	r3, #1
 8006be8:	607b      	str	r3, [r7, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b37      	cmp	r3, #55	; 0x37
 8006bee:	d9ef      	bls.n	8006bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bf0:	480d      	ldr	r0, [pc, #52]	; (8006c28 <prvInitialiseTaskLists+0x64>)
 8006bf2:	f7fe fbdb 	bl	80053ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bf6:	480d      	ldr	r0, [pc, #52]	; (8006c2c <prvInitialiseTaskLists+0x68>)
 8006bf8:	f7fe fbd8 	bl	80053ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bfc:	480c      	ldr	r0, [pc, #48]	; (8006c30 <prvInitialiseTaskLists+0x6c>)
 8006bfe:	f7fe fbd5 	bl	80053ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c02:	480c      	ldr	r0, [pc, #48]	; (8006c34 <prvInitialiseTaskLists+0x70>)
 8006c04:	f7fe fbd2 	bl	80053ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c08:	480b      	ldr	r0, [pc, #44]	; (8006c38 <prvInitialiseTaskLists+0x74>)
 8006c0a:	f7fe fbcf 	bl	80053ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <prvInitialiseTaskLists+0x78>)
 8006c10:	4a05      	ldr	r2, [pc, #20]	; (8006c28 <prvInitialiseTaskLists+0x64>)
 8006c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c14:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <prvInitialiseTaskLists+0x7c>)
 8006c16:	4a05      	ldr	r2, [pc, #20]	; (8006c2c <prvInitialiseTaskLists+0x68>)
 8006c18:	601a      	str	r2, [r3, #0]
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	200009a0 	.word	0x200009a0
 8006c28:	20000e00 	.word	0x20000e00
 8006c2c:	20000e14 	.word	0x20000e14
 8006c30:	20000e30 	.word	0x20000e30
 8006c34:	20000e44 	.word	0x20000e44
 8006c38:	20000e5c 	.word	0x20000e5c
 8006c3c:	20000e28 	.word	0x20000e28
 8006c40:	20000e2c 	.word	0x20000e2c

08006c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c4a:	e019      	b.n	8006c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c4c:	f000 fd66 	bl	800771c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006c50:	4b10      	ldr	r3, [pc, #64]	; (8006c94 <prvCheckTasksWaitingTermination+0x50>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fc2b 	bl	80054b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	4a0b      	ldr	r2, [pc, #44]	; (8006c98 <prvCheckTasksWaitingTermination+0x54>)
 8006c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c76:	f000 fd81 	bl	800777c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f810 	bl	8006ca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <prvCheckTasksWaitingTermination+0x58>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e1      	bne.n	8006c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000e44 	.word	0x20000e44
 8006c98:	20000e70 	.word	0x20000e70
 8006c9c:	20000e58 	.word	0x20000e58

08006ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3354      	adds	r3, #84	; 0x54
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 f8f1 	bl	8007e94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d108      	bne.n	8006cce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 feef 	bl	8007aa4 <vPortFree>
				vPortFree( pxTCB );
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 feec 	bl	8007aa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ccc:	e018      	b.n	8006d00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d103      	bne.n	8006ce0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fee3 	bl	8007aa4 <vPortFree>
	}
 8006cde:	e00f      	b.n	8006d00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d00a      	beq.n	8006d00 <prvDeleteTCB+0x60>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	60fb      	str	r3, [r7, #12]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <prvDeleteTCB+0x5e>
	}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <prvResetNextTaskUnblockTime+0x40>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <prvResetNextTaskUnblockTime+0x14>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e000      	b.n	8006d1e <prvResetNextTaskUnblockTime+0x16>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <prvResetNextTaskUnblockTime+0x44>)
 8006d24:	f04f 32ff 	mov.w	r2, #4294967295
 8006d28:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d2a:	e008      	b.n	8006d3e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <prvResetNextTaskUnblockTime+0x40>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	4a04      	ldr	r2, [pc, #16]	; (8006d4c <prvResetNextTaskUnblockTime+0x44>)
 8006d3c:	6013      	str	r3, [r2, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr
 8006d48:	20000e28 	.word	0x20000e28
 8006d4c:	20000e90 	.word	0x20000e90

08006d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d56:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <xTaskGetSchedulerState+0x34>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	607b      	str	r3, [r7, #4]
 8006d62:	e008      	b.n	8006d76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d64:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <xTaskGetSchedulerState+0x38>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d102      	bne.n	8006d72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	e001      	b.n	8006d76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d72:	2300      	movs	r3, #0
 8006d74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d76:	687b      	ldr	r3, [r7, #4]
	}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000e7c 	.word	0x20000e7c
 8006d88:	20000e98 	.word	0x20000e98

08006d8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d056      	beq.n	8006e50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006da2:	4b2e      	ldr	r3, [pc, #184]	; (8006e5c <xTaskPriorityDisinherit+0xd0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d00a      	beq.n	8006dc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	60fb      	str	r3, [r7, #12]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60bb      	str	r3, [r7, #8]
}
 8006ddc:	bf00      	nop
 8006dde:	e7fe      	b.n	8006dde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de4:	1e5a      	subs	r2, r3, #1
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d02c      	beq.n	8006e50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d128      	bne.n	8006e50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fb58 	bl	80054b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <xTaskPriorityDisinherit+0xd4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d903      	bls.n	8006e30 <xTaskPriorityDisinherit+0xa4>
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	4a0c      	ldr	r2, [pc, #48]	; (8006e60 <xTaskPriorityDisinherit+0xd4>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <xTaskPriorityDisinherit+0xd8>)
 8006e3e:	441a      	add	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fe fadb 	bl	8005402 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e50:	697b      	ldr	r3, [r7, #20]
	}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2000099c 	.word	0x2000099c
 8006e60:	20000e78 	.word	0x20000e78
 8006e64:	200009a0 	.word	0x200009a0

08006e68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e72:	4b21      	ldr	r3, [pc, #132]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e78:	4b20      	ldr	r3, [pc, #128]	; (8006efc <prvAddCurrentTaskToDelayedList+0x94>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fb1a 	bl	80054b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8a:	d10a      	bne.n	8006ea2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e92:	4b1a      	ldr	r3, [pc, #104]	; (8006efc <prvAddCurrentTaskToDelayedList+0x94>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4819      	ldr	r0, [pc, #100]	; (8006f00 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e9c:	f7fe fab1 	bl	8005402 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ea0:	e026      	b.n	8006ef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <prvAddCurrentTaskToDelayedList+0x94>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d209      	bcs.n	8006ece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eba:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	f7fe fabe 	bl	8005448 <vListInsert>
}
 8006ecc:	e010      	b.n	8006ef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ece:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe fab4 	bl	8005448 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d202      	bcs.n	8006ef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006eea:	4a08      	ldr	r2, [pc, #32]	; (8006f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6013      	str	r3, [r2, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000e74 	.word	0x20000e74
 8006efc:	2000099c 	.word	0x2000099c
 8006f00:	20000e5c 	.word	0x20000e5c
 8006f04:	20000e2c 	.word	0x20000e2c
 8006f08:	20000e28 	.word	0x20000e28
 8006f0c:	20000e90 	.word	0x20000e90

08006f10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	; 0x28
 8006f14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f1a:	f000 facb 	bl	80074b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f1e:	4b1c      	ldr	r3, [pc, #112]	; (8006f90 <xTimerCreateTimerTask+0x80>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d021      	beq.n	8006f6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f2e:	1d3a      	adds	r2, r7, #4
 8006f30:	f107 0108 	add.w	r1, r7, #8
 8006f34:	f107 030c 	add.w	r3, r7, #12
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fa1d 	bl	8005378 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	9202      	str	r2, [sp, #8]
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	2302      	movs	r3, #2
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	460a      	mov	r2, r1
 8006f50:	4910      	ldr	r1, [pc, #64]	; (8006f94 <xTimerCreateTimerTask+0x84>)
 8006f52:	4811      	ldr	r0, [pc, #68]	; (8006f98 <xTimerCreateTimerTask+0x88>)
 8006f54:	f7ff f8b6 	bl	80060c4 <xTaskCreateStatic>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	4a10      	ldr	r2, [pc, #64]	; (8006f9c <xTimerCreateTimerTask+0x8c>)
 8006f5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <xTimerCreateTimerTask+0x8c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f66:	2301      	movs	r3, #1
 8006f68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	613b      	str	r3, [r7, #16]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f86:	697b      	ldr	r3, [r7, #20]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000ecc 	.word	0x20000ecc
 8006f94:	08008798 	.word	0x08008798
 8006f98:	080070bd 	.word	0x080070bd
 8006f9c:	20000ed0 	.word	0x20000ed0

08006fa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	623b      	str	r3, [r7, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fce:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <xTimerGenericCommand+0x98>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d02a      	beq.n	800702c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b05      	cmp	r3, #5
 8006fe6:	dc18      	bgt.n	800701a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fe8:	f7ff feb2 	bl	8006d50 <xTaskGetSchedulerState>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d109      	bne.n	8007006 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ff2:	4b11      	ldr	r3, [pc, #68]	; (8007038 <xTimerGenericCommand+0x98>)
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	f107 0110 	add.w	r1, r7, #16
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffe:	f7fe fbc5 	bl	800578c <xQueueGenericSend>
 8007002:	6278      	str	r0, [r7, #36]	; 0x24
 8007004:	e012      	b.n	800702c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <xTimerGenericCommand+0x98>)
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	f107 0110 	add.w	r1, r7, #16
 800700e:	2300      	movs	r3, #0
 8007010:	2200      	movs	r2, #0
 8007012:	f7fe fbbb 	bl	800578c <xQueueGenericSend>
 8007016:	6278      	str	r0, [r7, #36]	; 0x24
 8007018:	e008      	b.n	800702c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800701a:	4b07      	ldr	r3, [pc, #28]	; (8007038 <xTimerGenericCommand+0x98>)
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	f107 0110 	add.w	r1, r7, #16
 8007022:	2300      	movs	r3, #0
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	f7fe fcaf 	bl	8005988 <xQueueGenericSendFromISR>
 800702a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800702e:	4618      	mov	r0, r3
 8007030:	3728      	adds	r7, #40	; 0x28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20000ecc 	.word	0x20000ecc

0800703c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af02      	add	r7, sp, #8
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007046:	4b1c      	ldr	r3, [pc, #112]	; (80070b8 <prvProcessExpiredTimer+0x7c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	3304      	adds	r3, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fa2f 	bl	80054b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d122      	bne.n	80070a8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	699a      	ldr	r2, [r3, #24]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	18d1      	adds	r1, r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	6978      	ldr	r0, [r7, #20]
 8007070:	f000 f8c8 	bl	8007204 <prvInsertTimerInActiveList>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d016      	beq.n	80070a8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800707a:	2300      	movs	r3, #0
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2300      	movs	r3, #0
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	2100      	movs	r1, #0
 8007084:	6978      	ldr	r0, [r7, #20]
 8007086:	f7ff ff8b 	bl	8006fa0 <xTimerGenericCommand>
 800708a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60fb      	str	r3, [r7, #12]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	6978      	ldr	r0, [r7, #20]
 80070ae:	4798      	blx	r3
}
 80070b0:	bf00      	nop
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000ec4 	.word	0x20000ec4

080070bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070c4:	f107 0308 	add.w	r3, r7, #8
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f857 	bl	800717c <prvGetNextExpireTime>
 80070ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4619      	mov	r1, r3
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f803 	bl	80070e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070da:	f000 f8d5 	bl	8007288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070de:	e7f1      	b.n	80070c4 <prvTimerTask+0x8>

080070e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070ea:	f7ff fa3f 	bl	800656c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f866 	bl	80071c4 <prvSampleTimeNow>
 80070f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d130      	bne.n	8007162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <prvProcessTimerOrBlockTask+0x3c>
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	429a      	cmp	r2, r3
 800710c:	d806      	bhi.n	800711c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800710e:	f7ff fa3b 	bl	8006588 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff ff91 	bl	800703c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800711a:	e024      	b.n	8007166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007122:	4b13      	ldr	r3, [pc, #76]	; (8007170 <prvProcessTimerOrBlockTask+0x90>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007134:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <prvProcessTimerOrBlockTask+0x94>)
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4619      	mov	r1, r3
 8007142:	f7fe ff8b 	bl	800605c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007146:	f7ff fa1f 	bl	8006588 <xTaskResumeAll>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007150:	4b09      	ldr	r3, [pc, #36]	; (8007178 <prvProcessTimerOrBlockTask+0x98>)
 8007152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	f3bf 8f6f 	isb	sy
}
 8007160:	e001      	b.n	8007166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007162:	f7ff fa11 	bl	8006588 <xTaskResumeAll>
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000ec8 	.word	0x20000ec8
 8007174:	20000ecc 	.word	0x20000ecc
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <prvGetNextExpireTime+0x44>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	bf0c      	ite	eq
 800718e:	2301      	moveq	r3, #1
 8007190:	2300      	movne	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d105      	bne.n	80071ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071a2:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <prvGetNextExpireTime+0x44>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	e001      	b.n	80071b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071b2:	68fb      	ldr	r3, [r7, #12]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000ec4 	.word	0x20000ec4

080071c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071cc:	f7ff fa7a 	bl	80066c4 <xTaskGetTickCount>
 80071d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <prvSampleTimeNow+0x3c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d205      	bcs.n	80071e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071dc:	f000 f908 	bl	80073f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e002      	b.n	80071ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071ee:	4a04      	ldr	r2, [pc, #16]	; (8007200 <prvSampleTimeNow+0x3c>)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071f4:	68fb      	ldr	r3, [r7, #12]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000ed4 	.word	0x20000ed4

08007204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	429a      	cmp	r2, r3
 8007228:	d812      	bhi.n	8007250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	429a      	cmp	r2, r3
 8007236:	d302      	bcc.n	800723e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007238:	2301      	movs	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	e01b      	b.n	8007276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800723e:	4b10      	ldr	r3, [pc, #64]	; (8007280 <prvInsertTimerInActiveList+0x7c>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3304      	adds	r3, #4
 8007246:	4619      	mov	r1, r3
 8007248:	4610      	mov	r0, r2
 800724a:	f7fe f8fd 	bl	8005448 <vListInsert>
 800724e:	e012      	b.n	8007276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d206      	bcs.n	8007266 <prvInsertTimerInActiveList+0x62>
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d302      	bcc.n	8007266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007260:	2301      	movs	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	e007      	b.n	8007276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007266:	4b07      	ldr	r3, [pc, #28]	; (8007284 <prvInsertTimerInActiveList+0x80>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3304      	adds	r3, #4
 800726e:	4619      	mov	r1, r3
 8007270:	4610      	mov	r0, r2
 8007272:	f7fe f8e9 	bl	8005448 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007276:	697b      	ldr	r3, [r7, #20]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20000ec8 	.word	0x20000ec8
 8007284:	20000ec4 	.word	0x20000ec4

08007288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08e      	sub	sp, #56	; 0x38
 800728c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800728e:	e09d      	b.n	80073cc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	da18      	bge.n	80072c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007296:	1d3b      	adds	r3, r7, #4
 8007298:	3304      	adds	r3, #4
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10a      	bne.n	80072b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	61fb      	str	r3, [r7, #28]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072be:	6850      	ldr	r0, [r2, #4]
 80072c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c2:	6892      	ldr	r2, [r2, #8]
 80072c4:	4611      	mov	r1, r2
 80072c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	db7d      	blt.n	80073ca <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	3304      	adds	r3, #4
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe f8ea 	bl	80054b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072e4:	463b      	mov	r3, r7
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ff6c 	bl	80071c4 <prvSampleTimeNow>
 80072ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	d86b      	bhi.n	80073cc <prvProcessReceivedCommands+0x144>
 80072f4:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <prvProcessReceivedCommands+0x74>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	08007325 	.word	0x08007325
 8007300:	08007325 	.word	0x08007325
 8007304:	08007325 	.word	0x08007325
 8007308:	080073cd 	.word	0x080073cd
 800730c:	08007381 	.word	0x08007381
 8007310:	080073b9 	.word	0x080073b9
 8007314:	08007325 	.word	0x08007325
 8007318:	08007325 	.word	0x08007325
 800731c:	080073cd 	.word	0x080073cd
 8007320:	08007381 	.word	0x08007381
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	18d1      	adds	r1, r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007332:	f7ff ff67 	bl	8007204 <prvInsertTimerInActiveList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d047      	beq.n	80073cc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007342:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d13f      	bne.n	80073cc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	441a      	add	r2, r3
 8007354:	2300      	movs	r3, #0
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	2300      	movs	r3, #0
 800735a:	2100      	movs	r1, #0
 800735c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735e:	f7ff fe1f 	bl	8006fa0 <xTimerGenericCommand>
 8007362:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d130      	bne.n	80073cc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	61bb      	str	r3, [r7, #24]
}
 800737c:	bf00      	nop
 800737e:	e7fe      	b.n	800737e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	617b      	str	r3, [r7, #20]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	18d1      	adds	r1, r2, r3
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073b2:	f7ff ff27 	bl	8007204 <prvInsertTimerInActiveList>
					break;
 80073b6:	e009      	b.n	80073cc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80073c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c4:	f000 fb6e 	bl	8007aa4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073c8:	e000      	b.n	80073cc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80073ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073cc:	4b07      	ldr	r3, [pc, #28]	; (80073ec <prvProcessReceivedCommands+0x164>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	1d39      	adds	r1, r7, #4
 80073d2:	2200      	movs	r2, #0
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fb6f 	bl	8005ab8 <xQueueReceive>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f47f af57 	bne.w	8007290 <prvProcessReceivedCommands+0x8>
	}
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	3730      	adds	r7, #48	; 0x30
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000ecc 	.word	0x20000ecc

080073f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073f6:	e045      	b.n	8007484 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073f8:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <prvSwitchTimerLists+0xbc>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007402:	4b2a      	ldr	r3, [pc, #168]	; (80074ac <prvSwitchTimerLists+0xbc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3304      	adds	r3, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe f851 	bl	80054b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d12e      	bne.n	8007484 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4413      	add	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	429a      	cmp	r2, r3
 8007436:	d90e      	bls.n	8007456 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007444:	4b19      	ldr	r3, [pc, #100]	; (80074ac <prvSwitchTimerLists+0xbc>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3304      	adds	r3, #4
 800744c:	4619      	mov	r1, r3
 800744e:	4610      	mov	r0, r2
 8007450:	f7fd fffa 	bl	8005448 <vListInsert>
 8007454:	e016      	b.n	8007484 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007456:	2300      	movs	r3, #0
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	2100      	movs	r1, #0
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff fd9d 	bl	8006fa0 <xTimerGenericCommand>
 8007466:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <prvSwitchTimerLists+0x94>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	603b      	str	r3, [r7, #0]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007484:	4b09      	ldr	r3, [pc, #36]	; (80074ac <prvSwitchTimerLists+0xbc>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1b4      	bne.n	80073f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <prvSwitchTimerLists+0xbc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007494:	4b06      	ldr	r3, [pc, #24]	; (80074b0 <prvSwitchTimerLists+0xc0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a04      	ldr	r2, [pc, #16]	; (80074ac <prvSwitchTimerLists+0xbc>)
 800749a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800749c:	4a04      	ldr	r2, [pc, #16]	; (80074b0 <prvSwitchTimerLists+0xc0>)
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	6013      	str	r3, [r2, #0]
}
 80074a2:	bf00      	nop
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000ec4 	.word	0x20000ec4
 80074b0:	20000ec8 	.word	0x20000ec8

080074b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074ba:	f000 f92f 	bl	800771c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <prvCheckForValidListAndQueue+0x60>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d120      	bne.n	8007508 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074c6:	4814      	ldr	r0, [pc, #80]	; (8007518 <prvCheckForValidListAndQueue+0x64>)
 80074c8:	f7fd ff70 	bl	80053ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074cc:	4813      	ldr	r0, [pc, #76]	; (800751c <prvCheckForValidListAndQueue+0x68>)
 80074ce:	f7fd ff6d 	bl	80053ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <prvCheckForValidListAndQueue+0x6c>)
 80074d4:	4a10      	ldr	r2, [pc, #64]	; (8007518 <prvCheckForValidListAndQueue+0x64>)
 80074d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <prvCheckForValidListAndQueue+0x70>)
 80074da:	4a10      	ldr	r2, [pc, #64]	; (800751c <prvCheckForValidListAndQueue+0x68>)
 80074dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074de:	2300      	movs	r3, #0
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	4b11      	ldr	r3, [pc, #68]	; (8007528 <prvCheckForValidListAndQueue+0x74>)
 80074e4:	4a11      	ldr	r2, [pc, #68]	; (800752c <prvCheckForValidListAndQueue+0x78>)
 80074e6:	2110      	movs	r1, #16
 80074e8:	200a      	movs	r0, #10
 80074ea:	f7fe f877 	bl	80055dc <xQueueGenericCreateStatic>
 80074ee:	4603      	mov	r3, r0
 80074f0:	4a08      	ldr	r2, [pc, #32]	; (8007514 <prvCheckForValidListAndQueue+0x60>)
 80074f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074f4:	4b07      	ldr	r3, [pc, #28]	; (8007514 <prvCheckForValidListAndQueue+0x60>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <prvCheckForValidListAndQueue+0x60>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	490b      	ldr	r1, [pc, #44]	; (8007530 <prvCheckForValidListAndQueue+0x7c>)
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fd82 	bl	800600c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007508:	f000 f938 	bl	800777c <vPortExitCritical>
}
 800750c:	bf00      	nop
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000ecc 	.word	0x20000ecc
 8007518:	20000e9c 	.word	0x20000e9c
 800751c:	20000eb0 	.word	0x20000eb0
 8007520:	20000ec4 	.word	0x20000ec4
 8007524:	20000ec8 	.word	0x20000ec8
 8007528:	20000f78 	.word	0x20000f78
 800752c:	20000ed8 	.word	0x20000ed8
 8007530:	080087a0 	.word	0x080087a0

08007534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3b04      	subs	r3, #4
 8007544:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800754c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3b04      	subs	r3, #4
 8007552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f023 0201 	bic.w	r2, r3, #1
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3b04      	subs	r3, #4
 8007562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007564:	4a08      	ldr	r2, [pc, #32]	; (8007588 <pxPortInitialiseStack+0x54>)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3b14      	subs	r3, #20
 800756e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3b20      	subs	r3, #32
 800757a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800757c:	68fb      	ldr	r3, [r7, #12]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr
 8007588:	0800758d 	.word	0x0800758d

0800758c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007592:	2300      	movs	r3, #0
 8007594:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007596:	4b12      	ldr	r3, [pc, #72]	; (80075e0 <prvTaskExitError+0x54>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d00a      	beq.n	80075b6 <prvTaskExitError+0x2a>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	60fb      	str	r3, [r7, #12]
}
 80075b2:	bf00      	nop
 80075b4:	e7fe      	b.n	80075b4 <prvTaskExitError+0x28>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60bb      	str	r3, [r7, #8]
}
 80075c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075ca:	bf00      	nop
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0fc      	beq.n	80075cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075d2:	bf00      	nop
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000024 	.word	0x20000024
	...

080075f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <pxCurrentTCBConst2>)
 80075f2:	6819      	ldr	r1, [r3, #0]
 80075f4:	6808      	ldr	r0, [r1, #0]
 80075f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075fa:	f380 8809 	msr	PSP, r0
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8811 	msr	BASEPRI, r0
 800760a:	f04e 0e0d 	orr.w	lr, lr, #13
 800760e:	4770      	bx	lr

08007610 <pxCurrentTCBConst2>:
 8007610:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007618:	4806      	ldr	r0, [pc, #24]	; (8007634 <prvPortStartFirstTask+0x1c>)
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f380 8808 	msr	MSP, r0
 8007622:	b662      	cpsie	i
 8007624:	b661      	cpsie	f
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	df00      	svc	0
 8007630:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007632:	bf00      	nop
 8007634:	e000ed08 	.word	0xe000ed08

08007638 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800763e:	4b32      	ldr	r3, [pc, #200]	; (8007708 <xPortStartScheduler+0xd0>)
 8007640:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	22ff      	movs	r2, #255	; 0xff
 800764e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007660:	b2da      	uxtb	r2, r3
 8007662:	4b2a      	ldr	r3, [pc, #168]	; (800770c <xPortStartScheduler+0xd4>)
 8007664:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007666:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <xPortStartScheduler+0xd8>)
 8007668:	2207      	movs	r2, #7
 800766a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800766c:	e009      	b.n	8007682 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800766e:	4b28      	ldr	r3, [pc, #160]	; (8007710 <xPortStartScheduler+0xd8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3b01      	subs	r3, #1
 8007674:	4a26      	ldr	r2, [pc, #152]	; (8007710 <xPortStartScheduler+0xd8>)
 8007676:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768a:	2b80      	cmp	r3, #128	; 0x80
 800768c:	d0ef      	beq.n	800766e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800768e:	4b20      	ldr	r3, [pc, #128]	; (8007710 <xPortStartScheduler+0xd8>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f1c3 0307 	rsb	r3, r3, #7
 8007696:	2b04      	cmp	r3, #4
 8007698:	d00a      	beq.n	80076b0 <xPortStartScheduler+0x78>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60bb      	str	r3, [r7, #8]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076b0:	4b17      	ldr	r3, [pc, #92]	; (8007710 <xPortStartScheduler+0xd8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	4a16      	ldr	r2, [pc, #88]	; (8007710 <xPortStartScheduler+0xd8>)
 80076b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076ba:	4b15      	ldr	r3, [pc, #84]	; (8007710 <xPortStartScheduler+0xd8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076c2:	4a13      	ldr	r2, [pc, #76]	; (8007710 <xPortStartScheduler+0xd8>)
 80076c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076ce:	4b11      	ldr	r3, [pc, #68]	; (8007714 <xPortStartScheduler+0xdc>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <xPortStartScheduler+0xdc>)
 80076d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076da:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <xPortStartScheduler+0xdc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a0d      	ldr	r2, [pc, #52]	; (8007714 <xPortStartScheduler+0xdc>)
 80076e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076e6:	f000 f8b9 	bl	800785c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076ea:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <xPortStartScheduler+0xe0>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076f0:	f7ff ff92 	bl	8007618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076f4:	f7ff f8b2 	bl	800685c <vTaskSwitchContext>
	prvTaskExitError();
 80076f8:	f7ff ff48 	bl	800758c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	e000e400 	.word	0xe000e400
 800770c:	20000fc8 	.word	0x20000fc8
 8007710:	20000fcc 	.word	0x20000fcc
 8007714:	e000ed20 	.word	0xe000ed20
 8007718:	20000024 	.word	0x20000024

0800771c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	607b      	str	r3, [r7, #4]
}
 8007734:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007736:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <vPortEnterCritical+0x58>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3301      	adds	r3, #1
 800773c:	4a0d      	ldr	r2, [pc, #52]	; (8007774 <vPortEnterCritical+0x58>)
 800773e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007740:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <vPortEnterCritical+0x58>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d10f      	bne.n	8007768 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <vPortEnterCritical+0x5c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00a      	beq.n	8007768 <vPortEnterCritical+0x4c>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	603b      	str	r3, [r7, #0]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <vPortEnterCritical+0x4a>
	}
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000024 	.word	0x20000024
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007782:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <vPortExitCritical+0x4c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <vPortExitCritical+0x24>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	607b      	str	r3, [r7, #4]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077a0:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <vPortExitCritical+0x4c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <vPortExitCritical+0x4c>)
 80077a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <vPortExitCritical+0x4c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <vPortExitCritical+0x42>
 80077b2:	2300      	movs	r3, #0
 80077b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	f383 8811 	msr	BASEPRI, r3
}
 80077bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr
 80077c8:	20000024 	.word	0x20000024
 80077cc:	00000000 	.word	0x00000000

080077d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077d0:	f3ef 8009 	mrs	r0, PSP
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <pxCurrentTCBConst>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077e0:	6010      	str	r0, [r2, #0]
 80077e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80077e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077ea:	f380 8811 	msr	BASEPRI, r0
 80077ee:	f7ff f835 	bl	800685c <vTaskSwitchContext>
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8811 	msr	BASEPRI, r0
 80077fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80077fe:	6819      	ldr	r1, [r3, #0]
 8007800:	6808      	ldr	r0, [r1, #0]
 8007802:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007806:	f380 8809 	msr	PSP, r0
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	4770      	bx	lr

08007810 <pxCurrentTCBConst>:
 8007810:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007832:	f7fe ff55 	bl	80066e0 <xTaskIncrementTick>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <xPortSysTickHandler+0x40>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
}
 800784e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007860:	4b0a      	ldr	r3, [pc, #40]	; (800788c <vPortSetupTimerInterrupt+0x30>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <vPortSetupTimerInterrupt+0x38>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a09      	ldr	r2, [pc, #36]	; (8007898 <vPortSetupTimerInterrupt+0x3c>)
 8007872:	fba2 2303 	umull	r2, r3, r2, r3
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	4a08      	ldr	r2, [pc, #32]	; (800789c <vPortSetupTimerInterrupt+0x40>)
 800787a:	3b01      	subs	r3, #1
 800787c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800787e:	4b03      	ldr	r3, [pc, #12]	; (800788c <vPortSetupTimerInterrupt+0x30>)
 8007880:	2207      	movs	r2, #7
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr
 800788c:	e000e010 	.word	0xe000e010
 8007890:	e000e018 	.word	0xe000e018
 8007894:	20000000 	.word	0x20000000
 8007898:	10624dd3 	.word	0x10624dd3
 800789c:	e000e014 	.word	0xe000e014

080078a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078a6:	f3ef 8305 	mrs	r3, IPSR
 80078aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b0f      	cmp	r3, #15
 80078b0:	d914      	bls.n	80078dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078b2:	4a16      	ldr	r2, [pc, #88]	; (800790c <vPortValidateInterruptPriority+0x6c>)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078bc:	4b14      	ldr	r3, [pc, #80]	; (8007910 <vPortValidateInterruptPriority+0x70>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	7afa      	ldrb	r2, [r7, #11]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d20a      	bcs.n	80078dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	607b      	str	r3, [r7, #4]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078dc:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <vPortValidateInterruptPriority+0x74>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <vPortValidateInterruptPriority+0x78>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d90a      	bls.n	8007902 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	603b      	str	r3, [r7, #0]
}
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <vPortValidateInterruptPriority+0x60>
	}
 8007902:	bf00      	nop
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr
 800790c:	e000e3f0 	.word	0xe000e3f0
 8007910:	20000fc8 	.word	0x20000fc8
 8007914:	e000ed0c 	.word	0xe000ed0c
 8007918:	20000fcc 	.word	0x20000fcc

0800791c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08a      	sub	sp, #40	; 0x28
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007924:	2300      	movs	r3, #0
 8007926:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007928:	f7fe fe20 	bl	800656c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800792c:	4b58      	ldr	r3, [pc, #352]	; (8007a90 <pvPortMalloc+0x174>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007934:	f000 f910 	bl	8007b58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007938:	4b56      	ldr	r3, [pc, #344]	; (8007a94 <pvPortMalloc+0x178>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4013      	ands	r3, r2
 8007940:	2b00      	cmp	r3, #0
 8007942:	f040 808e 	bne.w	8007a62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01d      	beq.n	8007988 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800794c:	2208      	movs	r2, #8
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4413      	add	r3, r2
 8007952:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d014      	beq.n	8007988 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f023 0307 	bic.w	r3, r3, #7
 8007964:	3308      	adds	r3, #8
 8007966:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <pvPortMalloc+0x6c>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	617b      	str	r3, [r7, #20]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d069      	beq.n	8007a62 <pvPortMalloc+0x146>
 800798e:	4b42      	ldr	r3, [pc, #264]	; (8007a98 <pvPortMalloc+0x17c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	429a      	cmp	r2, r3
 8007996:	d864      	bhi.n	8007a62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007998:	4b40      	ldr	r3, [pc, #256]	; (8007a9c <pvPortMalloc+0x180>)
 800799a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800799c:	4b3f      	ldr	r3, [pc, #252]	; (8007a9c <pvPortMalloc+0x180>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079a2:	e004      	b.n	80079ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d903      	bls.n	80079c0 <pvPortMalloc+0xa4>
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1f1      	bne.n	80079a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079c0:	4b33      	ldr	r3, [pc, #204]	; (8007a90 <pvPortMalloc+0x174>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d04b      	beq.n	8007a62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2208      	movs	r2, #8
 80079d0:	4413      	add	r3, r2
 80079d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	1ad2      	subs	r2, r2, r3
 80079e4:	2308      	movs	r3, #8
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d91f      	bls.n	8007a2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4413      	add	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <pvPortMalloc+0xf8>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	613b      	str	r3, [r7, #16]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a26:	69b8      	ldr	r0, [r7, #24]
 8007a28:	f000 f8f8 	bl	8007c1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a2c:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <pvPortMalloc+0x17c>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <pvPortMalloc+0x17c>)
 8007a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a3a:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <pvPortMalloc+0x17c>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	4b18      	ldr	r3, [pc, #96]	; (8007aa0 <pvPortMalloc+0x184>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d203      	bcs.n	8007a4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <pvPortMalloc+0x17c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <pvPortMalloc+0x184>)
 8007a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <pvPortMalloc+0x178>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a62:	f7fe fd91 	bl	8006588 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <pvPortMalloc+0x16a>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60fb      	str	r3, [r7, #12]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <pvPortMalloc+0x168>
	return pvReturn;
 8007a86:	69fb      	ldr	r3, [r7, #28]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3728      	adds	r7, #40	; 0x28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	20001bd8 	.word	0x20001bd8
 8007a94:	20001be4 	.word	0x20001be4
 8007a98:	20001bdc 	.word	0x20001bdc
 8007a9c:	20001bd0 	.word	0x20001bd0
 8007aa0:	20001be0 	.word	0x20001be0

08007aa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d048      	beq.n	8007b48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	425b      	negs	r3, r3
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4413      	add	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	4b21      	ldr	r3, [pc, #132]	; (8007b50 <vPortFree+0xac>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <vPortFree+0x44>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60fb      	str	r3, [r7, #12]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <vPortFree+0x62>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	60bb      	str	r3, [r7, #8]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	4b11      	ldr	r3, [pc, #68]	; (8007b50 <vPortFree+0xac>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d019      	beq.n	8007b48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d115      	bne.n	8007b48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vPortFree+0xac>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	43db      	mvns	r3, r3
 8007b26:	401a      	ands	r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b2c:	f7fe fd1e 	bl	800656c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <vPortFree+0xb0>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4413      	add	r3, r2
 8007b3a:	4a06      	ldr	r2, [pc, #24]	; (8007b54 <vPortFree+0xb0>)
 8007b3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b3e:	6938      	ldr	r0, [r7, #16]
 8007b40:	f000 f86c 	bl	8007c1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b44:	f7fe fd20 	bl	8006588 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b48:	bf00      	nop
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20001be4 	.word	0x20001be4
 8007b54:	20001bdc 	.word	0x20001bdc

08007b58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007b62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b64:	4b27      	ldr	r3, [pc, #156]	; (8007c04 <prvHeapInit+0xac>)
 8007b66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3307      	adds	r3, #7
 8007b76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0307 	bic.w	r3, r3, #7
 8007b7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	4a1f      	ldr	r2, [pc, #124]	; (8007c04 <prvHeapInit+0xac>)
 8007b88:	4413      	add	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b90:	4a1d      	ldr	r2, [pc, #116]	; (8007c08 <prvHeapInit+0xb0>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b96:	4b1c      	ldr	r3, [pc, #112]	; (8007c08 <prvHeapInit+0xb0>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ba4:	2208      	movs	r2, #8
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0307 	bic.w	r3, r3, #7
 8007bb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <prvHeapInit+0xb4>)
 8007bb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bba:	4b14      	ldr	r3, [pc, #80]	; (8007c0c <prvHeapInit+0xb4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bc2:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <prvHeapInit+0xb4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	1ad2      	subs	r2, r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <prvHeapInit+0xb4>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4a0a      	ldr	r2, [pc, #40]	; (8007c10 <prvHeapInit+0xb8>)
 8007be6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <prvHeapInit+0xbc>)
 8007bee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bf0:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <prvHeapInit+0xc0>)
 8007bf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bf6:	601a      	str	r2, [r3, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20000fd0 	.word	0x20000fd0
 8007c08:	20001bd0 	.word	0x20001bd0
 8007c0c:	20001bd8 	.word	0x20001bd8
 8007c10:	20001be0 	.word	0x20001be0
 8007c14:	20001bdc 	.word	0x20001bdc
 8007c18:	20001be4 	.word	0x20001be4

08007c1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c24:	4b27      	ldr	r3, [pc, #156]	; (8007cc4 <prvInsertBlockIntoFreeList+0xa8>)
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	e002      	b.n	8007c30 <prvInsertBlockIntoFreeList+0x14>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d8f7      	bhi.n	8007c2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	4413      	add	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d108      	bne.n	8007c5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	441a      	add	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	441a      	add	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d118      	bne.n	8007ca4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b14      	ldr	r3, [pc, #80]	; (8007cc8 <prvInsertBlockIntoFreeList+0xac>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d00d      	beq.n	8007c9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	441a      	add	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e008      	b.n	8007cac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <prvInsertBlockIntoFreeList+0xac>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	e003      	b.n	8007cac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d002      	beq.n	8007cba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bc80      	pop	{r7}
 8007cc2:	4770      	bx	lr
 8007cc4:	20001bd0 	.word	0x20001bd0
 8007cc8:	20001bd8 	.word	0x20001bd8

08007ccc <__errno>:
 8007ccc:	4b01      	ldr	r3, [pc, #4]	; (8007cd4 <__errno+0x8>)
 8007cce:	6818      	ldr	r0, [r3, #0]
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20000028 	.word	0x20000028

08007cd8 <__libc_init_array>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	2600      	movs	r6, #0
 8007cdc:	4d0c      	ldr	r5, [pc, #48]	; (8007d10 <__libc_init_array+0x38>)
 8007cde:	4c0d      	ldr	r4, [pc, #52]	; (8007d14 <__libc_init_array+0x3c>)
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	42a6      	cmp	r6, r4
 8007ce6:	d109      	bne.n	8007cfc <__libc_init_array+0x24>
 8007ce8:	f000 fd06 	bl	80086f8 <_init>
 8007cec:	2600      	movs	r6, #0
 8007cee:	4d0a      	ldr	r5, [pc, #40]	; (8007d18 <__libc_init_array+0x40>)
 8007cf0:	4c0a      	ldr	r4, [pc, #40]	; (8007d1c <__libc_init_array+0x44>)
 8007cf2:	1b64      	subs	r4, r4, r5
 8007cf4:	10a4      	asrs	r4, r4, #2
 8007cf6:	42a6      	cmp	r6, r4
 8007cf8:	d105      	bne.n	8007d06 <__libc_init_array+0x2e>
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d00:	4798      	blx	r3
 8007d02:	3601      	adds	r6, #1
 8007d04:	e7ee      	b.n	8007ce4 <__libc_init_array+0xc>
 8007d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0a:	4798      	blx	r3
 8007d0c:	3601      	adds	r6, #1
 8007d0e:	e7f2      	b.n	8007cf6 <__libc_init_array+0x1e>
 8007d10:	0800963c 	.word	0x0800963c
 8007d14:	0800963c 	.word	0x0800963c
 8007d18:	0800963c 	.word	0x0800963c
 8007d1c:	08009640 	.word	0x08009640

08007d20 <__retarget_lock_acquire_recursive>:
 8007d20:	4770      	bx	lr

08007d22 <__retarget_lock_release_recursive>:
 8007d22:	4770      	bx	lr

08007d24 <memcpy>:
 8007d24:	440a      	add	r2, r1
 8007d26:	4291      	cmp	r1, r2
 8007d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d2c:	d100      	bne.n	8007d30 <memcpy+0xc>
 8007d2e:	4770      	bx	lr
 8007d30:	b510      	push	{r4, lr}
 8007d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d36:	4291      	cmp	r1, r2
 8007d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d3c:	d1f9      	bne.n	8007d32 <memcpy+0xe>
 8007d3e:	bd10      	pop	{r4, pc}

08007d40 <memset>:
 8007d40:	4603      	mov	r3, r0
 8007d42:	4402      	add	r2, r0
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d100      	bne.n	8007d4a <memset+0xa>
 8007d48:	4770      	bx	lr
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	e7f9      	b.n	8007d44 <memset+0x4>

08007d50 <sbrk_aligned>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	4e0e      	ldr	r6, [pc, #56]	; (8007d8c <sbrk_aligned+0x3c>)
 8007d54:	460c      	mov	r4, r1
 8007d56:	6831      	ldr	r1, [r6, #0]
 8007d58:	4605      	mov	r5, r0
 8007d5a:	b911      	cbnz	r1, 8007d62 <sbrk_aligned+0x12>
 8007d5c:	f000 f8f6 	bl	8007f4c <_sbrk_r>
 8007d60:	6030      	str	r0, [r6, #0]
 8007d62:	4621      	mov	r1, r4
 8007d64:	4628      	mov	r0, r5
 8007d66:	f000 f8f1 	bl	8007f4c <_sbrk_r>
 8007d6a:	1c43      	adds	r3, r0, #1
 8007d6c:	d00a      	beq.n	8007d84 <sbrk_aligned+0x34>
 8007d6e:	1cc4      	adds	r4, r0, #3
 8007d70:	f024 0403 	bic.w	r4, r4, #3
 8007d74:	42a0      	cmp	r0, r4
 8007d76:	d007      	beq.n	8007d88 <sbrk_aligned+0x38>
 8007d78:	1a21      	subs	r1, r4, r0
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f000 f8e6 	bl	8007f4c <_sbrk_r>
 8007d80:	3001      	adds	r0, #1
 8007d82:	d101      	bne.n	8007d88 <sbrk_aligned+0x38>
 8007d84:	f04f 34ff 	mov.w	r4, #4294967295
 8007d88:	4620      	mov	r0, r4
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	20001bf0 	.word	0x20001bf0

08007d90 <_malloc_r>:
 8007d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d94:	1ccd      	adds	r5, r1, #3
 8007d96:	f025 0503 	bic.w	r5, r5, #3
 8007d9a:	3508      	adds	r5, #8
 8007d9c:	2d0c      	cmp	r5, #12
 8007d9e:	bf38      	it	cc
 8007da0:	250c      	movcc	r5, #12
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	4607      	mov	r7, r0
 8007da6:	db01      	blt.n	8007dac <_malloc_r+0x1c>
 8007da8:	42a9      	cmp	r1, r5
 8007daa:	d905      	bls.n	8007db8 <_malloc_r+0x28>
 8007dac:	230c      	movs	r3, #12
 8007dae:	2600      	movs	r6, #0
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4630      	mov	r0, r6
 8007db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db8:	4e2e      	ldr	r6, [pc, #184]	; (8007e74 <_malloc_r+0xe4>)
 8007dba:	f000 f8f7 	bl	8007fac <__malloc_lock>
 8007dbe:	6833      	ldr	r3, [r6, #0]
 8007dc0:	461c      	mov	r4, r3
 8007dc2:	bb34      	cbnz	r4, 8007e12 <_malloc_r+0x82>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f7ff ffc2 	bl	8007d50 <sbrk_aligned>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	4604      	mov	r4, r0
 8007dd0:	d14d      	bne.n	8007e6e <_malloc_r+0xde>
 8007dd2:	6834      	ldr	r4, [r6, #0]
 8007dd4:	4626      	mov	r6, r4
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	d140      	bne.n	8007e5c <_malloc_r+0xcc>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4638      	mov	r0, r7
 8007de0:	eb04 0803 	add.w	r8, r4, r3
 8007de4:	f000 f8b2 	bl	8007f4c <_sbrk_r>
 8007de8:	4580      	cmp	r8, r0
 8007dea:	d13a      	bne.n	8007e62 <_malloc_r+0xd2>
 8007dec:	6821      	ldr	r1, [r4, #0]
 8007dee:	3503      	adds	r5, #3
 8007df0:	1a6d      	subs	r5, r5, r1
 8007df2:	f025 0503 	bic.w	r5, r5, #3
 8007df6:	3508      	adds	r5, #8
 8007df8:	2d0c      	cmp	r5, #12
 8007dfa:	bf38      	it	cc
 8007dfc:	250c      	movcc	r5, #12
 8007dfe:	4638      	mov	r0, r7
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7ff ffa5 	bl	8007d50 <sbrk_aligned>
 8007e06:	3001      	adds	r0, #1
 8007e08:	d02b      	beq.n	8007e62 <_malloc_r+0xd2>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	442b      	add	r3, r5
 8007e0e:	6023      	str	r3, [r4, #0]
 8007e10:	e00e      	b.n	8007e30 <_malloc_r+0xa0>
 8007e12:	6822      	ldr	r2, [r4, #0]
 8007e14:	1b52      	subs	r2, r2, r5
 8007e16:	d41e      	bmi.n	8007e56 <_malloc_r+0xc6>
 8007e18:	2a0b      	cmp	r2, #11
 8007e1a:	d916      	bls.n	8007e4a <_malloc_r+0xba>
 8007e1c:	1961      	adds	r1, r4, r5
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	6025      	str	r5, [r4, #0]
 8007e22:	bf18      	it	ne
 8007e24:	6059      	strne	r1, [r3, #4]
 8007e26:	6863      	ldr	r3, [r4, #4]
 8007e28:	bf08      	it	eq
 8007e2a:	6031      	streq	r1, [r6, #0]
 8007e2c:	5162      	str	r2, [r4, r5]
 8007e2e:	604b      	str	r3, [r1, #4]
 8007e30:	4638      	mov	r0, r7
 8007e32:	f104 060b 	add.w	r6, r4, #11
 8007e36:	f000 f8bf 	bl	8007fb8 <__malloc_unlock>
 8007e3a:	f026 0607 	bic.w	r6, r6, #7
 8007e3e:	1d23      	adds	r3, r4, #4
 8007e40:	1af2      	subs	r2, r6, r3
 8007e42:	d0b6      	beq.n	8007db2 <_malloc_r+0x22>
 8007e44:	1b9b      	subs	r3, r3, r6
 8007e46:	50a3      	str	r3, [r4, r2]
 8007e48:	e7b3      	b.n	8007db2 <_malloc_r+0x22>
 8007e4a:	6862      	ldr	r2, [r4, #4]
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	bf0c      	ite	eq
 8007e50:	6032      	streq	r2, [r6, #0]
 8007e52:	605a      	strne	r2, [r3, #4]
 8007e54:	e7ec      	b.n	8007e30 <_malloc_r+0xa0>
 8007e56:	4623      	mov	r3, r4
 8007e58:	6864      	ldr	r4, [r4, #4]
 8007e5a:	e7b2      	b.n	8007dc2 <_malloc_r+0x32>
 8007e5c:	4634      	mov	r4, r6
 8007e5e:	6876      	ldr	r6, [r6, #4]
 8007e60:	e7b9      	b.n	8007dd6 <_malloc_r+0x46>
 8007e62:	230c      	movs	r3, #12
 8007e64:	4638      	mov	r0, r7
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	f000 f8a6 	bl	8007fb8 <__malloc_unlock>
 8007e6c:	e7a1      	b.n	8007db2 <_malloc_r+0x22>
 8007e6e:	6025      	str	r5, [r4, #0]
 8007e70:	e7de      	b.n	8007e30 <_malloc_r+0xa0>
 8007e72:	bf00      	nop
 8007e74:	20001bec 	.word	0x20001bec

08007e78 <cleanup_glue>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	6809      	ldr	r1, [r1, #0]
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b109      	cbz	r1, 8007e86 <cleanup_glue+0xe>
 8007e82:	f7ff fff9 	bl	8007e78 <cleanup_glue>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e8e:	f000 b899 	b.w	8007fc4 <_free_r>
	...

08007e94 <_reclaim_reent>:
 8007e94:	4b2c      	ldr	r3, [pc, #176]	; (8007f48 <_reclaim_reent+0xb4>)
 8007e96:	b570      	push	{r4, r5, r6, lr}
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	4283      	cmp	r3, r0
 8007e9e:	d051      	beq.n	8007f44 <_reclaim_reent+0xb0>
 8007ea0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ea2:	b143      	cbz	r3, 8007eb6 <_reclaim_reent+0x22>
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d14a      	bne.n	8007f40 <_reclaim_reent+0xac>
 8007eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eac:	6819      	ldr	r1, [r3, #0]
 8007eae:	b111      	cbz	r1, 8007eb6 <_reclaim_reent+0x22>
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 f887 	bl	8007fc4 <_free_r>
 8007eb6:	6961      	ldr	r1, [r4, #20]
 8007eb8:	b111      	cbz	r1, 8007ec0 <_reclaim_reent+0x2c>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 f882 	bl	8007fc4 <_free_r>
 8007ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ec2:	b111      	cbz	r1, 8007eca <_reclaim_reent+0x36>
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 f87d 	bl	8007fc4 <_free_r>
 8007eca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ecc:	b111      	cbz	r1, 8007ed4 <_reclaim_reent+0x40>
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f878 	bl	8007fc4 <_free_r>
 8007ed4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ed6:	b111      	cbz	r1, 8007ede <_reclaim_reent+0x4a>
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 f873 	bl	8007fc4 <_free_r>
 8007ede:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ee0:	b111      	cbz	r1, 8007ee8 <_reclaim_reent+0x54>
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 f86e 	bl	8007fc4 <_free_r>
 8007ee8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007eea:	b111      	cbz	r1, 8007ef2 <_reclaim_reent+0x5e>
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 f869 	bl	8007fc4 <_free_r>
 8007ef2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ef4:	b111      	cbz	r1, 8007efc <_reclaim_reent+0x68>
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 f864 	bl	8007fc4 <_free_r>
 8007efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007efe:	b111      	cbz	r1, 8007f06 <_reclaim_reent+0x72>
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f85f 	bl	8007fc4 <_free_r>
 8007f06:	69a3      	ldr	r3, [r4, #24]
 8007f08:	b1e3      	cbz	r3, 8007f44 <_reclaim_reent+0xb0>
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f0e:	4798      	blx	r3
 8007f10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f12:	b1b9      	cbz	r1, 8007f44 <_reclaim_reent+0xb0>
 8007f14:	4620      	mov	r0, r4
 8007f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f1a:	f7ff bfad 	b.w	8007e78 <cleanup_glue>
 8007f1e:	5949      	ldr	r1, [r1, r5]
 8007f20:	b941      	cbnz	r1, 8007f34 <_reclaim_reent+0xa0>
 8007f22:	3504      	adds	r5, #4
 8007f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f26:	2d80      	cmp	r5, #128	; 0x80
 8007f28:	68d9      	ldr	r1, [r3, #12]
 8007f2a:	d1f8      	bne.n	8007f1e <_reclaim_reent+0x8a>
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 f849 	bl	8007fc4 <_free_r>
 8007f32:	e7ba      	b.n	8007eaa <_reclaim_reent+0x16>
 8007f34:	680e      	ldr	r6, [r1, #0]
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 f844 	bl	8007fc4 <_free_r>
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	e7ef      	b.n	8007f20 <_reclaim_reent+0x8c>
 8007f40:	2500      	movs	r5, #0
 8007f42:	e7ef      	b.n	8007f24 <_reclaim_reent+0x90>
 8007f44:	bd70      	pop	{r4, r5, r6, pc}
 8007f46:	bf00      	nop
 8007f48:	20000028 	.word	0x20000028

08007f4c <_sbrk_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	2300      	movs	r3, #0
 8007f50:	4d05      	ldr	r5, [pc, #20]	; (8007f68 <_sbrk_r+0x1c>)
 8007f52:	4604      	mov	r4, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	602b      	str	r3, [r5, #0]
 8007f58:	f7f9 fae2 	bl	8001520 <_sbrk>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_sbrk_r+0x1a>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_sbrk_r+0x1a>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	20001bf4 	.word	0x20001bf4

08007f6c <siprintf>:
 8007f6c:	b40e      	push	{r1, r2, r3}
 8007f6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f72:	b500      	push	{lr}
 8007f74:	b09c      	sub	sp, #112	; 0x70
 8007f76:	ab1d      	add	r3, sp, #116	; 0x74
 8007f78:	9002      	str	r0, [sp, #8]
 8007f7a:	9006      	str	r0, [sp, #24]
 8007f7c:	9107      	str	r1, [sp, #28]
 8007f7e:	9104      	str	r1, [sp, #16]
 8007f80:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <siprintf+0x38>)
 8007f82:	4909      	ldr	r1, [pc, #36]	; (8007fa8 <siprintf+0x3c>)
 8007f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f88:	9105      	str	r1, [sp, #20]
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	a902      	add	r1, sp, #8
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	f000 f8bc 	bl	800810c <_svfiprintf_r>
 8007f94:	2200      	movs	r2, #0
 8007f96:	9b02      	ldr	r3, [sp, #8]
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	b01c      	add	sp, #112	; 0x70
 8007f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa0:	b003      	add	sp, #12
 8007fa2:	4770      	bx	lr
 8007fa4:	20000028 	.word	0x20000028
 8007fa8:	ffff0208 	.word	0xffff0208

08007fac <__malloc_lock>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__malloc_lock+0x8>)
 8007fae:	f7ff beb7 	b.w	8007d20 <__retarget_lock_acquire_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	20001be8 	.word	0x20001be8

08007fb8 <__malloc_unlock>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__malloc_unlock+0x8>)
 8007fba:	f7ff beb2 	b.w	8007d22 <__retarget_lock_release_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	20001be8 	.word	0x20001be8

08007fc4 <_free_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	d040      	beq.n	800804e <_free_r+0x8a>
 8007fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fd0:	1f0c      	subs	r4, r1, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfb8      	it	lt
 8007fd6:	18e4      	addlt	r4, r4, r3
 8007fd8:	f7ff ffe8 	bl	8007fac <__malloc_lock>
 8007fdc:	4a1c      	ldr	r2, [pc, #112]	; (8008050 <_free_r+0x8c>)
 8007fde:	6813      	ldr	r3, [r2, #0]
 8007fe0:	b933      	cbnz	r3, 8007ff0 <_free_r+0x2c>
 8007fe2:	6063      	str	r3, [r4, #4]
 8007fe4:	6014      	str	r4, [r2, #0]
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fec:	f7ff bfe4 	b.w	8007fb8 <__malloc_unlock>
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d908      	bls.n	8008006 <_free_r+0x42>
 8007ff4:	6820      	ldr	r0, [r4, #0]
 8007ff6:	1821      	adds	r1, r4, r0
 8007ff8:	428b      	cmp	r3, r1
 8007ffa:	bf01      	itttt	eq
 8007ffc:	6819      	ldreq	r1, [r3, #0]
 8007ffe:	685b      	ldreq	r3, [r3, #4]
 8008000:	1809      	addeq	r1, r1, r0
 8008002:	6021      	streq	r1, [r4, #0]
 8008004:	e7ed      	b.n	8007fe2 <_free_r+0x1e>
 8008006:	461a      	mov	r2, r3
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	b10b      	cbz	r3, 8008010 <_free_r+0x4c>
 800800c:	42a3      	cmp	r3, r4
 800800e:	d9fa      	bls.n	8008006 <_free_r+0x42>
 8008010:	6811      	ldr	r1, [r2, #0]
 8008012:	1850      	adds	r0, r2, r1
 8008014:	42a0      	cmp	r0, r4
 8008016:	d10b      	bne.n	8008030 <_free_r+0x6c>
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	4401      	add	r1, r0
 800801c:	1850      	adds	r0, r2, r1
 800801e:	4283      	cmp	r3, r0
 8008020:	6011      	str	r1, [r2, #0]
 8008022:	d1e0      	bne.n	8007fe6 <_free_r+0x22>
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4401      	add	r1, r0
 800802a:	6011      	str	r1, [r2, #0]
 800802c:	6053      	str	r3, [r2, #4]
 800802e:	e7da      	b.n	8007fe6 <_free_r+0x22>
 8008030:	d902      	bls.n	8008038 <_free_r+0x74>
 8008032:	230c      	movs	r3, #12
 8008034:	602b      	str	r3, [r5, #0]
 8008036:	e7d6      	b.n	8007fe6 <_free_r+0x22>
 8008038:	6820      	ldr	r0, [r4, #0]
 800803a:	1821      	adds	r1, r4, r0
 800803c:	428b      	cmp	r3, r1
 800803e:	bf01      	itttt	eq
 8008040:	6819      	ldreq	r1, [r3, #0]
 8008042:	685b      	ldreq	r3, [r3, #4]
 8008044:	1809      	addeq	r1, r1, r0
 8008046:	6021      	streq	r1, [r4, #0]
 8008048:	6063      	str	r3, [r4, #4]
 800804a:	6054      	str	r4, [r2, #4]
 800804c:	e7cb      	b.n	8007fe6 <_free_r+0x22>
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20001bec 	.word	0x20001bec

08008054 <__ssputs_r>:
 8008054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008058:	688e      	ldr	r6, [r1, #8]
 800805a:	4682      	mov	sl, r0
 800805c:	429e      	cmp	r6, r3
 800805e:	460c      	mov	r4, r1
 8008060:	4690      	mov	r8, r2
 8008062:	461f      	mov	r7, r3
 8008064:	d838      	bhi.n	80080d8 <__ssputs_r+0x84>
 8008066:	898a      	ldrh	r2, [r1, #12]
 8008068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800806c:	d032      	beq.n	80080d4 <__ssputs_r+0x80>
 800806e:	6825      	ldr	r5, [r4, #0]
 8008070:	6909      	ldr	r1, [r1, #16]
 8008072:	3301      	adds	r3, #1
 8008074:	eba5 0901 	sub.w	r9, r5, r1
 8008078:	6965      	ldr	r5, [r4, #20]
 800807a:	444b      	add	r3, r9
 800807c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008084:	106d      	asrs	r5, r5, #1
 8008086:	429d      	cmp	r5, r3
 8008088:	bf38      	it	cc
 800808a:	461d      	movcc	r5, r3
 800808c:	0553      	lsls	r3, r2, #21
 800808e:	d531      	bpl.n	80080f4 <__ssputs_r+0xa0>
 8008090:	4629      	mov	r1, r5
 8008092:	f7ff fe7d 	bl	8007d90 <_malloc_r>
 8008096:	4606      	mov	r6, r0
 8008098:	b950      	cbnz	r0, 80080b0 <__ssputs_r+0x5c>
 800809a:	230c      	movs	r3, #12
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	f8ca 3000 	str.w	r3, [sl]
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b0:	464a      	mov	r2, r9
 80080b2:	6921      	ldr	r1, [r4, #16]
 80080b4:	f7ff fe36 	bl	8007d24 <memcpy>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	6126      	str	r6, [r4, #16]
 80080c6:	444e      	add	r6, r9
 80080c8:	6026      	str	r6, [r4, #0]
 80080ca:	463e      	mov	r6, r7
 80080cc:	6165      	str	r5, [r4, #20]
 80080ce:	eba5 0509 	sub.w	r5, r5, r9
 80080d2:	60a5      	str	r5, [r4, #8]
 80080d4:	42be      	cmp	r6, r7
 80080d6:	d900      	bls.n	80080da <__ssputs_r+0x86>
 80080d8:	463e      	mov	r6, r7
 80080da:	4632      	mov	r2, r6
 80080dc:	4641      	mov	r1, r8
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	f000 fab8 	bl	8008654 <memmove>
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	2000      	movs	r0, #0
 80080e8:	1b9b      	subs	r3, r3, r6
 80080ea:	60a3      	str	r3, [r4, #8]
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	4433      	add	r3, r6
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	e7db      	b.n	80080ac <__ssputs_r+0x58>
 80080f4:	462a      	mov	r2, r5
 80080f6:	f000 fac7 	bl	8008688 <_realloc_r>
 80080fa:	4606      	mov	r6, r0
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1e1      	bne.n	80080c4 <__ssputs_r+0x70>
 8008100:	4650      	mov	r0, sl
 8008102:	6921      	ldr	r1, [r4, #16]
 8008104:	f7ff ff5e 	bl	8007fc4 <_free_r>
 8008108:	e7c7      	b.n	800809a <__ssputs_r+0x46>
	...

0800810c <_svfiprintf_r>:
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	4698      	mov	r8, r3
 8008112:	898b      	ldrh	r3, [r1, #12]
 8008114:	4607      	mov	r7, r0
 8008116:	061b      	lsls	r3, r3, #24
 8008118:	460d      	mov	r5, r1
 800811a:	4614      	mov	r4, r2
 800811c:	b09d      	sub	sp, #116	; 0x74
 800811e:	d50e      	bpl.n	800813e <_svfiprintf_r+0x32>
 8008120:	690b      	ldr	r3, [r1, #16]
 8008122:	b963      	cbnz	r3, 800813e <_svfiprintf_r+0x32>
 8008124:	2140      	movs	r1, #64	; 0x40
 8008126:	f7ff fe33 	bl	8007d90 <_malloc_r>
 800812a:	6028      	str	r0, [r5, #0]
 800812c:	6128      	str	r0, [r5, #16]
 800812e:	b920      	cbnz	r0, 800813a <_svfiprintf_r+0x2e>
 8008130:	230c      	movs	r3, #12
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e0d1      	b.n	80082de <_svfiprintf_r+0x1d2>
 800813a:	2340      	movs	r3, #64	; 0x40
 800813c:	616b      	str	r3, [r5, #20]
 800813e:	2300      	movs	r3, #0
 8008140:	9309      	str	r3, [sp, #36]	; 0x24
 8008142:	2320      	movs	r3, #32
 8008144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008148:	2330      	movs	r3, #48	; 0x30
 800814a:	f04f 0901 	mov.w	r9, #1
 800814e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008152:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082f8 <_svfiprintf_r+0x1ec>
 8008156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800815a:	4623      	mov	r3, r4
 800815c:	469a      	mov	sl, r3
 800815e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008162:	b10a      	cbz	r2, 8008168 <_svfiprintf_r+0x5c>
 8008164:	2a25      	cmp	r2, #37	; 0x25
 8008166:	d1f9      	bne.n	800815c <_svfiprintf_r+0x50>
 8008168:	ebba 0b04 	subs.w	fp, sl, r4
 800816c:	d00b      	beq.n	8008186 <_svfiprintf_r+0x7a>
 800816e:	465b      	mov	r3, fp
 8008170:	4622      	mov	r2, r4
 8008172:	4629      	mov	r1, r5
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff ff6d 	bl	8008054 <__ssputs_r>
 800817a:	3001      	adds	r0, #1
 800817c:	f000 80aa 	beq.w	80082d4 <_svfiprintf_r+0x1c8>
 8008180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008182:	445a      	add	r2, fp
 8008184:	9209      	str	r2, [sp, #36]	; 0x24
 8008186:	f89a 3000 	ldrb.w	r3, [sl]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80a2 	beq.w	80082d4 <_svfiprintf_r+0x1c8>
 8008190:	2300      	movs	r3, #0
 8008192:	f04f 32ff 	mov.w	r2, #4294967295
 8008196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800819a:	f10a 0a01 	add.w	sl, sl, #1
 800819e:	9304      	str	r3, [sp, #16]
 80081a0:	9307      	str	r3, [sp, #28]
 80081a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081a6:	931a      	str	r3, [sp, #104]	; 0x68
 80081a8:	4654      	mov	r4, sl
 80081aa:	2205      	movs	r2, #5
 80081ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b0:	4851      	ldr	r0, [pc, #324]	; (80082f8 <_svfiprintf_r+0x1ec>)
 80081b2:	f000 fa41 	bl	8008638 <memchr>
 80081b6:	9a04      	ldr	r2, [sp, #16]
 80081b8:	b9d8      	cbnz	r0, 80081f2 <_svfiprintf_r+0xe6>
 80081ba:	06d0      	lsls	r0, r2, #27
 80081bc:	bf44      	itt	mi
 80081be:	2320      	movmi	r3, #32
 80081c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c4:	0711      	lsls	r1, r2, #28
 80081c6:	bf44      	itt	mi
 80081c8:	232b      	movmi	r3, #43	; 0x2b
 80081ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ce:	f89a 3000 	ldrb.w	r3, [sl]
 80081d2:	2b2a      	cmp	r3, #42	; 0x2a
 80081d4:	d015      	beq.n	8008202 <_svfiprintf_r+0xf6>
 80081d6:	4654      	mov	r4, sl
 80081d8:	2000      	movs	r0, #0
 80081da:	f04f 0c0a 	mov.w	ip, #10
 80081de:	9a07      	ldr	r2, [sp, #28]
 80081e0:	4621      	mov	r1, r4
 80081e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e6:	3b30      	subs	r3, #48	; 0x30
 80081e8:	2b09      	cmp	r3, #9
 80081ea:	d94e      	bls.n	800828a <_svfiprintf_r+0x17e>
 80081ec:	b1b0      	cbz	r0, 800821c <_svfiprintf_r+0x110>
 80081ee:	9207      	str	r2, [sp, #28]
 80081f0:	e014      	b.n	800821c <_svfiprintf_r+0x110>
 80081f2:	eba0 0308 	sub.w	r3, r0, r8
 80081f6:	fa09 f303 	lsl.w	r3, r9, r3
 80081fa:	4313      	orrs	r3, r2
 80081fc:	46a2      	mov	sl, r4
 80081fe:	9304      	str	r3, [sp, #16]
 8008200:	e7d2      	b.n	80081a8 <_svfiprintf_r+0x9c>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	1d19      	adds	r1, r3, #4
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	9103      	str	r1, [sp, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	bfbb      	ittet	lt
 800820e:	425b      	neglt	r3, r3
 8008210:	f042 0202 	orrlt.w	r2, r2, #2
 8008214:	9307      	strge	r3, [sp, #28]
 8008216:	9307      	strlt	r3, [sp, #28]
 8008218:	bfb8      	it	lt
 800821a:	9204      	strlt	r2, [sp, #16]
 800821c:	7823      	ldrb	r3, [r4, #0]
 800821e:	2b2e      	cmp	r3, #46	; 0x2e
 8008220:	d10c      	bne.n	800823c <_svfiprintf_r+0x130>
 8008222:	7863      	ldrb	r3, [r4, #1]
 8008224:	2b2a      	cmp	r3, #42	; 0x2a
 8008226:	d135      	bne.n	8008294 <_svfiprintf_r+0x188>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	3402      	adds	r4, #2
 800822c:	1d1a      	adds	r2, r3, #4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	9203      	str	r2, [sp, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	bfb8      	it	lt
 8008236:	f04f 33ff 	movlt.w	r3, #4294967295
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80082fc <_svfiprintf_r+0x1f0>
 8008240:	2203      	movs	r2, #3
 8008242:	4650      	mov	r0, sl
 8008244:	7821      	ldrb	r1, [r4, #0]
 8008246:	f000 f9f7 	bl	8008638 <memchr>
 800824a:	b140      	cbz	r0, 800825e <_svfiprintf_r+0x152>
 800824c:	2340      	movs	r3, #64	; 0x40
 800824e:	eba0 000a 	sub.w	r0, r0, sl
 8008252:	fa03 f000 	lsl.w	r0, r3, r0
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	3401      	adds	r4, #1
 800825a:	4303      	orrs	r3, r0
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008262:	2206      	movs	r2, #6
 8008264:	4826      	ldr	r0, [pc, #152]	; (8008300 <_svfiprintf_r+0x1f4>)
 8008266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800826a:	f000 f9e5 	bl	8008638 <memchr>
 800826e:	2800      	cmp	r0, #0
 8008270:	d038      	beq.n	80082e4 <_svfiprintf_r+0x1d8>
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <_svfiprintf_r+0x1f8>)
 8008274:	bb1b      	cbnz	r3, 80082be <_svfiprintf_r+0x1b2>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	3307      	adds	r3, #7
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	3308      	adds	r3, #8
 8008280:	9303      	str	r3, [sp, #12]
 8008282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008284:	4433      	add	r3, r6
 8008286:	9309      	str	r3, [sp, #36]	; 0x24
 8008288:	e767      	b.n	800815a <_svfiprintf_r+0x4e>
 800828a:	460c      	mov	r4, r1
 800828c:	2001      	movs	r0, #1
 800828e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008292:	e7a5      	b.n	80081e0 <_svfiprintf_r+0xd4>
 8008294:	2300      	movs	r3, #0
 8008296:	f04f 0c0a 	mov.w	ip, #10
 800829a:	4619      	mov	r1, r3
 800829c:	3401      	adds	r4, #1
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	4620      	mov	r0, r4
 80082a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a6:	3a30      	subs	r2, #48	; 0x30
 80082a8:	2a09      	cmp	r2, #9
 80082aa:	d903      	bls.n	80082b4 <_svfiprintf_r+0x1a8>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0c5      	beq.n	800823c <_svfiprintf_r+0x130>
 80082b0:	9105      	str	r1, [sp, #20]
 80082b2:	e7c3      	b.n	800823c <_svfiprintf_r+0x130>
 80082b4:	4604      	mov	r4, r0
 80082b6:	2301      	movs	r3, #1
 80082b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80082bc:	e7f0      	b.n	80082a0 <_svfiprintf_r+0x194>
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	4b10      	ldr	r3, [pc, #64]	; (8008308 <_svfiprintf_r+0x1fc>)
 80082c8:	a904      	add	r1, sp, #16
 80082ca:	f3af 8000 	nop.w
 80082ce:	1c42      	adds	r2, r0, #1
 80082d0:	4606      	mov	r6, r0
 80082d2:	d1d6      	bne.n	8008282 <_svfiprintf_r+0x176>
 80082d4:	89ab      	ldrh	r3, [r5, #12]
 80082d6:	065b      	lsls	r3, r3, #25
 80082d8:	f53f af2c 	bmi.w	8008134 <_svfiprintf_r+0x28>
 80082dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082de:	b01d      	add	sp, #116	; 0x74
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	ab03      	add	r3, sp, #12
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	462a      	mov	r2, r5
 80082ea:	4638      	mov	r0, r7
 80082ec:	4b06      	ldr	r3, [pc, #24]	; (8008308 <_svfiprintf_r+0x1fc>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	f000 f87c 	bl	80083ec <_printf_i>
 80082f4:	e7eb      	b.n	80082ce <_svfiprintf_r+0x1c2>
 80082f6:	bf00      	nop
 80082f8:	08009608 	.word	0x08009608
 80082fc:	0800960e 	.word	0x0800960e
 8008300:	08009612 	.word	0x08009612
 8008304:	00000000 	.word	0x00000000
 8008308:	08008055 	.word	0x08008055

0800830c <_printf_common>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	4616      	mov	r6, r2
 8008312:	4699      	mov	r9, r3
 8008314:	688a      	ldr	r2, [r1, #8]
 8008316:	690b      	ldr	r3, [r1, #16]
 8008318:	4607      	mov	r7, r0
 800831a:	4293      	cmp	r3, r2
 800831c:	bfb8      	it	lt
 800831e:	4613      	movlt	r3, r2
 8008320:	6033      	str	r3, [r6, #0]
 8008322:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008326:	460c      	mov	r4, r1
 8008328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800832c:	b10a      	cbz	r2, 8008332 <_printf_common+0x26>
 800832e:	3301      	adds	r3, #1
 8008330:	6033      	str	r3, [r6, #0]
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	0699      	lsls	r1, r3, #26
 8008336:	bf42      	ittt	mi
 8008338:	6833      	ldrmi	r3, [r6, #0]
 800833a:	3302      	addmi	r3, #2
 800833c:	6033      	strmi	r3, [r6, #0]
 800833e:	6825      	ldr	r5, [r4, #0]
 8008340:	f015 0506 	ands.w	r5, r5, #6
 8008344:	d106      	bne.n	8008354 <_printf_common+0x48>
 8008346:	f104 0a19 	add.w	sl, r4, #25
 800834a:	68e3      	ldr	r3, [r4, #12]
 800834c:	6832      	ldr	r2, [r6, #0]
 800834e:	1a9b      	subs	r3, r3, r2
 8008350:	42ab      	cmp	r3, r5
 8008352:	dc28      	bgt.n	80083a6 <_printf_common+0x9a>
 8008354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008358:	1e13      	subs	r3, r2, #0
 800835a:	6822      	ldr	r2, [r4, #0]
 800835c:	bf18      	it	ne
 800835e:	2301      	movne	r3, #1
 8008360:	0692      	lsls	r2, r2, #26
 8008362:	d42d      	bmi.n	80083c0 <_printf_common+0xb4>
 8008364:	4649      	mov	r1, r9
 8008366:	4638      	mov	r0, r7
 8008368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800836c:	47c0      	blx	r8
 800836e:	3001      	adds	r0, #1
 8008370:	d020      	beq.n	80083b4 <_printf_common+0xa8>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	68e5      	ldr	r5, [r4, #12]
 8008376:	f003 0306 	and.w	r3, r3, #6
 800837a:	2b04      	cmp	r3, #4
 800837c:	bf18      	it	ne
 800837e:	2500      	movne	r5, #0
 8008380:	6832      	ldr	r2, [r6, #0]
 8008382:	f04f 0600 	mov.w	r6, #0
 8008386:	68a3      	ldr	r3, [r4, #8]
 8008388:	bf08      	it	eq
 800838a:	1aad      	subeq	r5, r5, r2
 800838c:	6922      	ldr	r2, [r4, #16]
 800838e:	bf08      	it	eq
 8008390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008394:	4293      	cmp	r3, r2
 8008396:	bfc4      	itt	gt
 8008398:	1a9b      	subgt	r3, r3, r2
 800839a:	18ed      	addgt	r5, r5, r3
 800839c:	341a      	adds	r4, #26
 800839e:	42b5      	cmp	r5, r6
 80083a0:	d11a      	bne.n	80083d8 <_printf_common+0xcc>
 80083a2:	2000      	movs	r0, #0
 80083a4:	e008      	b.n	80083b8 <_printf_common+0xac>
 80083a6:	2301      	movs	r3, #1
 80083a8:	4652      	mov	r2, sl
 80083aa:	4649      	mov	r1, r9
 80083ac:	4638      	mov	r0, r7
 80083ae:	47c0      	blx	r8
 80083b0:	3001      	adds	r0, #1
 80083b2:	d103      	bne.n	80083bc <_printf_common+0xb0>
 80083b4:	f04f 30ff 	mov.w	r0, #4294967295
 80083b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083bc:	3501      	adds	r5, #1
 80083be:	e7c4      	b.n	800834a <_printf_common+0x3e>
 80083c0:	2030      	movs	r0, #48	; 0x30
 80083c2:	18e1      	adds	r1, r4, r3
 80083c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083ce:	4422      	add	r2, r4
 80083d0:	3302      	adds	r3, #2
 80083d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083d6:	e7c5      	b.n	8008364 <_printf_common+0x58>
 80083d8:	2301      	movs	r3, #1
 80083da:	4622      	mov	r2, r4
 80083dc:	4649      	mov	r1, r9
 80083de:	4638      	mov	r0, r7
 80083e0:	47c0      	blx	r8
 80083e2:	3001      	adds	r0, #1
 80083e4:	d0e6      	beq.n	80083b4 <_printf_common+0xa8>
 80083e6:	3601      	adds	r6, #1
 80083e8:	e7d9      	b.n	800839e <_printf_common+0x92>
	...

080083ec <_printf_i>:
 80083ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	7e0f      	ldrb	r7, [r1, #24]
 80083f2:	4691      	mov	r9, r2
 80083f4:	2f78      	cmp	r7, #120	; 0x78
 80083f6:	4680      	mov	r8, r0
 80083f8:	460c      	mov	r4, r1
 80083fa:	469a      	mov	sl, r3
 80083fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008402:	d807      	bhi.n	8008414 <_printf_i+0x28>
 8008404:	2f62      	cmp	r7, #98	; 0x62
 8008406:	d80a      	bhi.n	800841e <_printf_i+0x32>
 8008408:	2f00      	cmp	r7, #0
 800840a:	f000 80d9 	beq.w	80085c0 <_printf_i+0x1d4>
 800840e:	2f58      	cmp	r7, #88	; 0x58
 8008410:	f000 80a4 	beq.w	800855c <_printf_i+0x170>
 8008414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800841c:	e03a      	b.n	8008494 <_printf_i+0xa8>
 800841e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008422:	2b15      	cmp	r3, #21
 8008424:	d8f6      	bhi.n	8008414 <_printf_i+0x28>
 8008426:	a101      	add	r1, pc, #4	; (adr r1, 800842c <_printf_i+0x40>)
 8008428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800842c:	08008485 	.word	0x08008485
 8008430:	08008499 	.word	0x08008499
 8008434:	08008415 	.word	0x08008415
 8008438:	08008415 	.word	0x08008415
 800843c:	08008415 	.word	0x08008415
 8008440:	08008415 	.word	0x08008415
 8008444:	08008499 	.word	0x08008499
 8008448:	08008415 	.word	0x08008415
 800844c:	08008415 	.word	0x08008415
 8008450:	08008415 	.word	0x08008415
 8008454:	08008415 	.word	0x08008415
 8008458:	080085a7 	.word	0x080085a7
 800845c:	080084c9 	.word	0x080084c9
 8008460:	08008589 	.word	0x08008589
 8008464:	08008415 	.word	0x08008415
 8008468:	08008415 	.word	0x08008415
 800846c:	080085c9 	.word	0x080085c9
 8008470:	08008415 	.word	0x08008415
 8008474:	080084c9 	.word	0x080084c9
 8008478:	08008415 	.word	0x08008415
 800847c:	08008415 	.word	0x08008415
 8008480:	08008591 	.word	0x08008591
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	1d1a      	adds	r2, r3, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	602a      	str	r2, [r5, #0]
 800848c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008494:	2301      	movs	r3, #1
 8008496:	e0a4      	b.n	80085e2 <_printf_i+0x1f6>
 8008498:	6820      	ldr	r0, [r4, #0]
 800849a:	6829      	ldr	r1, [r5, #0]
 800849c:	0606      	lsls	r6, r0, #24
 800849e:	f101 0304 	add.w	r3, r1, #4
 80084a2:	d50a      	bpl.n	80084ba <_printf_i+0xce>
 80084a4:	680e      	ldr	r6, [r1, #0]
 80084a6:	602b      	str	r3, [r5, #0]
 80084a8:	2e00      	cmp	r6, #0
 80084aa:	da03      	bge.n	80084b4 <_printf_i+0xc8>
 80084ac:	232d      	movs	r3, #45	; 0x2d
 80084ae:	4276      	negs	r6, r6
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b4:	230a      	movs	r3, #10
 80084b6:	485e      	ldr	r0, [pc, #376]	; (8008630 <_printf_i+0x244>)
 80084b8:	e019      	b.n	80084ee <_printf_i+0x102>
 80084ba:	680e      	ldr	r6, [r1, #0]
 80084bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	bf18      	it	ne
 80084c4:	b236      	sxthne	r6, r6
 80084c6:	e7ef      	b.n	80084a8 <_printf_i+0xbc>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	6820      	ldr	r0, [r4, #0]
 80084cc:	1d19      	adds	r1, r3, #4
 80084ce:	6029      	str	r1, [r5, #0]
 80084d0:	0601      	lsls	r1, r0, #24
 80084d2:	d501      	bpl.n	80084d8 <_printf_i+0xec>
 80084d4:	681e      	ldr	r6, [r3, #0]
 80084d6:	e002      	b.n	80084de <_printf_i+0xf2>
 80084d8:	0646      	lsls	r6, r0, #25
 80084da:	d5fb      	bpl.n	80084d4 <_printf_i+0xe8>
 80084dc:	881e      	ldrh	r6, [r3, #0]
 80084de:	2f6f      	cmp	r7, #111	; 0x6f
 80084e0:	bf0c      	ite	eq
 80084e2:	2308      	moveq	r3, #8
 80084e4:	230a      	movne	r3, #10
 80084e6:	4852      	ldr	r0, [pc, #328]	; (8008630 <_printf_i+0x244>)
 80084e8:	2100      	movs	r1, #0
 80084ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ee:	6865      	ldr	r5, [r4, #4]
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	bfa8      	it	ge
 80084f4:	6821      	ldrge	r1, [r4, #0]
 80084f6:	60a5      	str	r5, [r4, #8]
 80084f8:	bfa4      	itt	ge
 80084fa:	f021 0104 	bicge.w	r1, r1, #4
 80084fe:	6021      	strge	r1, [r4, #0]
 8008500:	b90e      	cbnz	r6, 8008506 <_printf_i+0x11a>
 8008502:	2d00      	cmp	r5, #0
 8008504:	d04d      	beq.n	80085a2 <_printf_i+0x1b6>
 8008506:	4615      	mov	r5, r2
 8008508:	fbb6 f1f3 	udiv	r1, r6, r3
 800850c:	fb03 6711 	mls	r7, r3, r1, r6
 8008510:	5dc7      	ldrb	r7, [r0, r7]
 8008512:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008516:	4637      	mov	r7, r6
 8008518:	42bb      	cmp	r3, r7
 800851a:	460e      	mov	r6, r1
 800851c:	d9f4      	bls.n	8008508 <_printf_i+0x11c>
 800851e:	2b08      	cmp	r3, #8
 8008520:	d10b      	bne.n	800853a <_printf_i+0x14e>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	07de      	lsls	r6, r3, #31
 8008526:	d508      	bpl.n	800853a <_printf_i+0x14e>
 8008528:	6923      	ldr	r3, [r4, #16]
 800852a:	6861      	ldr	r1, [r4, #4]
 800852c:	4299      	cmp	r1, r3
 800852e:	bfde      	ittt	le
 8008530:	2330      	movle	r3, #48	; 0x30
 8008532:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008536:	f105 35ff 	addle.w	r5, r5, #4294967295
 800853a:	1b52      	subs	r2, r2, r5
 800853c:	6122      	str	r2, [r4, #16]
 800853e:	464b      	mov	r3, r9
 8008540:	4621      	mov	r1, r4
 8008542:	4640      	mov	r0, r8
 8008544:	f8cd a000 	str.w	sl, [sp]
 8008548:	aa03      	add	r2, sp, #12
 800854a:	f7ff fedf 	bl	800830c <_printf_common>
 800854e:	3001      	adds	r0, #1
 8008550:	d14c      	bne.n	80085ec <_printf_i+0x200>
 8008552:	f04f 30ff 	mov.w	r0, #4294967295
 8008556:	b004      	add	sp, #16
 8008558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855c:	4834      	ldr	r0, [pc, #208]	; (8008630 <_printf_i+0x244>)
 800855e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008562:	6829      	ldr	r1, [r5, #0]
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	f851 6b04 	ldr.w	r6, [r1], #4
 800856a:	6029      	str	r1, [r5, #0]
 800856c:	061d      	lsls	r5, r3, #24
 800856e:	d514      	bpl.n	800859a <_printf_i+0x1ae>
 8008570:	07df      	lsls	r7, r3, #31
 8008572:	bf44      	itt	mi
 8008574:	f043 0320 	orrmi.w	r3, r3, #32
 8008578:	6023      	strmi	r3, [r4, #0]
 800857a:	b91e      	cbnz	r6, 8008584 <_printf_i+0x198>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	f023 0320 	bic.w	r3, r3, #32
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	2310      	movs	r3, #16
 8008586:	e7af      	b.n	80084e8 <_printf_i+0xfc>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	f043 0320 	orr.w	r3, r3, #32
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	2378      	movs	r3, #120	; 0x78
 8008592:	4828      	ldr	r0, [pc, #160]	; (8008634 <_printf_i+0x248>)
 8008594:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008598:	e7e3      	b.n	8008562 <_printf_i+0x176>
 800859a:	0659      	lsls	r1, r3, #25
 800859c:	bf48      	it	mi
 800859e:	b2b6      	uxthmi	r6, r6
 80085a0:	e7e6      	b.n	8008570 <_printf_i+0x184>
 80085a2:	4615      	mov	r5, r2
 80085a4:	e7bb      	b.n	800851e <_printf_i+0x132>
 80085a6:	682b      	ldr	r3, [r5, #0]
 80085a8:	6826      	ldr	r6, [r4, #0]
 80085aa:	1d18      	adds	r0, r3, #4
 80085ac:	6961      	ldr	r1, [r4, #20]
 80085ae:	6028      	str	r0, [r5, #0]
 80085b0:	0635      	lsls	r5, r6, #24
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	d501      	bpl.n	80085ba <_printf_i+0x1ce>
 80085b6:	6019      	str	r1, [r3, #0]
 80085b8:	e002      	b.n	80085c0 <_printf_i+0x1d4>
 80085ba:	0670      	lsls	r0, r6, #25
 80085bc:	d5fb      	bpl.n	80085b6 <_printf_i+0x1ca>
 80085be:	8019      	strh	r1, [r3, #0]
 80085c0:	2300      	movs	r3, #0
 80085c2:	4615      	mov	r5, r2
 80085c4:	6123      	str	r3, [r4, #16]
 80085c6:	e7ba      	b.n	800853e <_printf_i+0x152>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	2100      	movs	r1, #0
 80085cc:	1d1a      	adds	r2, r3, #4
 80085ce:	602a      	str	r2, [r5, #0]
 80085d0:	681d      	ldr	r5, [r3, #0]
 80085d2:	6862      	ldr	r2, [r4, #4]
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 f82f 	bl	8008638 <memchr>
 80085da:	b108      	cbz	r0, 80085e0 <_printf_i+0x1f4>
 80085dc:	1b40      	subs	r0, r0, r5
 80085de:	6060      	str	r0, [r4, #4]
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	2300      	movs	r3, #0
 80085e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ea:	e7a8      	b.n	800853e <_printf_i+0x152>
 80085ec:	462a      	mov	r2, r5
 80085ee:	4649      	mov	r1, r9
 80085f0:	4640      	mov	r0, r8
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	47d0      	blx	sl
 80085f6:	3001      	adds	r0, #1
 80085f8:	d0ab      	beq.n	8008552 <_printf_i+0x166>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	079b      	lsls	r3, r3, #30
 80085fe:	d413      	bmi.n	8008628 <_printf_i+0x23c>
 8008600:	68e0      	ldr	r0, [r4, #12]
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	4298      	cmp	r0, r3
 8008606:	bfb8      	it	lt
 8008608:	4618      	movlt	r0, r3
 800860a:	e7a4      	b.n	8008556 <_printf_i+0x16a>
 800860c:	2301      	movs	r3, #1
 800860e:	4632      	mov	r2, r6
 8008610:	4649      	mov	r1, r9
 8008612:	4640      	mov	r0, r8
 8008614:	47d0      	blx	sl
 8008616:	3001      	adds	r0, #1
 8008618:	d09b      	beq.n	8008552 <_printf_i+0x166>
 800861a:	3501      	adds	r5, #1
 800861c:	68e3      	ldr	r3, [r4, #12]
 800861e:	9903      	ldr	r1, [sp, #12]
 8008620:	1a5b      	subs	r3, r3, r1
 8008622:	42ab      	cmp	r3, r5
 8008624:	dcf2      	bgt.n	800860c <_printf_i+0x220>
 8008626:	e7eb      	b.n	8008600 <_printf_i+0x214>
 8008628:	2500      	movs	r5, #0
 800862a:	f104 0619 	add.w	r6, r4, #25
 800862e:	e7f5      	b.n	800861c <_printf_i+0x230>
 8008630:	08009619 	.word	0x08009619
 8008634:	0800962a 	.word	0x0800962a

08008638 <memchr>:
 8008638:	4603      	mov	r3, r0
 800863a:	b510      	push	{r4, lr}
 800863c:	b2c9      	uxtb	r1, r1
 800863e:	4402      	add	r2, r0
 8008640:	4293      	cmp	r3, r2
 8008642:	4618      	mov	r0, r3
 8008644:	d101      	bne.n	800864a <memchr+0x12>
 8008646:	2000      	movs	r0, #0
 8008648:	e003      	b.n	8008652 <memchr+0x1a>
 800864a:	7804      	ldrb	r4, [r0, #0]
 800864c:	3301      	adds	r3, #1
 800864e:	428c      	cmp	r4, r1
 8008650:	d1f6      	bne.n	8008640 <memchr+0x8>
 8008652:	bd10      	pop	{r4, pc}

08008654 <memmove>:
 8008654:	4288      	cmp	r0, r1
 8008656:	b510      	push	{r4, lr}
 8008658:	eb01 0402 	add.w	r4, r1, r2
 800865c:	d902      	bls.n	8008664 <memmove+0x10>
 800865e:	4284      	cmp	r4, r0
 8008660:	4623      	mov	r3, r4
 8008662:	d807      	bhi.n	8008674 <memmove+0x20>
 8008664:	1e43      	subs	r3, r0, #1
 8008666:	42a1      	cmp	r1, r4
 8008668:	d008      	beq.n	800867c <memmove+0x28>
 800866a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800866e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008672:	e7f8      	b.n	8008666 <memmove+0x12>
 8008674:	4601      	mov	r1, r0
 8008676:	4402      	add	r2, r0
 8008678:	428a      	cmp	r2, r1
 800867a:	d100      	bne.n	800867e <memmove+0x2a>
 800867c:	bd10      	pop	{r4, pc}
 800867e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008686:	e7f7      	b.n	8008678 <memmove+0x24>

08008688 <_realloc_r>:
 8008688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868c:	4680      	mov	r8, r0
 800868e:	4614      	mov	r4, r2
 8008690:	460e      	mov	r6, r1
 8008692:	b921      	cbnz	r1, 800869e <_realloc_r+0x16>
 8008694:	4611      	mov	r1, r2
 8008696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800869a:	f7ff bb79 	b.w	8007d90 <_malloc_r>
 800869e:	b92a      	cbnz	r2, 80086ac <_realloc_r+0x24>
 80086a0:	f7ff fc90 	bl	8007fc4 <_free_r>
 80086a4:	4625      	mov	r5, r4
 80086a6:	4628      	mov	r0, r5
 80086a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ac:	f000 f81b 	bl	80086e6 <_malloc_usable_size_r>
 80086b0:	4284      	cmp	r4, r0
 80086b2:	4607      	mov	r7, r0
 80086b4:	d802      	bhi.n	80086bc <_realloc_r+0x34>
 80086b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086ba:	d812      	bhi.n	80086e2 <_realloc_r+0x5a>
 80086bc:	4621      	mov	r1, r4
 80086be:	4640      	mov	r0, r8
 80086c0:	f7ff fb66 	bl	8007d90 <_malloc_r>
 80086c4:	4605      	mov	r5, r0
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d0ed      	beq.n	80086a6 <_realloc_r+0x1e>
 80086ca:	42bc      	cmp	r4, r7
 80086cc:	4622      	mov	r2, r4
 80086ce:	4631      	mov	r1, r6
 80086d0:	bf28      	it	cs
 80086d2:	463a      	movcs	r2, r7
 80086d4:	f7ff fb26 	bl	8007d24 <memcpy>
 80086d8:	4631      	mov	r1, r6
 80086da:	4640      	mov	r0, r8
 80086dc:	f7ff fc72 	bl	8007fc4 <_free_r>
 80086e0:	e7e1      	b.n	80086a6 <_realloc_r+0x1e>
 80086e2:	4635      	mov	r5, r6
 80086e4:	e7df      	b.n	80086a6 <_realloc_r+0x1e>

080086e6 <_malloc_usable_size_r>:
 80086e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ea:	1f18      	subs	r0, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfbc      	itt	lt
 80086f0:	580b      	ldrlt	r3, [r1, r0]
 80086f2:	18c0      	addlt	r0, r0, r3
 80086f4:	4770      	bx	lr
	...

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
